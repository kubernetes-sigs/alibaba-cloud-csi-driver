// Code generated by MockGen. DO NOT EDIT.
// Source: cloud.go

// Package dfs is a generated GoMock package.
package dfs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDFSClient is a mock of DFSClient interface.
type MockDFSClient struct {
	ctrl     *gomock.Controller
	recorder *MockDFSClientMockRecorder
}

// MockDFSClientMockRecorder is the mock recorder for MockDFSClient.
type MockDFSClientMockRecorder struct {
	mock *MockDFSClient
}

// NewMockDFSClient creates a new mock instance.
func NewMockDFSClient(ctrl *gomock.Controller) *MockDFSClient {
	mock := &MockDFSClient{ctrl: ctrl}
	mock.recorder = &MockDFSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDFSClient) EXPECT() *MockDFSClientMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockDFSClient) Attach(fileSystemId, mountPointId, instanceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", fileSystemId, mountPointId, instanceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attach indicates an expected call of Attach.
func (mr *MockDFSClientMockRecorder) Attach(fileSystemId, mountPointId, instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockDFSClient)(nil).Attach), fileSystemId, mountPointId, instanceId)
}

// DescribeAttachment mocks base method.
func (m *MockDFSClient) DescribeAttachment(fileSystemId, mountPointId, instanceId string) (*VSC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeAttachment", fileSystemId, mountPointId, instanceId)
	ret0, _ := ret[0].(*VSC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeAttachment indicates an expected call of DescribeAttachment.
func (mr *MockDFSClientMockRecorder) DescribeAttachment(fileSystemId, mountPointId, instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeAttachment", reflect.TypeOf((*MockDFSClient)(nil).DescribeAttachment), fileSystemId, mountPointId, instanceId)
}

// Detach mocks base method.
func (m *MockDFSClient) Detach(fileSystemId, mountPointId, instanceId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detach", fileSystemId, mountPointId, instanceId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Detach indicates an expected call of Detach.
func (mr *MockDFSClientMockRecorder) Detach(fileSystemId, mountPointId, instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detach", reflect.TypeOf((*MockDFSClient)(nil).Detach), fileSystemId, mountPointId, instanceId)
}
