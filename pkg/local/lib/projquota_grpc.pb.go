// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lib

import (
	context "context"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = proto.ProtoPackageIsVersion2

// ProjQuotaClient is the client API for ProjQuota service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjQuotaClient interface {
	CreateProjQuotaSubpath(ctx context.Context, in *CreateProjQuotaSubpathRequest, opts ...grpc.CallOption) (*CreateProjQuotaSubpathReply, error)
	SetSubpathProjQuota(ctx context.Context, in *SetSubpathProjQuotaRequest, opts ...grpc.CallOption) (*SetSubpathProjQuotaReply, error)
	RemoveProjQuotaSubpath(ctx context.Context, in *RemoveProjQuotaSubpathRequest, opts ...grpc.CallOption) (*RemoveProjQuotaSubpathReply, error)
}

type projQuotaClient struct {
	cc *grpc.ClientConn
}

func NewProjQuotaClient(cc *grpc.ClientConn) ProjQuotaClient {
	return &projQuotaClient{cc}
}

func (c *projQuotaClient) CreateProjQuotaSubpath(ctx context.Context, in *CreateProjQuotaSubpathRequest, opts ...grpc.CallOption) (*CreateProjQuotaSubpathReply, error) {
	out := new(CreateProjQuotaSubpathReply)
	err := c.cc.Invoke(ctx, "/proto.ProjQuota/CreateProjQuotaSubpath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projQuotaClient) SetSubpathProjQuota(ctx context.Context, in *SetSubpathProjQuotaRequest, opts ...grpc.CallOption) (*SetSubpathProjQuotaReply, error) {
	out := new(SetSubpathProjQuotaReply)
	err := c.cc.Invoke(ctx, "/proto.ProjQuota/SetSubpathProjQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projQuotaClient) RemoveProjQuotaSubpath(ctx context.Context, in *RemoveProjQuotaSubpathRequest, opts ...grpc.CallOption) (*RemoveProjQuotaSubpathReply, error) {
	out := new(RemoveProjQuotaSubpathReply)
	err := c.cc.Invoke(ctx, "/proto.ProjQuota/RemoveProjQuotaSubpath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjQuotaServer is the server API for ProjQuota service.
// All implementations must embed UnimplementedProjQuotaServer
// for forward compatibility
type ProjQuotaServer interface {
	CreateProjQuotaSubpath(context.Context, *CreateProjQuotaSubpathRequest) (*CreateProjQuotaSubpathReply, error)
	SetSubpathProjQuota(context.Context, *SetSubpathProjQuotaRequest) (*SetSubpathProjQuotaReply, error)
	RemoveProjQuotaSubpath(context.Context, *RemoveProjQuotaSubpathRequest) (*RemoveProjQuotaSubpathReply, error)
}

// UnimplementedProjQuotaServer must be embedded to have forward compatible implementations.
type UnimplementedProjQuotaServer struct {
}

func (UnimplementedProjQuotaServer) CreateProjQuotaSubpath(context.Context, *CreateProjQuotaSubpathRequest) (*CreateProjQuotaSubpathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjQuotaSubpath not implemented")
}
func (UnimplementedProjQuotaServer) SetSubpathProjQuota(context.Context, *SetSubpathProjQuotaRequest) (*SetSubpathProjQuotaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubpathProjQuota not implemented")
}
func (UnimplementedProjQuotaServer) RemoveProjQuotaSubpath(context.Context, *RemoveProjQuotaSubpathRequest) (*RemoveProjQuotaSubpathReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProjQuotaSubpath not implemented")
}

// UnsafeProjQuotaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjQuotaServer will
// result in compilation errors.
type UnsafeProjQuotaServer interface {
	mustEmbedUnimplementedProjQuotaServer()
}

func RegisterProjQuotaServer(s *grpc.Server, srv ProjQuotaServer) {
	s.RegisterService(&_ProjQuota_serviceDesc, srv)
}

func _ProjQuota_CreateProjQuotaSubpath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjQuotaSubpathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjQuotaServer).CreateProjQuotaSubpath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjQuota/CreateProjQuotaSubpath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjQuotaServer).CreateProjQuotaSubpath(ctx, req.(*CreateProjQuotaSubpathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjQuota_SetSubpathProjQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubpathProjQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjQuotaServer).SetSubpathProjQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjQuota/SetSubpathProjQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjQuotaServer).SetSubpathProjQuota(ctx, req.(*SetSubpathProjQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjQuota_RemoveProjQuotaSubpath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjQuotaSubpathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjQuotaServer).RemoveProjQuotaSubpath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProjQuota/RemoveProjQuotaSubpath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjQuotaServer).RemoveProjQuotaSubpath(ctx, req.(*RemoveProjQuotaSubpathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjQuota_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProjQuota",
	HandlerType: (*ProjQuotaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProjQuotaSubpath",
			Handler:    _ProjQuota_CreateProjQuotaSubpath_Handler,
		},
		{
			MethodName: "SetSubpathProjQuota",
			Handler:    _ProjQuota_SetSubpathProjQuota_Handler,
		},
		{
			MethodName: "RemoveProjQuotaSubpath",
			Handler:    _ProjQuota_RemoveProjQuotaSubpath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projquota.proto",
}
