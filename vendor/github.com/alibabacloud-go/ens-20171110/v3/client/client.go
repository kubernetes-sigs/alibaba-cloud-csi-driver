// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type BucketInfo struct {
	BucketAcl          *string `json:"BucketAcl,omitempty" xml:"BucketAcl,omitempty"`
	BucketName         *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Comment            *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime         *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataRedundancyType *string `json:"DataRedundancyType,omitempty" xml:"DataRedundancyType,omitempty"`
	DispatcherType     *string `json:"DispatcherType,omitempty" xml:"DispatcherType,omitempty"`
	Endpoint           *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	EnsRegionId        *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	ModifyTime         *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	ResourceType       *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	StorageClass       *string `json:"StorageClass,omitempty" xml:"StorageClass,omitempty"`
}

func (s BucketInfo) String() string {
	return tea.Prettify(s)
}

func (s BucketInfo) GoString() string {
	return s.String()
}

func (s *BucketInfo) SetBucketAcl(v string) *BucketInfo {
	s.BucketAcl = &v
	return s
}

func (s *BucketInfo) SetBucketName(v string) *BucketInfo {
	s.BucketName = &v
	return s
}

func (s *BucketInfo) SetComment(v string) *BucketInfo {
	s.Comment = &v
	return s
}

func (s *BucketInfo) SetCreateTime(v string) *BucketInfo {
	s.CreateTime = &v
	return s
}

func (s *BucketInfo) SetDataRedundancyType(v string) *BucketInfo {
	s.DataRedundancyType = &v
	return s
}

func (s *BucketInfo) SetDispatcherType(v string) *BucketInfo {
	s.DispatcherType = &v
	return s
}

func (s *BucketInfo) SetEndpoint(v string) *BucketInfo {
	s.Endpoint = &v
	return s
}

func (s *BucketInfo) SetEnsRegionId(v string) *BucketInfo {
	s.EnsRegionId = &v
	return s
}

func (s *BucketInfo) SetModifyTime(v string) *BucketInfo {
	s.ModifyTime = &v
	return s
}

func (s *BucketInfo) SetResourceType(v string) *BucketInfo {
	s.ResourceType = &v
	return s
}

func (s *BucketInfo) SetStorageClass(v string) *BucketInfo {
	s.StorageClass = &v
	return s
}

type DataDisk struct {
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DataDisk) String() string {
	return tea.Prettify(s)
}

func (s DataDisk) GoString() string {
	return s.String()
}

func (s *DataDisk) SetSize(v int64) *DataDisk {
	s.Size = &v
	return s
}

type HealthCheck struct {
	HealthCheck               *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckDomain         *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode       *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod         *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout        *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckType           *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	HealthCheckURI            *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s HealthCheck) String() string {
	return tea.Prettify(s)
}

func (s HealthCheck) GoString() string {
	return s.String()
}

func (s *HealthCheck) SetHealthCheck(v string) *HealthCheck {
	s.HealthCheck = &v
	return s
}

func (s *HealthCheck) SetHealthCheckConnectPort(v int32) *HealthCheck {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *HealthCheck) SetHealthCheckConnectTimeout(v int32) *HealthCheck {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *HealthCheck) SetHealthCheckDomain(v string) *HealthCheck {
	s.HealthCheckDomain = &v
	return s
}

func (s *HealthCheck) SetHealthCheckHttpCode(v string) *HealthCheck {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *HealthCheck) SetHealthCheckInterval(v int32) *HealthCheck {
	s.HealthCheckInterval = &v
	return s
}

func (s *HealthCheck) SetHealthCheckMethod(v string) *HealthCheck {
	s.HealthCheckMethod = &v
	return s
}

func (s *HealthCheck) SetHealthCheckTimeout(v int32) *HealthCheck {
	s.HealthCheckTimeout = &v
	return s
}

func (s *HealthCheck) SetHealthCheckType(v string) *HealthCheck {
	s.HealthCheckType = &v
	return s
}

func (s *HealthCheck) SetHealthCheckURI(v string) *HealthCheck {
	s.HealthCheckURI = &v
	return s
}

func (s *HealthCheck) SetHealthyThreshold(v int32) *HealthCheck {
	s.HealthyThreshold = &v
	return s
}

func (s *HealthCheck) SetUnhealthyThreshold(v int32) *HealthCheck {
	s.UnhealthyThreshold = &v
	return s
}

type HttpConfig struct {
	Cookie              *string `json:"Cookie,omitempty" xml:"Cookie,omitempty"`
	CookieTimeout       *int32  `json:"CookieTimeout,omitempty" xml:"CookieTimeout,omitempty"`
	IdleTimeout         *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	RequestTimeout      *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler           *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServerCertificateId *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	StickySession       *string `json:"StickySession,omitempty" xml:"StickySession,omitempty"`
	StickySessionType   *string `json:"StickySessionType,omitempty" xml:"StickySessionType,omitempty"`
	XForwardedFor       *string `json:"XForwardedFor,omitempty" xml:"XForwardedFor,omitempty"`
}

func (s HttpConfig) String() string {
	return tea.Prettify(s)
}

func (s HttpConfig) GoString() string {
	return s.String()
}

func (s *HttpConfig) SetCookie(v string) *HttpConfig {
	s.Cookie = &v
	return s
}

func (s *HttpConfig) SetCookieTimeout(v int32) *HttpConfig {
	s.CookieTimeout = &v
	return s
}

func (s *HttpConfig) SetIdleTimeout(v int32) *HttpConfig {
	s.IdleTimeout = &v
	return s
}

func (s *HttpConfig) SetRequestTimeout(v int32) *HttpConfig {
	s.RequestTimeout = &v
	return s
}

func (s *HttpConfig) SetScheduler(v string) *HttpConfig {
	s.Scheduler = &v
	return s
}

func (s *HttpConfig) SetServerCertificateId(v string) *HttpConfig {
	s.ServerCertificateId = &v
	return s
}

func (s *HttpConfig) SetStickySession(v string) *HttpConfig {
	s.StickySession = &v
	return s
}

func (s *HttpConfig) SetStickySessionType(v string) *HttpConfig {
	s.StickySessionType = &v
	return s
}

func (s *HttpConfig) SetXForwardedFor(v string) *HttpConfig {
	s.XForwardedFor = &v
	return s
}

type SecurityGroupRule struct {
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp      *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Direction       *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	SourceCidrIp    *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Priority        *int32  `json:"priority,omitempty" xml:"priority,omitempty"`
}

func (s SecurityGroupRule) String() string {
	return tea.Prettify(s)
}

func (s SecurityGroupRule) GoString() string {
	return s.String()
}

func (s *SecurityGroupRule) SetDescription(v string) *SecurityGroupRule {
	s.Description = &v
	return s
}

func (s *SecurityGroupRule) SetDestCidrIp(v string) *SecurityGroupRule {
	s.DestCidrIp = &v
	return s
}

func (s *SecurityGroupRule) SetDirection(v string) *SecurityGroupRule {
	s.Direction = &v
	return s
}

func (s *SecurityGroupRule) SetIpProtocol(v string) *SecurityGroupRule {
	s.IpProtocol = &v
	return s
}

func (s *SecurityGroupRule) SetPolicy(v string) *SecurityGroupRule {
	s.Policy = &v
	return s
}

func (s *SecurityGroupRule) SetPortRange(v string) *SecurityGroupRule {
	s.PortRange = &v
	return s
}

func (s *SecurityGroupRule) SetSourceCidrIp(v string) *SecurityGroupRule {
	s.SourceCidrIp = &v
	return s
}

func (s *SecurityGroupRule) SetSourcePortRange(v string) *SecurityGroupRule {
	s.SourcePortRange = &v
	return s
}

func (s *SecurityGroupRule) SetPriority(v int32) *SecurityGroupRule {
	s.Priority = &v
	return s
}

type TcpConfig struct {
	EstablishedTimeout *int32  `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	PersistenceTimeout *int32  `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	Scheduler          *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
}

func (s TcpConfig) String() string {
	return tea.Prettify(s)
}

func (s TcpConfig) GoString() string {
	return s.String()
}

func (s *TcpConfig) SetEstablishedTimeout(v int32) *TcpConfig {
	s.EstablishedTimeout = &v
	return s
}

func (s *TcpConfig) SetPersistenceTimeout(v int32) *TcpConfig {
	s.PersistenceTimeout = &v
	return s
}

func (s *TcpConfig) SetScheduler(v string) *TcpConfig {
	s.Scheduler = &v
	return s
}

type UdpCheck struct {
	HealthCheckConnectPort    *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckInterval       *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthyThreshold          *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	UnhealthyThreshold        *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s UdpCheck) String() string {
	return tea.Prettify(s)
}

func (s UdpCheck) GoString() string {
	return s.String()
}

func (s *UdpCheck) SetHealthCheckConnectPort(v int32) *UdpCheck {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *UdpCheck) SetHealthCheckConnectTimeout(v int32) *UdpCheck {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *UdpCheck) SetHealthCheckInterval(v int32) *UdpCheck {
	s.HealthCheckInterval = &v
	return s
}

func (s *UdpCheck) SetHealthyThreshold(v int32) *UdpCheck {
	s.HealthyThreshold = &v
	return s
}

func (s *UdpCheck) SetUnhealthyThreshold(v int32) *UdpCheck {
	s.UnhealthyThreshold = &v
	return s
}

type UdpConfig struct {
	HashKey   *string `json:"HashKey,omitempty" xml:"HashKey,omitempty"`
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
}

func (s UdpConfig) String() string {
	return tea.Prettify(s)
}

func (s UdpConfig) GoString() string {
	return s.String()
}

func (s *UdpConfig) SetHashKey(v string) *UdpConfig {
	s.HashKey = &v
	return s
}

func (s *UdpConfig) SetScheduler(v string) *UdpConfig {
	s.Scheduler = &v
	return s
}

type AccosicateNetworkAclRequest struct {
	NetworkAclId *string                                `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	Resource     []*AccosicateNetworkAclRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s AccosicateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclRequest) SetNetworkAclId(v string) *AccosicateNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

func (s *AccosicateNetworkAclRequest) SetResource(v []*AccosicateNetworkAclRequestResource) *AccosicateNetworkAclRequest {
	s.Resource = v
	return s
}

type AccosicateNetworkAclRequestResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s AccosicateNetworkAclRequestResource) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclRequestResource) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclRequestResource) SetResourceId(v string) *AccosicateNetworkAclRequestResource {
	s.ResourceId = &v
	return s
}

func (s *AccosicateNetworkAclRequestResource) SetResourceType(v string) *AccosicateNetworkAclRequestResource {
	s.ResourceType = &v
	return s
}

type AccosicateNetworkAclResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AccosicateNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclResponseBody) SetRequestId(v string) *AccosicateNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type AccosicateNetworkAclResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AccosicateNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AccosicateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclResponse) SetHeaders(v map[string]*string) *AccosicateNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *AccosicateNetworkAclResponse) SetStatusCode(v int32) *AccosicateNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *AccosicateNetworkAclResponse) SetBody(v *AccosicateNetworkAclResponseBody) *AccosicateNetworkAclResponse {
	s.Body = v
	return s
}

type AddBackendServersRequest struct {
	BackendServers []*AddBackendServersRequestBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	LoadBalancerId *string                                   `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s AddBackendServersRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersRequest) GoString() string {
	return s.String()
}

func (s *AddBackendServersRequest) SetBackendServers(v []*AddBackendServersRequestBackendServers) *AddBackendServersRequest {
	s.BackendServers = v
	return s
}

func (s *AddBackendServersRequest) SetLoadBalancerId(v string) *AddBackendServersRequest {
	s.LoadBalancerId = &v
	return s
}

type AddBackendServersRequestBackendServers struct {
	Ip       *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Port     *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Weight   *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s AddBackendServersRequestBackendServers) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersRequestBackendServers) GoString() string {
	return s.String()
}

func (s *AddBackendServersRequestBackendServers) SetIp(v string) *AddBackendServersRequestBackendServers {
	s.Ip = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetPort(v int32) *AddBackendServersRequestBackendServers {
	s.Port = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetServerId(v string) *AddBackendServersRequestBackendServers {
	s.ServerId = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetType(v string) *AddBackendServersRequestBackendServers {
	s.Type = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetWeight(v int32) *AddBackendServersRequestBackendServers {
	s.Weight = &v
	return s
}

type AddBackendServersShrinkRequest struct {
	BackendServersShrink *string `json:"BackendServers,omitempty" xml:"BackendServers,omitempty"`
	LoadBalancerId       *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s AddBackendServersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddBackendServersShrinkRequest) SetBackendServersShrink(v string) *AddBackendServersShrinkRequest {
	s.BackendServersShrink = &v
	return s
}

func (s *AddBackendServersShrinkRequest) SetLoadBalancerId(v string) *AddBackendServersShrinkRequest {
	s.LoadBalancerId = &v
	return s
}

type AddBackendServersResponseBody struct {
	BackendServers *AddBackendServersResponseBodyBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Struct"`
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddBackendServersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponseBody) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponseBody) SetBackendServers(v *AddBackendServersResponseBodyBackendServers) *AddBackendServersResponseBody {
	s.BackendServers = v
	return s
}

func (s *AddBackendServersResponseBody) SetRequestId(v string) *AddBackendServersResponseBody {
	s.RequestId = &v
	return s
}

type AddBackendServersResponseBodyBackendServers struct {
	BackendServer []*AddBackendServersResponseBodyBackendServersBackendServer `json:"BackendServer,omitempty" xml:"BackendServer,omitempty" type:"Repeated"`
}

func (s AddBackendServersResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponseBodyBackendServers) SetBackendServer(v []*AddBackendServersResponseBodyBackendServersBackendServer) *AddBackendServersResponseBodyBackendServers {
	s.BackendServer = v
	return s
}

type AddBackendServersResponseBodyBackendServersBackendServer struct {
	Ip       *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Port     *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Weight   *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s AddBackendServersResponseBodyBackendServersBackendServer) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponseBodyBackendServersBackendServer) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetIp(v string) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Ip = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetPort(v int32) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Port = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetServerId(v string) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.ServerId = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetType(v string) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Type = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetWeight(v int32) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Weight = &v
	return s
}

type AddBackendServersResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddBackendServersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddBackendServersResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponse) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponse) SetHeaders(v map[string]*string) *AddBackendServersResponse {
	s.Headers = v
	return s
}

func (s *AddBackendServersResponse) SetStatusCode(v int32) *AddBackendServersResponse {
	s.StatusCode = &v
	return s
}

func (s *AddBackendServersResponse) SetBody(v *AddBackendServersResponseBody) *AddBackendServersResponse {
	s.Body = v
	return s
}

type AddDeviceInternetPortRequest struct {
	ISP          *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InternalIp   *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	NatType      *string `json:"NatType,omitempty" xml:"NatType,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddDeviceInternetPortRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDeviceInternetPortRequest) GoString() string {
	return s.String()
}

func (s *AddDeviceInternetPortRequest) SetISP(v string) *AddDeviceInternetPortRequest {
	s.ISP = &v
	return s
}

func (s *AddDeviceInternetPortRequest) SetInstanceId(v string) *AddDeviceInternetPortRequest {
	s.InstanceId = &v
	return s
}

func (s *AddDeviceInternetPortRequest) SetInternalIp(v string) *AddDeviceInternetPortRequest {
	s.InternalIp = &v
	return s
}

func (s *AddDeviceInternetPortRequest) SetInternalPort(v string) *AddDeviceInternetPortRequest {
	s.InternalPort = &v
	return s
}

func (s *AddDeviceInternetPortRequest) SetNatType(v string) *AddDeviceInternetPortRequest {
	s.NatType = &v
	return s
}

func (s *AddDeviceInternetPortRequest) SetRegionId(v string) *AddDeviceInternetPortRequest {
	s.RegionId = &v
	return s
}

type AddDeviceInternetPortResponseBody struct {
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleIds   []*string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
}

func (s AddDeviceInternetPortResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDeviceInternetPortResponseBody) GoString() string {
	return s.String()
}

func (s *AddDeviceInternetPortResponseBody) SetRequestId(v string) *AddDeviceInternetPortResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddDeviceInternetPortResponseBody) SetRuleIds(v []*string) *AddDeviceInternetPortResponseBody {
	s.RuleIds = v
	return s
}

type AddDeviceInternetPortResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddDeviceInternetPortResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddDeviceInternetPortResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDeviceInternetPortResponse) GoString() string {
	return s.String()
}

func (s *AddDeviceInternetPortResponse) SetHeaders(v map[string]*string) *AddDeviceInternetPortResponse {
	s.Headers = v
	return s
}

func (s *AddDeviceInternetPortResponse) SetStatusCode(v int32) *AddDeviceInternetPortResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDeviceInternetPortResponse) SetBody(v *AddDeviceInternetPortResponseBody) *AddDeviceInternetPortResponse {
	s.Body = v
	return s
}

type AddNetworkInterfaceToInstanceRequest struct {
	AutoStart  *bool   `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Networks   *string `json:"Networks,omitempty" xml:"Networks,omitempty"`
}

func (s AddNetworkInterfaceToInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddNetworkInterfaceToInstanceRequest) GoString() string {
	return s.String()
}

func (s *AddNetworkInterfaceToInstanceRequest) SetAutoStart(v bool) *AddNetworkInterfaceToInstanceRequest {
	s.AutoStart = &v
	return s
}

func (s *AddNetworkInterfaceToInstanceRequest) SetInstanceId(v string) *AddNetworkInterfaceToInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *AddNetworkInterfaceToInstanceRequest) SetNetworks(v string) *AddNetworkInterfaceToInstanceRequest {
	s.Networks = &v
	return s
}

type AddNetworkInterfaceToInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddNetworkInterfaceToInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddNetworkInterfaceToInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *AddNetworkInterfaceToInstanceResponseBody) SetRequestId(v string) *AddNetworkInterfaceToInstanceResponseBody {
	s.RequestId = &v
	return s
}

type AddNetworkInterfaceToInstanceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddNetworkInterfaceToInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddNetworkInterfaceToInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddNetworkInterfaceToInstanceResponse) GoString() string {
	return s.String()
}

func (s *AddNetworkInterfaceToInstanceResponse) SetHeaders(v map[string]*string) *AddNetworkInterfaceToInstanceResponse {
	s.Headers = v
	return s
}

func (s *AddNetworkInterfaceToInstanceResponse) SetStatusCode(v int32) *AddNetworkInterfaceToInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddNetworkInterfaceToInstanceResponse) SetBody(v *AddNetworkInterfaceToInstanceResponseBody) *AddNetworkInterfaceToInstanceResponse {
	s.Body = v
	return s
}

type AssignPrivateIpAddressesRequest struct {
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	VSwitchId          *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s AssignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetVSwitchId(v string) *AssignPrivateIpAddressesRequest {
	s.VSwitchId = &v
	return s
}

type AssignPrivateIpAddressesResponseBody struct {
	AssignedPrivateIpAddressesSet *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet `json:"AssignedPrivateIpAddressesSet,omitempty" xml:"AssignedPrivateIpAddressesSet,omitempty" type:"Struct"`
	RequestId                     *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssignPrivateIpAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponseBody) SetAssignedPrivateIpAddressesSet(v *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) *AssignPrivateIpAddressesResponseBody {
	s.AssignedPrivateIpAddressesSet = v
	return s
}

func (s *AssignPrivateIpAddressesResponseBody) SetRequestId(v string) *AssignPrivateIpAddressesResponseBody {
	s.RequestId = &v
	return s
}

type AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet struct {
	NetworkInterfaceId *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	PrivateIpSet       []*string `json:"PrivateIpSet,omitempty" xml:"PrivateIpSet,omitempty" type:"Repeated"`
}

func (s AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) SetPrivateIpSet(v []*string) *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet {
	s.PrivateIpSet = v
	return s
}

type AssignPrivateIpAddressesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssignPrivateIpAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponse) SetHeaders(v map[string]*string) *AssignPrivateIpAddressesResponse {
	s.Headers = v
	return s
}

func (s *AssignPrivateIpAddressesResponse) SetStatusCode(v int32) *AssignPrivateIpAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *AssignPrivateIpAddressesResponse) SetBody(v *AssignPrivateIpAddressesResponseBody) *AssignPrivateIpAddressesResponse {
	s.Body = v
	return s
}

type AssociateEnsEipAddressRequest struct {
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s AssociateEnsEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateEnsEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AssociateEnsEipAddressRequest) SetAllocationId(v string) *AssociateEnsEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *AssociateEnsEipAddressRequest) SetInstanceId(v string) *AssociateEnsEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *AssociateEnsEipAddressRequest) SetInstanceType(v string) *AssociateEnsEipAddressRequest {
	s.InstanceType = &v
	return s
}

type AssociateEnsEipAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateEnsEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateEnsEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateEnsEipAddressResponseBody) SetRequestId(v string) *AssociateEnsEipAddressResponseBody {
	s.RequestId = &v
	return s
}

type AssociateEnsEipAddressResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AssociateEnsEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AssociateEnsEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateEnsEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AssociateEnsEipAddressResponse) SetHeaders(v map[string]*string) *AssociateEnsEipAddressResponse {
	s.Headers = v
	return s
}

func (s *AssociateEnsEipAddressResponse) SetStatusCode(v int32) *AssociateEnsEipAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateEnsEipAddressResponse) SetBody(v *AssociateEnsEipAddressResponseBody) *AssociateEnsEipAddressResponse {
	s.Body = v
	return s
}

type AttachDiskRequest struct {
	DeleteWithInstance *string `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	DiskId             *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AttachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskRequest) GoString() string {
	return s.String()
}

func (s *AttachDiskRequest) SetDeleteWithInstance(v string) *AttachDiskRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *AttachDiskRequest) SetDiskId(v string) *AttachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *AttachDiskRequest) SetInstanceId(v string) *AttachDiskRequest {
	s.InstanceId = &v
	return s
}

type AttachDiskResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskResponseBody) GoString() string {
	return s.String()
}

func (s *AttachDiskResponseBody) SetCode(v int32) *AttachDiskResponseBody {
	s.Code = &v
	return s
}

func (s *AttachDiskResponseBody) SetRequestId(v string) *AttachDiskResponseBody {
	s.RequestId = &v
	return s
}

type AttachDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AttachDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskResponse) GoString() string {
	return s.String()
}

func (s *AttachDiskResponse) SetHeaders(v map[string]*string) *AttachDiskResponse {
	s.Headers = v
	return s
}

func (s *AttachDiskResponse) SetStatusCode(v int32) *AttachDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachDiskResponse) SetBody(v *AttachDiskResponseBody) *AttachDiskResponse {
	s.Body = v
	return s
}

type AttachEnsInstancesRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Scripts    *string `json:"Scripts,omitempty" xml:"Scripts,omitempty"`
}

func (s AttachEnsInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachEnsInstancesRequest) GoString() string {
	return s.String()
}

func (s *AttachEnsInstancesRequest) SetInstanceId(v string) *AttachEnsInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachEnsInstancesRequest) SetScripts(v string) *AttachEnsInstancesRequest {
	s.Scripts = &v
	return s
}

type AttachEnsInstancesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachEnsInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachEnsInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *AttachEnsInstancesResponseBody) SetRequestId(v string) *AttachEnsInstancesResponseBody {
	s.RequestId = &v
	return s
}

type AttachEnsInstancesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AttachEnsInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AttachEnsInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachEnsInstancesResponse) GoString() string {
	return s.String()
}

func (s *AttachEnsInstancesResponse) SetHeaders(v map[string]*string) *AttachEnsInstancesResponse {
	s.Headers = v
	return s
}

func (s *AttachEnsInstancesResponse) SetStatusCode(v int32) *AttachEnsInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachEnsInstancesResponse) SetBody(v *AttachEnsInstancesResponseBody) *AttachEnsInstancesResponse {
	s.Body = v
	return s
}

type AuthorizeSecurityGroupRequest struct {
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority        *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SourceCidrIp    *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s AuthorizeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPolicy(v string) *AuthorizeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPortRange(v string) *AuthorizeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPriority(v int32) *AuthorizeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetVersion(v string) *AuthorizeSecurityGroupRequest {
	s.Version = &v
	return s
}

type AuthorizeSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponseBody) SetRequestId(v string) *AuthorizeSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AuthorizeSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponse) SetHeaders(v map[string]*string) *AuthorizeSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeSecurityGroupResponse) SetStatusCode(v int32) *AuthorizeSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AuthorizeSecurityGroupResponse) SetBody(v *AuthorizeSecurityGroupResponseBody) *AuthorizeSecurityGroupResponse {
	s.Body = v
	return s
}

type AuthorizeSecurityGroupEgressRequest struct {
	DestCidrIp      *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority        *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s AuthorizeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPolicy(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPriority(v int32) *AuthorizeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetVersion(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Version = &v
	return s
}

type AuthorizeSecurityGroupEgressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeSecurityGroupEgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressResponseBody) SetRequestId(v string) *AuthorizeSecurityGroupEgressResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupEgressResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AuthorizeSecurityGroupEgressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressResponse) SetHeaders(v map[string]*string) *AuthorizeSecurityGroupEgressResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeSecurityGroupEgressResponse) SetStatusCode(v int32) *AuthorizeSecurityGroupEgressResponse {
	s.StatusCode = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressResponse) SetBody(v *AuthorizeSecurityGroupEgressResponseBody) *AuthorizeSecurityGroupEgressResponse {
	s.Body = v
	return s
}

type CreateARMServerInstancesRequest struct {
	Amount       *int32  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	AutoRenew    *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	EnsRegionId  *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Frequency    *int32  `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	ImageId      *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	KeyPairName  *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	PayType      *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Period       *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit   *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Resolution   *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
	ServerType   *string `json:"ServerType,omitempty" xml:"ServerType,omitempty"`
}

func (s CreateARMServerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateARMServerInstancesRequest) GoString() string {
	return s.String()
}

func (s *CreateARMServerInstancesRequest) SetAmount(v int32) *CreateARMServerInstancesRequest {
	s.Amount = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetAutoRenew(v bool) *CreateARMServerInstancesRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetEnsRegionId(v string) *CreateARMServerInstancesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetFrequency(v int32) *CreateARMServerInstancesRequest {
	s.Frequency = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetImageId(v string) *CreateARMServerInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetInstanceType(v string) *CreateARMServerInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetKeyPairName(v string) *CreateARMServerInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetPayType(v string) *CreateARMServerInstancesRequest {
	s.PayType = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetPeriod(v int32) *CreateARMServerInstancesRequest {
	s.Period = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetPeriodUnit(v string) *CreateARMServerInstancesRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetResolution(v string) *CreateARMServerInstancesRequest {
	s.Resolution = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetServerType(v string) *CreateARMServerInstancesRequest {
	s.ServerType = &v
	return s
}

type CreateARMServerInstancesResponseBody struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	OrderId     *string   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId   *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateARMServerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateARMServerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateARMServerInstancesResponseBody) SetInstanceIds(v []*string) *CreateARMServerInstancesResponseBody {
	s.InstanceIds = v
	return s
}

func (s *CreateARMServerInstancesResponseBody) SetOrderId(v string) *CreateARMServerInstancesResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateARMServerInstancesResponseBody) SetRequestId(v string) *CreateARMServerInstancesResponseBody {
	s.RequestId = &v
	return s
}

type CreateARMServerInstancesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateARMServerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateARMServerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateARMServerInstancesResponse) GoString() string {
	return s.String()
}

func (s *CreateARMServerInstancesResponse) SetHeaders(v map[string]*string) *CreateARMServerInstancesResponse {
	s.Headers = v
	return s
}

func (s *CreateARMServerInstancesResponse) SetStatusCode(v int32) *CreateARMServerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateARMServerInstancesResponse) SetBody(v *CreateARMServerInstancesResponseBody) *CreateARMServerInstancesResponse {
	s.Body = v
	return s
}

type CreateApplicationRequest struct {
	Template *string `json:"Template,omitempty" xml:"Template,omitempty"`
	Timeout  *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s CreateApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationRequest) SetTemplate(v string) *CreateApplicationRequest {
	s.Template = &v
	return s
}

func (s *CreateApplicationRequest) SetTimeout(v int32) *CreateApplicationRequest {
	s.Timeout = &v
	return s
}

type CreateApplicationResponseBody struct {
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponseBody) SetAppId(v string) *CreateApplicationResponseBody {
	s.AppId = &v
	return s
}

func (s *CreateApplicationResponseBody) SetRequestId(v string) *CreateApplicationResponseBody {
	s.RequestId = &v
	return s
}

type CreateApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponse) SetHeaders(v map[string]*string) *CreateApplicationResponse {
	s.Headers = v
	return s
}

func (s *CreateApplicationResponse) SetStatusCode(v int32) *CreateApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApplicationResponse) SetBody(v *CreateApplicationResponseBody) *CreateApplicationResponse {
	s.Body = v
	return s
}

type CreateClassicNetworkRequest struct {
	CidrBlock   *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
}

func (s CreateClassicNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClassicNetworkRequest) GoString() string {
	return s.String()
}

func (s *CreateClassicNetworkRequest) SetCidrBlock(v string) *CreateClassicNetworkRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateClassicNetworkRequest) SetDescription(v string) *CreateClassicNetworkRequest {
	s.Description = &v
	return s
}

func (s *CreateClassicNetworkRequest) SetEnsRegionId(v string) *CreateClassicNetworkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateClassicNetworkRequest) SetNetworkName(v string) *CreateClassicNetworkRequest {
	s.NetworkName = &v
	return s
}

type CreateClassicNetworkResponseBody struct {
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClassicNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClassicNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClassicNetworkResponseBody) SetNetworkId(v string) *CreateClassicNetworkResponseBody {
	s.NetworkId = &v
	return s
}

func (s *CreateClassicNetworkResponseBody) SetRequestId(v string) *CreateClassicNetworkResponseBody {
	s.RequestId = &v
	return s
}

type CreateClassicNetworkResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateClassicNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateClassicNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClassicNetworkResponse) GoString() string {
	return s.String()
}

func (s *CreateClassicNetworkResponse) SetHeaders(v map[string]*string) *CreateClassicNetworkResponse {
	s.Headers = v
	return s
}

func (s *CreateClassicNetworkResponse) SetStatusCode(v int32) *CreateClassicNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateClassicNetworkResponse) SetBody(v *CreateClassicNetworkResponseBody) *CreateClassicNetworkResponse {
	s.Body = v
	return s
}

type CreateDiskRequest struct {
	Category           *string `json:"Category,omitempty" xml:"Category,omitempty"`
	EnsRegionId        *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Size               *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequest) GoString() string {
	return s.String()
}

func (s *CreateDiskRequest) SetCategory(v string) *CreateDiskRequest {
	s.Category = &v
	return s
}

func (s *CreateDiskRequest) SetEnsRegionId(v string) *CreateDiskRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateDiskRequest) SetInstanceChargeType(v string) *CreateDiskRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateDiskRequest) SetSize(v string) *CreateDiskRequest {
	s.Size = &v
	return s
}

type CreateDiskResponseBody struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	OrderId     *string   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId   *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiskResponseBody) SetInstanceIds(v []*string) *CreateDiskResponseBody {
	s.InstanceIds = v
	return s
}

func (s *CreateDiskResponseBody) SetOrderId(v string) *CreateDiskResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateDiskResponseBody) SetRequestId(v string) *CreateDiskResponseBody {
	s.RequestId = &v
	return s
}

type CreateDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskResponse) GoString() string {
	return s.String()
}

func (s *CreateDiskResponse) SetHeaders(v map[string]*string) *CreateDiskResponse {
	s.Headers = v
	return s
}

func (s *CreateDiskResponse) SetStatusCode(v int32) *CreateDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiskResponse) SetBody(v *CreateDiskResponseBody) *CreateDiskResponse {
	s.Body = v
	return s
}

type CreateEipInstanceRequest struct {
	Bandwidth          *int64  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	EnsRegionId        *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	Isp                *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateEipInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEipInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateEipInstanceRequest) SetBandwidth(v int64) *CreateEipInstanceRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateEipInstanceRequest) SetEnsRegionId(v string) *CreateEipInstanceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateEipInstanceRequest) SetInstanceChargeType(v string) *CreateEipInstanceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateEipInstanceRequest) SetInternetChargeType(v string) *CreateEipInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateEipInstanceRequest) SetIsp(v string) *CreateEipInstanceRequest {
	s.Isp = &v
	return s
}

func (s *CreateEipInstanceRequest) SetName(v string) *CreateEipInstanceRequest {
	s.Name = &v
	return s
}

type CreateEipInstanceResponseBody struct {
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEipInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEipInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEipInstanceResponseBody) SetAllocationId(v string) *CreateEipInstanceResponseBody {
	s.AllocationId = &v
	return s
}

func (s *CreateEipInstanceResponseBody) SetRequestId(v string) *CreateEipInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateEipInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateEipInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEipInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEipInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateEipInstanceResponse) SetHeaders(v map[string]*string) *CreateEipInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateEipInstanceResponse) SetStatusCode(v int32) *CreateEipInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEipInstanceResponse) SetBody(v *CreateEipInstanceResponseBody) *CreateEipInstanceResponse {
	s.Body = v
	return s
}

type CreateEnsRouteEntryRequest struct {
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestinationCidrBlock *string `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	NextHopId            *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopType          *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	RouteEntryName       *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	RouteTableId         *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
}

func (s CreateEnsRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateEnsRouteEntryRequest) SetDescription(v string) *CreateEnsRouteEntryRequest {
	s.Description = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetDestinationCidrBlock(v string) *CreateEnsRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetNextHopId(v string) *CreateEnsRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetNextHopType(v string) *CreateEnsRouteEntryRequest {
	s.NextHopType = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetRouteEntryName(v string) *CreateEnsRouteEntryRequest {
	s.RouteEntryName = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetRouteTableId(v string) *CreateEnsRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

type CreateEnsRouteEntryResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouteEntryId *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
}

func (s CreateEnsRouteEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsRouteEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnsRouteEntryResponseBody) SetRequestId(v string) *CreateEnsRouteEntryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEnsRouteEntryResponseBody) SetRouteEntryId(v string) *CreateEnsRouteEntryResponseBody {
	s.RouteEntryId = &v
	return s
}

type CreateEnsRouteEntryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateEnsRouteEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEnsRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateEnsRouteEntryResponse) SetHeaders(v map[string]*string) *CreateEnsRouteEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateEnsRouteEntryResponse) SetStatusCode(v int32) *CreateEnsRouteEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnsRouteEntryResponse) SetBody(v *CreateEnsRouteEntryResponseBody) *CreateEnsRouteEntryResponse {
	s.Body = v
	return s
}

type CreateEnsServiceRequest struct {
	EnsServiceId *string `json:"EnsServiceId,omitempty" xml:"EnsServiceId,omitempty"`
	OrderType    *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	Version      *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s CreateEnsServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateEnsServiceRequest) SetEnsServiceId(v string) *CreateEnsServiceRequest {
	s.EnsServiceId = &v
	return s
}

func (s *CreateEnsServiceRequest) SetOrderType(v string) *CreateEnsServiceRequest {
	s.OrderType = &v
	return s
}

func (s *CreateEnsServiceRequest) SetVersion(v string) *CreateEnsServiceRequest {
	s.Version = &v
	return s
}

type CreateEnsServiceResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnsServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnsServiceResponseBody) SetCode(v int32) *CreateEnsServiceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnsServiceResponseBody) SetRequestId(v string) *CreateEnsServiceResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnsServiceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateEnsServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEnsServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateEnsServiceResponse) SetHeaders(v map[string]*string) *CreateEnsServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateEnsServiceResponse) SetStatusCode(v int32) *CreateEnsServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnsServiceResponse) SetBody(v *CreateEnsServiceResponseBody) *CreateEnsServiceResponse {
	s.Body = v
	return s
}

type CreateEpnInstanceRequest struct {
	EPNInstanceName         *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	EPNInstanceType         *string `json:"EPNInstanceType,omitempty" xml:"EPNInstanceType,omitempty"`
	InternetChargeType      *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthOut *int32  `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	NetworkingModel         *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
}

func (s CreateEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateEpnInstanceRequest) SetEPNInstanceName(v string) *CreateEpnInstanceRequest {
	s.EPNInstanceName = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetEPNInstanceType(v string) *CreateEpnInstanceRequest {
	s.EPNInstanceType = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetInternetChargeType(v string) *CreateEpnInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetInternetMaxBandwidthOut(v int32) *CreateEpnInstanceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetNetworkingModel(v string) *CreateEpnInstanceRequest {
	s.NetworkingModel = &v
	return s
}

type CreateEpnInstanceResponseBody struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEpnInstanceResponseBody) SetEPNInstanceId(v string) *CreateEpnInstanceResponseBody {
	s.EPNInstanceId = &v
	return s
}

func (s *CreateEpnInstanceResponseBody) SetRequestId(v string) *CreateEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateEpnInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateEpnInstanceResponse) SetHeaders(v map[string]*string) *CreateEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateEpnInstanceResponse) SetStatusCode(v int32) *CreateEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEpnInstanceResponse) SetBody(v *CreateEpnInstanceResponseBody) *CreateEpnInstanceResponse {
	s.Body = v
	return s
}

type CreateFileSystemRequest struct {
	OrderDetails []*CreateFileSystemRequestOrderDetails `json:"OrderDetails,omitempty" xml:"OrderDetails,omitempty" type:"Repeated"`
}

func (s CreateFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemRequest) GoString() string {
	return s.String()
}

func (s *CreateFileSystemRequest) SetOrderDetails(v []*CreateFileSystemRequestOrderDetails) *CreateFileSystemRequest {
	s.OrderDetails = v
	return s
}

type CreateFileSystemRequestOrderDetails struct {
	ChargeType        *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	EnsRegionId       *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FileSystemName    *string `json:"FileSystemName,omitempty" xml:"FileSystemName,omitempty"`
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	NetworkId         *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	OrderType         *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	ProtocolType      *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	StorgeType        *string `json:"StorgeType,omitempty" xml:"StorgeType,omitempty"`
}

func (s CreateFileSystemRequestOrderDetails) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemRequestOrderDetails) GoString() string {
	return s.String()
}

func (s *CreateFileSystemRequestOrderDetails) SetChargeType(v string) *CreateFileSystemRequestOrderDetails {
	s.ChargeType = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetEnsRegionId(v string) *CreateFileSystemRequestOrderDetails {
	s.EnsRegionId = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetFileSystemName(v string) *CreateFileSystemRequestOrderDetails {
	s.FileSystemName = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetMountTargetDomain(v string) *CreateFileSystemRequestOrderDetails {
	s.MountTargetDomain = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetNetworkId(v string) *CreateFileSystemRequestOrderDetails {
	s.NetworkId = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetOrderType(v string) *CreateFileSystemRequestOrderDetails {
	s.OrderType = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetProtocolType(v string) *CreateFileSystemRequestOrderDetails {
	s.ProtocolType = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetStorgeType(v string) *CreateFileSystemRequestOrderDetails {
	s.StorgeType = &v
	return s
}

type CreateFileSystemShrinkRequest struct {
	OrderDetailsShrink *string `json:"OrderDetails,omitempty" xml:"OrderDetails,omitempty"`
}

func (s CreateFileSystemShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateFileSystemShrinkRequest) SetOrderDetailsShrink(v string) *CreateFileSystemShrinkRequest {
	s.OrderDetailsShrink = &v
	return s
}

type CreateFileSystemResponseBody struct {
	AllocationId   []*string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" type:"Repeated"`
	BizStatusCode  *string   `json:"BizStatusCode,omitempty" xml:"BizStatusCode,omitempty"`
	RequestId      *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UnAllocationId []*string `json:"UnAllocationId,omitempty" xml:"UnAllocationId,omitempty" type:"Repeated"`
}

func (s CreateFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileSystemResponseBody) SetAllocationId(v []*string) *CreateFileSystemResponseBody {
	s.AllocationId = v
	return s
}

func (s *CreateFileSystemResponseBody) SetBizStatusCode(v string) *CreateFileSystemResponseBody {
	s.BizStatusCode = &v
	return s
}

func (s *CreateFileSystemResponseBody) SetRequestId(v string) *CreateFileSystemResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFileSystemResponseBody) SetUnAllocationId(v []*string) *CreateFileSystemResponseBody {
	s.UnAllocationId = v
	return s
}

type CreateFileSystemResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemResponse) GoString() string {
	return s.String()
}

func (s *CreateFileSystemResponse) SetHeaders(v map[string]*string) *CreateFileSystemResponse {
	s.Headers = v
	return s
}

func (s *CreateFileSystemResponse) SetStatusCode(v int32) *CreateFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFileSystemResponse) SetBody(v *CreateFileSystemResponseBody) *CreateFileSystemResponse {
	s.Body = v
	return s
}

type CreateForwardEntryRequest struct {
	ExternalIp       *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort     *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	HealthCheckPort  *int32  `json:"HealthCheckPort,omitempty" xml:"HealthCheckPort,omitempty"`
	InternalIp       *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort     *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol       *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	NatGatewayId     *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
}

func (s CreateForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryRequest) SetExternalIp(v string) *CreateForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalPort(v string) *CreateForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetForwardEntryName(v string) *CreateForwardEntryRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *CreateForwardEntryRequest) SetHealthCheckPort(v int32) *CreateForwardEntryRequest {
	s.HealthCheckPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalIp(v string) *CreateForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalPort(v string) *CreateForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetIpProtocol(v string) *CreateForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

func (s *CreateForwardEntryRequest) SetNatGatewayId(v string) *CreateForwardEntryRequest {
	s.NatGatewayId = &v
	return s
}

type CreateForwardEntryResponseBody struct {
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponseBody) SetForwardEntryId(v string) *CreateForwardEntryResponseBody {
	s.ForwardEntryId = &v
	return s
}

func (s *CreateForwardEntryResponseBody) SetRequestId(v string) *CreateForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type CreateForwardEntryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponse) SetHeaders(v map[string]*string) *CreateForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateForwardEntryResponse) SetStatusCode(v int32) *CreateForwardEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateForwardEntryResponse) SetBody(v *CreateForwardEntryResponseBody) *CreateForwardEntryResponse {
	s.Body = v
	return s
}

type CreateImageRequest struct {
	DeleteAfterImageUpload *string `json:"DeleteAfterImageUpload,omitempty" xml:"DeleteAfterImageUpload,omitempty"`
	ImageName              *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	InstanceId             *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Product                *string `json:"product,omitempty" xml:"product,omitempty"`
}

func (s CreateImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequest) GoString() string {
	return s.String()
}

func (s *CreateImageRequest) SetDeleteAfterImageUpload(v string) *CreateImageRequest {
	s.DeleteAfterImageUpload = &v
	return s
}

func (s *CreateImageRequest) SetImageName(v string) *CreateImageRequest {
	s.ImageName = &v
	return s
}

func (s *CreateImageRequest) SetInstanceId(v string) *CreateImageRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateImageRequest) SetProduct(v string) *CreateImageRequest {
	s.Product = &v
	return s
}

type CreateImageResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateImageResponseBody) SetCode(v int32) *CreateImageResponseBody {
	s.Code = &v
	return s
}

func (s *CreateImageResponseBody) SetImageId(v string) *CreateImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *CreateImageResponseBody) SetRequestId(v string) *CreateImageResponseBody {
	s.RequestId = &v
	return s
}

type CreateImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponse) GoString() string {
	return s.String()
}

func (s *CreateImageResponse) SetHeaders(v map[string]*string) *CreateImageResponse {
	s.Headers = v
	return s
}

func (s *CreateImageResponse) SetStatusCode(v int32) *CreateImageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateImageResponse) SetBody(v *CreateImageResponseBody) *CreateImageResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	DataDisk               []*CreateInstanceRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	SystemDisk             *CreateInstanceRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	AutoRenew              *string                          `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod        *string                          `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	EnsRegionId            *string                          `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	HostName               *string                          `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ImageId                *string                          `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceName           *string                          `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceType           *string                          `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType     *string                          `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	IpType                 *string                          `json:"IpType,omitempty" xml:"IpType,omitempty"`
	KeyPairName            *string                          `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	OwnerId                *int64                           `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Password               *string                          `json:"Password,omitempty" xml:"Password,omitempty"`
	PasswordInherit        *bool                            `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	PaymentType            *string                          `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	Period                 *string                          `json:"Period,omitempty" xml:"Period,omitempty"`
	PrivateIpAddress       *string                          `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	PublicIpIdentification *bool                            `json:"PublicIpIdentification,omitempty" xml:"PublicIpIdentification,omitempty"`
	Quantity               *string                          `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	UniqueSuffix           *bool                            `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	UserData               *string                          `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VSwitchId              *string                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetDataDisk(v []*CreateInstanceRequestDataDisk) *CreateInstanceRequest {
	s.DataDisk = v
	return s
}

func (s *CreateInstanceRequest) SetSystemDisk(v *CreateInstanceRequestSystemDisk) *CreateInstanceRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenew(v string) *CreateInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenewPeriod(v string) *CreateInstanceRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateInstanceRequest) SetEnsRegionId(v string) *CreateInstanceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateInstanceRequest) SetHostName(v string) *CreateInstanceRequest {
	s.HostName = &v
	return s
}

func (s *CreateInstanceRequest) SetImageId(v string) *CreateInstanceRequest {
	s.ImageId = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceType(v string) *CreateInstanceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetChargeType(v string) *CreateInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetIpType(v string) *CreateInstanceRequest {
	s.IpType = &v
	return s
}

func (s *CreateInstanceRequest) SetKeyPairName(v string) *CreateInstanceRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateInstanceRequest) SetOwnerId(v int64) *CreateInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateInstanceRequest) SetPassword(v string) *CreateInstanceRequest {
	s.Password = &v
	return s
}

func (s *CreateInstanceRequest) SetPasswordInherit(v bool) *CreateInstanceRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateInstanceRequest) SetPaymentType(v string) *CreateInstanceRequest {
	s.PaymentType = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriod(v string) *CreateInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateInstanceRequest) SetPrivateIpAddress(v string) *CreateInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateInstanceRequest) SetPublicIpIdentification(v bool) *CreateInstanceRequest {
	s.PublicIpIdentification = &v
	return s
}

func (s *CreateInstanceRequest) SetQuantity(v string) *CreateInstanceRequest {
	s.Quantity = &v
	return s
}

func (s *CreateInstanceRequest) SetUniqueSuffix(v bool) *CreateInstanceRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *CreateInstanceRequest) SetUserData(v string) *CreateInstanceRequest {
	s.UserData = &v
	return s
}

func (s *CreateInstanceRequest) SetVSwitchId(v string) *CreateInstanceRequest {
	s.VSwitchId = &v
	return s
}

type CreateInstanceRequestDataDisk struct {
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateInstanceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestDataDisk) SetSize(v string) *CreateInstanceRequestDataDisk {
	s.Size = &v
	return s
}

type CreateInstanceRequestSystemDisk struct {
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateInstanceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestSystemDisk) SetSize(v string) *CreateInstanceRequestSystemDisk {
	s.Size = &v
	return s
}

type CreateInstanceResponseBody struct {
	Code        *int32                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceIds *CreateInstanceResponseBodyInstanceIds `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Struct"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetCode(v int32) *CreateInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstanceResponseBody) SetInstanceIds(v *CreateInstanceResponseBodyInstanceIds) *CreateInstanceResponseBody {
	s.InstanceIds = v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateInstanceResponseBodyInstanceIds struct {
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceIds) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceIds) SetInstanceId(v []*string) *CreateInstanceResponseBodyInstanceIds {
	s.InstanceId = v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateKeyPairRequest struct {
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s CreateKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairRequest) GoString() string {
	return s.String()
}

func (s *CreateKeyPairRequest) SetKeyPairName(v string) *CreateKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairRequest) SetVersion(v string) *CreateKeyPairRequest {
	s.Version = &v
	return s
}

type CreateKeyPairResponseBody struct {
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	KeyPairId          *string `json:"KeyPairId,omitempty" xml:"KeyPairId,omitempty"`
	KeyPairName        *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	PrivateKeyBody     *string `json:"PrivateKeyBody,omitempty" xml:"PrivateKeyBody,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponseBody) SetKeyPairFingerPrint(v string) *CreateKeyPairResponseBody {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetKeyPairId(v string) *CreateKeyPairResponseBody {
	s.KeyPairId = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetKeyPairName(v string) *CreateKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetPrivateKeyBody(v string) *CreateKeyPairResponseBody {
	s.PrivateKeyBody = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetRequestId(v string) *CreateKeyPairResponseBody {
	s.RequestId = &v
	return s
}

type CreateKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairResponse) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponse) SetHeaders(v map[string]*string) *CreateKeyPairResponse {
	s.Headers = v
	return s
}

func (s *CreateKeyPairResponse) SetStatusCode(v int32) *CreateKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateKeyPairResponse) SetBody(v *CreateKeyPairResponseBody) *CreateKeyPairResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerRequest struct {
	EnsRegionId      *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
	NetworkId        *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	PayType          *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	VSwitchId        *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateLoadBalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerRequest) SetEnsRegionId(v string) *CreateLoadBalancerRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetLoadBalancerName(v string) *CreateLoadBalancerRequest {
	s.LoadBalancerName = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetLoadBalancerSpec(v string) *CreateLoadBalancerRequest {
	s.LoadBalancerSpec = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetNetworkId(v string) *CreateLoadBalancerRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetPayType(v string) *CreateLoadBalancerRequest {
	s.PayType = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetVSwitchId(v string) *CreateLoadBalancerRequest {
	s.VSwitchId = &v
	return s
}

type CreateLoadBalancerResponseBody struct {
	LoadBalancerId   *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	NetworkId        *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VSwitchId        *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateLoadBalancerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerResponseBody) SetLoadBalancerId(v string) *CreateLoadBalancerResponseBody {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetLoadBalancerName(v string) *CreateLoadBalancerResponseBody {
	s.LoadBalancerName = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetNetworkId(v string) *CreateLoadBalancerResponseBody {
	s.NetworkId = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetRequestId(v string) *CreateLoadBalancerResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetVSwitchId(v string) *CreateLoadBalancerResponseBody {
	s.VSwitchId = &v
	return s
}

type CreateLoadBalancerResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLoadBalancerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLoadBalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerResponse) SetStatusCode(v int32) *CreateLoadBalancerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerResponse) SetBody(v *CreateLoadBalancerResponseBody) *CreateLoadBalancerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerHTTPListenerRequest struct {
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ForwardPort            *int32  `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	HealthCheck            *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckDomain      *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode    *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval    *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod      *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout     *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckURI         *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold       *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	IdleTimeout            *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	ListenerForward        *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	ListenerPort           *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId         *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	RequestTimeout         *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler              *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	UnhealthyThreshold     *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
	XForwardedFor          *string `json:"XForwardedFor,omitempty" xml:"XForwardedFor,omitempty"`
}

func (s CreateLoadBalancerHTTPListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetDescription(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetForwardPort(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.ForwardPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheck(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheck = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckDomain(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckHttpCode(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckMethod(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckTimeout(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckURI(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetIdleTimeout(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.IdleTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetListenerForward(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.ListenerForward = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetRequestTimeout(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.RequestTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetScheduler(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetXForwardedFor(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.XForwardedFor = &v
	return s
}

type CreateLoadBalancerHTTPListenerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerHTTPListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerHTTPListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerHTTPListenerResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLoadBalancerHTTPListenerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLoadBalancerHTTPListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerHTTPListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerHTTPListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerHTTPListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerResponse) SetBody(v *CreateLoadBalancerHTTPListenerResponseBody) *CreateLoadBalancerHTTPListenerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerHTTPSListenerRequest struct {
	Cookie                 *string `json:"Cookie,omitempty" xml:"Cookie,omitempty"`
	CookieTimeout          *int32  `json:"CookieTimeout,omitempty" xml:"CookieTimeout,omitempty"`
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ForwardPort            *int32  `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	HealthCheck            *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckDomain      *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode    *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval    *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod      *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout     *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckURI         *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold       *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	IdleTimeout            *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	ListenerForward        *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	ListenerPort           *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId         *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	RequestTimeout         *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler              *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServerCertificateId    *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	StickySessionType      *string `json:"StickySessionType,omitempty" xml:"StickySessionType,omitempty"`
	UnhealthyThreshold     *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s CreateLoadBalancerHTTPSListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPSListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetCookie(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.Cookie = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetCookieTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.CookieTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetDescription(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetForwardPort(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.ForwardPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheck(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheck = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckDomain(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckHttpCode(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckMethod(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckURI(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetIdleTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.IdleTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetListenerForward(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.ListenerForward = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetRequestTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.RequestTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetScheduler(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetServerCertificateId(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.ServerCertificateId = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetStickySessionType(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.StickySessionType = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

type CreateLoadBalancerHTTPSListenerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerHTTPSListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPSListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPSListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerHTTPSListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerHTTPSListenerResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLoadBalancerHTTPSListenerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLoadBalancerHTTPSListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPSListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPSListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerHTTPSListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerHTTPSListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerResponse) SetBody(v *CreateLoadBalancerHTTPSListenerResponseBody) *CreateLoadBalancerHTTPSListenerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerTCPListenerRequest struct {
	BackendServerPort         *int32  `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EipTransmit               *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	EstablishedTimeout        *int32  `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckDomain         *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode       *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckType           *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	HealthCheckURI            *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	ListenerPort              *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId            *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	PersistenceTimeout        *int32  `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	Scheduler                 *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s CreateLoadBalancerTCPListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerTCPListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerTCPListenerRequest) SetBackendServerPort(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.BackendServerPort = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetDescription(v string) *CreateLoadBalancerTCPListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetEipTransmit(v string) *CreateLoadBalancerTCPListenerRequest {
	s.EipTransmit = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetEstablishedTimeout(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckConnectTimeout(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckDomain(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckHttpCode(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckType(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckType = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckURI(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerTCPListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetPersistenceTimeout(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.PersistenceTimeout = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetScheduler(v string) *CreateLoadBalancerTCPListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

type CreateLoadBalancerTCPListenerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerTCPListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerTCPListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerTCPListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerTCPListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerTCPListenerResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLoadBalancerTCPListenerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLoadBalancerTCPListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerTCPListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerTCPListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerTCPListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerTCPListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerTCPListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerResponse) SetBody(v *CreateLoadBalancerTCPListenerResponseBody) *CreateLoadBalancerTCPListenerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerUDPListenerRequest struct {
	BackendServerPort         *int32  `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EipTransmit               *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckExp            *string `json:"HealthCheckExp,omitempty" xml:"HealthCheckExp,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckReq            *string `json:"HealthCheckReq,omitempty" xml:"HealthCheckReq,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	ListenerPort              *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId            *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	Scheduler                 *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s CreateLoadBalancerUDPListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerUDPListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerUDPListenerRequest) SetBackendServerPort(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.BackendServerPort = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetDescription(v string) *CreateLoadBalancerUDPListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetEipTransmit(v string) *CreateLoadBalancerUDPListenerRequest {
	s.EipTransmit = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckConnectTimeout(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckExp(v string) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckExp = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckReq(v string) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckReq = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerUDPListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetScheduler(v string) *CreateLoadBalancerUDPListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

type CreateLoadBalancerUDPListenerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerUDPListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerUDPListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerUDPListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerUDPListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerUDPListenerResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLoadBalancerUDPListenerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLoadBalancerUDPListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerUDPListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerUDPListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerUDPListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerUDPListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerUDPListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerResponse) SetBody(v *CreateLoadBalancerUDPListenerResponseBody) *CreateLoadBalancerUDPListenerResponse {
	s.Body = v
	return s
}

type CreateMountTargetRequest struct {
	EnsRegionId     *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FileSystemId    *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
	NetWorkId       *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
}

func (s CreateMountTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMountTargetRequest) GoString() string {
	return s.String()
}

func (s *CreateMountTargetRequest) SetEnsRegionId(v string) *CreateMountTargetRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateMountTargetRequest) SetFileSystemId(v string) *CreateMountTargetRequest {
	s.FileSystemId = &v
	return s
}

func (s *CreateMountTargetRequest) SetMountTargetName(v string) *CreateMountTargetRequest {
	s.MountTargetName = &v
	return s
}

func (s *CreateMountTargetRequest) SetNetWorkId(v string) *CreateMountTargetRequest {
	s.NetWorkId = &v
	return s
}

type CreateMountTargetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateMountTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMountTargetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMountTargetResponseBody) SetRequestId(v string) *CreateMountTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMountTargetResponseBody) SetStatus(v string) *CreateMountTargetResponseBody {
	s.Status = &v
	return s
}

type CreateMountTargetResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMountTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMountTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMountTargetResponse) GoString() string {
	return s.String()
}

func (s *CreateMountTargetResponse) SetHeaders(v map[string]*string) *CreateMountTargetResponse {
	s.Headers = v
	return s
}

func (s *CreateMountTargetResponse) SetStatusCode(v int32) *CreateMountTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMountTargetResponse) SetBody(v *CreateMountTargetResponseBody) *CreateMountTargetResponse {
	s.Body = v
	return s
}

type CreateNatGatewayRequest struct {
	EnsRegionId  *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId    *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	VSwitchId    *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequest) SetEnsRegionId(v string) *CreateNatGatewayRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetInstanceType(v string) *CreateNatGatewayRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateNatGatewayRequest) SetName(v string) *CreateNatGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateNatGatewayRequest) SetNetworkId(v string) *CreateNatGatewayRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetVSwitchId(v string) *CreateNatGatewayRequest {
	s.VSwitchId = &v
	return s
}

type CreateNatGatewayResponseBody struct {
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNatGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseBody) SetNatGatewayId(v string) *CreateNatGatewayResponseBody {
	s.NatGatewayId = &v
	return s
}

func (s *CreateNatGatewayResponseBody) SetRequestId(v string) *CreateNatGatewayResponseBody {
	s.RequestId = &v
	return s
}

type CreateNatGatewayResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateNatGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponse) SetHeaders(v map[string]*string) *CreateNatGatewayResponse {
	s.Headers = v
	return s
}

func (s *CreateNatGatewayResponse) SetStatusCode(v int32) *CreateNatGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNatGatewayResponse) SetBody(v *CreateNatGatewayResponseBody) *CreateNatGatewayResponse {
	s.Body = v
	return s
}

type CreateNetworkRequest struct {
	CidrBlock   *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
}

func (s CreateNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkRequest) SetCidrBlock(v string) *CreateNetworkRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateNetworkRequest) SetDescription(v string) *CreateNetworkRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkRequest) SetEnsRegionId(v string) *CreateNetworkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateNetworkRequest) SetNetworkName(v string) *CreateNetworkRequest {
	s.NetworkName = &v
	return s
}

type CreateNetworkResponseBody struct {
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkResponseBody) SetNetworkId(v string) *CreateNetworkResponseBody {
	s.NetworkId = &v
	return s
}

func (s *CreateNetworkResponseBody) SetRequestId(v string) *CreateNetworkResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkResponse) SetHeaders(v map[string]*string) *CreateNetworkResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkResponse) SetStatusCode(v int32) *CreateNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkResponse) SetBody(v *CreateNetworkResponseBody) *CreateNetworkResponse {
	s.Body = v
	return s
}

type CreateNetworkAclRequest struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
}

func (s CreateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclRequest) SetDescription(v string) *CreateNetworkAclRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkAclRequest) SetNetworkAclName(v string) *CreateNetworkAclRequest {
	s.NetworkAclName = &v
	return s
}

type CreateNetworkAclResponseBody struct {
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseBody) SetNetworkAclId(v string) *CreateNetworkAclResponseBody {
	s.NetworkAclId = &v
	return s
}

func (s *CreateNetworkAclResponseBody) SetRequestId(v string) *CreateNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkAclResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponse) SetHeaders(v map[string]*string) *CreateNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkAclResponse) SetStatusCode(v int32) *CreateNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkAclResponse) SetBody(v *CreateNetworkAclResponseBody) *CreateNetworkAclResponse {
	s.Body = v
	return s
}

type CreateNetworkAclEntryRequest struct {
	CidrBlock           *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Direction           *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty"`
	NetworkAclId        *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange           *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority            *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s CreateNetworkAclEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclEntryRequest) SetCidrBlock(v string) *CreateNetworkAclEntryRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetDescription(v string) *CreateNetworkAclEntryRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetDirection(v string) *CreateNetworkAclEntryRequest {
	s.Direction = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetNetworkAclEntryName(v string) *CreateNetworkAclEntryRequest {
	s.NetworkAclEntryName = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetNetworkAclId(v string) *CreateNetworkAclEntryRequest {
	s.NetworkAclId = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetPolicy(v string) *CreateNetworkAclEntryRequest {
	s.Policy = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetPortRange(v string) *CreateNetworkAclEntryRequest {
	s.PortRange = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetPriority(v int32) *CreateNetworkAclEntryRequest {
	s.Priority = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetProtocol(v string) *CreateNetworkAclEntryRequest {
	s.Protocol = &v
	return s
}

type CreateNetworkAclEntryResponseBody struct {
	NetworkAclEntryId *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkAclEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclEntryResponseBody) SetNetworkAclEntryId(v string) *CreateNetworkAclEntryResponseBody {
	s.NetworkAclEntryId = &v
	return s
}

func (s *CreateNetworkAclEntryResponseBody) SetRequestId(v string) *CreateNetworkAclEntryResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkAclEntryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateNetworkAclEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNetworkAclEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclEntryResponse) SetHeaders(v map[string]*string) *CreateNetworkAclEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkAclEntryResponse) SetStatusCode(v int32) *CreateNetworkAclEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkAclEntryResponse) SetBody(v *CreateNetworkAclEntryResponseBody) *CreateNetworkAclEntryResponse {
	s.Body = v
	return s
}

type CreateSecurityGroupRequest struct {
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	Version           *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s CreateSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupRequest) SetDescription(v string) *CreateSecurityGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetSecurityGroupName(v string) *CreateSecurityGroupRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetVersion(v string) *CreateSecurityGroupRequest {
	s.Version = &v
	return s
}

type CreateSecurityGroupResponseBody struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s CreateSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupResponseBody) SetRequestId(v string) *CreateSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSecurityGroupResponseBody) SetSecurityGroupId(v string) *CreateSecurityGroupResponseBody {
	s.SecurityGroupId = &v
	return s
}

type CreateSecurityGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupResponse) SetHeaders(v map[string]*string) *CreateSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateSecurityGroupResponse) SetStatusCode(v int32) *CreateSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSecurityGroupResponse) SetBody(v *CreateSecurityGroupResponseBody) *CreateSecurityGroupResponse {
	s.Body = v
	return s
}

type CreateSnatEntryRequest struct {
	NatGatewayId    *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	SnatEntryName   *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	SnatIp          *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	SourceCIDR      *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
	SourceNetworkId *string `json:"SourceNetworkId,omitempty" xml:"SourceNetworkId,omitempty"`
	SourceVSwitchId *string `json:"SourceVSwitchId,omitempty" xml:"SourceVSwitchId,omitempty"`
}

func (s CreateSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryRequest) SetNatGatewayId(v string) *CreateSnatEntryRequest {
	s.NatGatewayId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSnatEntryName(v string) *CreateSnatEntryRequest {
	s.SnatEntryName = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSnatIp(v string) *CreateSnatEntryRequest {
	s.SnatIp = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceCIDR(v string) *CreateSnatEntryRequest {
	s.SourceCIDR = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceNetworkId(v string) *CreateSnatEntryRequest {
	s.SourceNetworkId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceVSwitchId(v string) *CreateSnatEntryRequest {
	s.SourceVSwitchId = &v
	return s
}

type CreateSnatEntryResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
}

func (s CreateSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryResponseBody) SetRequestId(v string) *CreateSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSnatEntryResponseBody) SetSnatEntryId(v string) *CreateSnatEntryResponseBody {
	s.SnatEntryId = &v
	return s
}

type CreateSnatEntryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryResponse) SetHeaders(v map[string]*string) *CreateSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateSnatEntryResponse) SetStatusCode(v int32) *CreateSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSnatEntryResponse) SetBody(v *CreateSnatEntryResponseBody) *CreateSnatEntryResponse {
	s.Body = v
	return s
}

type CreateVSwitchRequest struct {
	CidrBlock   *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s CreateVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchRequest) GoString() string {
	return s.String()
}

func (s *CreateVSwitchRequest) SetCidrBlock(v string) *CreateVSwitchRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVSwitchRequest) SetDescription(v string) *CreateVSwitchRequest {
	s.Description = &v
	return s
}

func (s *CreateVSwitchRequest) SetEnsRegionId(v string) *CreateVSwitchRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateVSwitchRequest) SetNetworkId(v string) *CreateVSwitchRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateVSwitchRequest) SetVSwitchName(v string) *CreateVSwitchRequest {
	s.VSwitchName = &v
	return s
}

type CreateVSwitchResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateVSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponseBody) SetRequestId(v string) *CreateVSwitchResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVSwitchResponseBody) SetVSwitchId(v string) *CreateVSwitchResponseBody {
	s.VSwitchId = &v
	return s
}

type CreateVSwitchResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateVSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponse) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponse) SetHeaders(v map[string]*string) *CreateVSwitchResponse {
	s.Headers = v
	return s
}

func (s *CreateVSwitchResponse) SetStatusCode(v int32) *CreateVSwitchResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVSwitchResponse) SetBody(v *CreateVSwitchResponseBody) *CreateVSwitchResponse {
	s.Body = v
	return s
}

type DeleteApplicationRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Timeout *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s DeleteApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationRequest) SetAppId(v string) *DeleteApplicationRequest {
	s.AppId = &v
	return s
}

func (s *DeleteApplicationRequest) SetTimeout(v int32) *DeleteApplicationRequest {
	s.Timeout = &v
	return s
}

type DeleteApplicationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponseBody) SetRequestId(v string) *DeleteApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponse) SetHeaders(v map[string]*string) *DeleteApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationResponse) SetStatusCode(v int32) *DeleteApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApplicationResponse) SetBody(v *DeleteApplicationResponseBody) *DeleteApplicationResponse {
	s.Body = v
	return s
}

type DeleteDeviceInternetPortRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NatType    *string `json:"NatType,omitempty" xml:"NatType,omitempty"`
	RuleId     *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteDeviceInternetPortRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceInternetPortRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeviceInternetPortRequest) SetInstanceId(v string) *DeleteDeviceInternetPortRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteDeviceInternetPortRequest) SetNatType(v string) *DeleteDeviceInternetPortRequest {
	s.NatType = &v
	return s
}

func (s *DeleteDeviceInternetPortRequest) SetRuleId(v string) *DeleteDeviceInternetPortRequest {
	s.RuleId = &v
	return s
}

type DeleteDeviceInternetPortResponseBody struct {
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RuleIds   []*string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Repeated"`
}

func (s DeleteDeviceInternetPortResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceInternetPortResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeviceInternetPortResponseBody) SetRequestId(v string) *DeleteDeviceInternetPortResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDeviceInternetPortResponseBody) SetRuleIds(v []*string) *DeleteDeviceInternetPortResponseBody {
	s.RuleIds = v
	return s
}

type DeleteDeviceInternetPortResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDeviceInternetPortResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeviceInternetPortResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeviceInternetPortResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeviceInternetPortResponse) SetHeaders(v map[string]*string) *DeleteDeviceInternetPortResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeviceInternetPortResponse) SetStatusCode(v int32) *DeleteDeviceInternetPortResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDeviceInternetPortResponse) SetBody(v *DeleteDeviceInternetPortResponseBody) *DeleteDeviceInternetPortResponse {
	s.Body = v
	return s
}

type DeleteEnsRouteEntryRequest struct {
	RouteEntryId *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
}

func (s DeleteEnsRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnsRouteEntryRequest) SetRouteEntryId(v string) *DeleteEnsRouteEntryRequest {
	s.RouteEntryId = &v
	return s
}

type DeleteEnsRouteEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnsRouteEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsRouteEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnsRouteEntryResponseBody) SetRequestId(v string) *DeleteEnsRouteEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnsRouteEntryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteEnsRouteEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEnsRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnsRouteEntryResponse) SetHeaders(v map[string]*string) *DeleteEnsRouteEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnsRouteEntryResponse) SetStatusCode(v int32) *DeleteEnsRouteEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnsRouteEntryResponse) SetBody(v *DeleteEnsRouteEntryResponseBody) *DeleteEnsRouteEntryResponse {
	s.Body = v
	return s
}

type DeleteEpnInstanceRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s DeleteEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteEpnInstanceRequest) SetEPNInstanceId(v string) *DeleteEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

type DeleteEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEpnInstanceResponseBody) SetRequestId(v string) *DeleteEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEpnInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteEpnInstanceResponse) SetHeaders(v map[string]*string) *DeleteEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteEpnInstanceResponse) SetStatusCode(v int32) *DeleteEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEpnInstanceResponse) SetBody(v *DeleteEpnInstanceResponseBody) *DeleteEpnInstanceResponse {
	s.Body = v
	return s
}

type DeleteFileSystemRequest struct {
	EnsRegionId  *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
}

func (s DeleteFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileSystemRequest) GoString() string {
	return s.String()
}

func (s *DeleteFileSystemRequest) SetEnsRegionId(v string) *DeleteFileSystemRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DeleteFileSystemRequest) SetFileSystemId(v string) *DeleteFileSystemRequest {
	s.FileSystemId = &v
	return s
}

type DeleteFileSystemResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFileSystemResponseBody) SetRequestId(v string) *DeleteFileSystemResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFileSystemResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileSystemResponse) GoString() string {
	return s.String()
}

func (s *DeleteFileSystemResponse) SetHeaders(v map[string]*string) *DeleteFileSystemResponse {
	s.Headers = v
	return s
}

func (s *DeleteFileSystemResponse) SetStatusCode(v int32) *DeleteFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFileSystemResponse) SetBody(v *DeleteFileSystemResponseBody) *DeleteFileSystemResponse {
	s.Body = v
	return s
}

type DeleteForwardEntryRequest struct {
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
}

func (s DeleteForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryRequest) SetForwardEntryId(v string) *DeleteForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

type DeleteForwardEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponseBody) SetRequestId(v string) *DeleteForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteForwardEntryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponse) SetHeaders(v map[string]*string) *DeleteForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteForwardEntryResponse) SetStatusCode(v int32) *DeleteForwardEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteForwardEntryResponse) SetBody(v *DeleteForwardEntryResponseBody) *DeleteForwardEntryResponse {
	s.Body = v
	return s
}

type DeleteImageRequest struct {
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s DeleteImageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageRequest) GoString() string {
	return s.String()
}

func (s *DeleteImageRequest) SetImageId(v string) *DeleteImageRequest {
	s.ImageId = &v
	return s
}

type DeleteImageResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteImageResponseBody) SetCode(v int32) *DeleteImageResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteImageResponseBody) SetRequestId(v string) *DeleteImageResponseBody {
	s.RequestId = &v
	return s
}

type DeleteImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageResponse) GoString() string {
	return s.String()
}

func (s *DeleteImageResponse) SetHeaders(v map[string]*string) *DeleteImageResponse {
	s.Headers = v
	return s
}

func (s *DeleteImageResponse) SetStatusCode(v int32) *DeleteImageResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteImageResponse) SetBody(v *DeleteImageResponseBody) *DeleteImageResponse {
	s.Body = v
	return s
}

type DeleteKeyPairsRequest struct {
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DeleteKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsRequest) SetKeyPairName(v string) *DeleteKeyPairsRequest {
	s.KeyPairName = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetVersion(v string) *DeleteKeyPairsRequest {
	s.Version = &v
	return s
}

type DeleteKeyPairsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteKeyPairsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponseBody) SetRequestId(v string) *DeleteKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteKeyPairsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponse) SetHeaders(v map[string]*string) *DeleteKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *DeleteKeyPairsResponse) SetStatusCode(v int32) *DeleteKeyPairsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteKeyPairsResponse) SetBody(v *DeleteKeyPairsResponseBody) *DeleteKeyPairsResponse {
	s.Body = v
	return s
}

type DeleteLoadBalancerListenerRequest struct {
	ListenerPort     *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	LoadBalancerId   *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DeleteLoadBalancerListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadBalancerListenerRequest) GoString() string {
	return s.String()
}

func (s *DeleteLoadBalancerListenerRequest) SetListenerPort(v int32) *DeleteLoadBalancerListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *DeleteLoadBalancerListenerRequest) SetListenerProtocol(v string) *DeleteLoadBalancerListenerRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *DeleteLoadBalancerListenerRequest) SetLoadBalancerId(v string) *DeleteLoadBalancerListenerRequest {
	s.LoadBalancerId = &v
	return s
}

type DeleteLoadBalancerListenerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLoadBalancerListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadBalancerListenerResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLoadBalancerListenerResponseBody) SetRequestId(v string) *DeleteLoadBalancerListenerResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLoadBalancerListenerResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLoadBalancerListenerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLoadBalancerListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadBalancerListenerResponse) GoString() string {
	return s.String()
}

func (s *DeleteLoadBalancerListenerResponse) SetHeaders(v map[string]*string) *DeleteLoadBalancerListenerResponse {
	s.Headers = v
	return s
}

func (s *DeleteLoadBalancerListenerResponse) SetStatusCode(v int32) *DeleteLoadBalancerListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLoadBalancerListenerResponse) SetBody(v *DeleteLoadBalancerListenerResponseBody) *DeleteLoadBalancerListenerResponse {
	s.Body = v
	return s
}

type DeleteMountTargetRequest struct {
	EnsRegionId     *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FileSystemId    *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
}

func (s DeleteMountTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMountTargetRequest) GoString() string {
	return s.String()
}

func (s *DeleteMountTargetRequest) SetEnsRegionId(v string) *DeleteMountTargetRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DeleteMountTargetRequest) SetFileSystemId(v string) *DeleteMountTargetRequest {
	s.FileSystemId = &v
	return s
}

func (s *DeleteMountTargetRequest) SetMountTargetName(v string) *DeleteMountTargetRequest {
	s.MountTargetName = &v
	return s
}

type DeleteMountTargetResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMountTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMountTargetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMountTargetResponseBody) SetRequestId(v string) *DeleteMountTargetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMountTargetResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMountTargetResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMountTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMountTargetResponse) GoString() string {
	return s.String()
}

func (s *DeleteMountTargetResponse) SetHeaders(v map[string]*string) *DeleteMountTargetResponse {
	s.Headers = v
	return s
}

func (s *DeleteMountTargetResponse) SetStatusCode(v int32) *DeleteMountTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMountTargetResponse) SetBody(v *DeleteMountTargetResponseBody) *DeleteMountTargetResponse {
	s.Body = v
	return s
}

type DeleteNatGatewayRequest struct {
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
}

func (s DeleteNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayRequest) SetNatGatewayId(v string) *DeleteNatGatewayRequest {
	s.NatGatewayId = &v
	return s
}

type DeleteNatGatewayResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNatGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponseBody) SetRequestId(v string) *DeleteNatGatewayResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNatGatewayResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteNatGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponse) SetHeaders(v map[string]*string) *DeleteNatGatewayResponse {
	s.Headers = v
	return s
}

func (s *DeleteNatGatewayResponse) SetStatusCode(v int32) *DeleteNatGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNatGatewayResponse) SetBody(v *DeleteNatGatewayResponseBody) *DeleteNatGatewayResponse {
	s.Body = v
	return s
}

type DeleteNetworkRequest struct {
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
}

func (s DeleteNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkRequest) SetNetworkId(v string) *DeleteNetworkRequest {
	s.NetworkId = &v
	return s
}

type DeleteNetworkResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkResponseBody) SetRequestId(v string) *DeleteNetworkResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkResponse) SetHeaders(v map[string]*string) *DeleteNetworkResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkResponse) SetStatusCode(v int32) *DeleteNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkResponse) SetBody(v *DeleteNetworkResponseBody) *DeleteNetworkResponse {
	s.Body = v
	return s
}

type DeleteNetworkAclRequest struct {
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
}

func (s DeleteNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclRequest) SetNetworkAclId(v string) *DeleteNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

type DeleteNetworkAclResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclResponseBody) SetRequestId(v string) *DeleteNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkAclResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclResponse) SetHeaders(v map[string]*string) *DeleteNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkAclResponse) SetStatusCode(v int32) *DeleteNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkAclResponse) SetBody(v *DeleteNetworkAclResponseBody) *DeleteNetworkAclResponse {
	s.Body = v
	return s
}

type DeleteNetworkAclEntryRequest struct {
	NetworkAclEntryId *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
}

func (s DeleteNetworkAclEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclEntryRequest) SetNetworkAclEntryId(v string) *DeleteNetworkAclEntryRequest {
	s.NetworkAclEntryId = &v
	return s
}

type DeleteNetworkAclEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkAclEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclEntryResponseBody) SetRequestId(v string) *DeleteNetworkAclEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkAclEntryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteNetworkAclEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNetworkAclEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclEntryResponse) SetHeaders(v map[string]*string) *DeleteNetworkAclEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkAclEntryResponse) SetStatusCode(v int32) *DeleteNetworkAclEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkAclEntryResponse) SetBody(v *DeleteNetworkAclEntryResponseBody) *DeleteNetworkAclEntryResponse {
	s.Body = v
	return s
}

type DeleteSecurityGroupRequest struct {
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DeleteSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupRequest) SetSecurityGroupId(v string) *DeleteSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DeleteSecurityGroupRequest) SetVersion(v string) *DeleteSecurityGroupRequest {
	s.Version = &v
	return s
}

type DeleteSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupResponseBody) SetRequestId(v string) *DeleteSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSecurityGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupResponse) SetHeaders(v map[string]*string) *DeleteSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecurityGroupResponse) SetStatusCode(v int32) *DeleteSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSecurityGroupResponse) SetBody(v *DeleteSecurityGroupResponseBody) *DeleteSecurityGroupResponse {
	s.Body = v
	return s
}

type DeleteSnatEntryRequest struct {
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
}

func (s DeleteSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryRequest) SetSnatEntryId(v string) *DeleteSnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

type DeleteSnatEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryResponseBody) SetRequestId(v string) *DeleteSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnatEntryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryResponse) SetHeaders(v map[string]*string) *DeleteSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnatEntryResponse) SetStatusCode(v int32) *DeleteSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnatEntryResponse) SetBody(v *DeleteSnatEntryResponseBody) *DeleteSnatEntryResponse {
	s.Body = v
	return s
}

type DeleteVSwitchRequest struct {
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Version   *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DeleteVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchRequest) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchRequest) SetVSwitchId(v string) *DeleteVSwitchRequest {
	s.VSwitchId = &v
	return s
}

func (s *DeleteVSwitchRequest) SetVersion(v string) *DeleteVSwitchRequest {
	s.Version = &v
	return s
}

type DeleteVSwitchResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponseBody) SetRequestId(v string) *DeleteVSwitchResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVSwitchResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteVSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponse) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponse) SetHeaders(v map[string]*string) *DeleteVSwitchResponse {
	s.Headers = v
	return s
}

func (s *DeleteVSwitchResponse) SetStatusCode(v int32) *DeleteVSwitchResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVSwitchResponse) SetBody(v *DeleteVSwitchResponseBody) *DeleteVSwitchResponse {
	s.Body = v
	return s
}

type DescribeARMServerInstancesRequest struct {
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	PageNumber   *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ServerIds    []*string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty" type:"Repeated"`
}

func (s DescribeARMServerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesRequest) SetEnsRegionIds(v []*string) *DescribeARMServerInstancesRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetPageNumber(v int32) *DescribeARMServerInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetPageSize(v int32) *DescribeARMServerInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetServerIds(v []*string) *DescribeARMServerInstancesRequest {
	s.ServerIds = v
	return s
}

type DescribeARMServerInstancesShrinkRequest struct {
	EnsRegionIdsShrink *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	PageNumber         *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ServerIdsShrink    *string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty"`
}

func (s DescribeARMServerInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesShrinkRequest) SetEnsRegionIdsShrink(v string) *DescribeARMServerInstancesShrinkRequest {
	s.EnsRegionIdsShrink = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetPageNumber(v int32) *DescribeARMServerInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetPageSize(v int32) *DescribeARMServerInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetServerIdsShrink(v string) *DescribeARMServerInstancesShrinkRequest {
	s.ServerIdsShrink = &v
	return s
}

type DescribeARMServerInstancesResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Servers   []*DescribeARMServerInstancesResponseBodyServers `json:"Servers,omitempty" xml:"Servers,omitempty" type:"Repeated"`
}

func (s DescribeARMServerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBody) SetRequestId(v string) *DescribeARMServerInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBody) SetServers(v []*DescribeARMServerInstancesResponseBodyServers) *DescribeARMServerInstancesResponseBody {
	s.Servers = v
	return s
}

type DescribeARMServerInstancesResponseBodyServers struct {
	AICInstances []*DescribeARMServerInstancesResponseBodyServersAICInstances `json:"AICInstances,omitempty" xml:"AICInstances,omitempty" type:"Repeated"`
	CreationTime *string                                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	EnsRegionId  *string                                                      `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	ExpiredTime  *string                                                      `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ServerId     *string                                                      `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	SpecName     *string                                                      `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	State        *string                                                      `json:"State,omitempty" xml:"State,omitempty"`
	Status       *string                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeARMServerInstancesResponseBodyServers) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBodyServers) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetAICInstances(v []*DescribeARMServerInstancesResponseBodyServersAICInstances) *DescribeARMServerInstancesResponseBodyServers {
	s.AICInstances = v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetCreationTime(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.CreationTime = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetEnsRegionId(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetExpiredTime(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetServerId(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.ServerId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetSpecName(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.SpecName = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetState(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.State = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetStatus(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.Status = &v
	return s
}

type DescribeARMServerInstancesResponseBodyServersAICInstances struct {
	Frequency         *int64                                                                      `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	ImageId           *string                                                                     `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceId        *string                                                                     `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NetworkAttributes *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	Resolution        *string                                                                     `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
	Spec              *string                                                                     `json:"Spec,omitempty" xml:"Spec,omitempty"`
	State             *string                                                                     `json:"State,omitempty" xml:"State,omitempty"`
	Status            *string                                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstances) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetFrequency(v int64) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Frequency = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetImageId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.ImageId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetInstanceId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetNetworkAttributes(v *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.NetworkAttributes = v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetResolution(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Resolution = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetSpec(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Spec = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetState(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.State = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetStatus(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Status = &v
	return s
}

type DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes struct {
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) SetIpAddress(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes {
	s.IpAddress = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) SetNetworkId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes {
	s.NetworkId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) SetVSwitchId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes {
	s.VSwitchId = &v
	return s
}

type DescribeARMServerInstancesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeARMServerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeARMServerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponse) SetHeaders(v map[string]*string) *DescribeARMServerInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeARMServerInstancesResponse) SetStatusCode(v int32) *DescribeARMServerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeARMServerInstancesResponse) SetBody(v *DescribeARMServerInstancesResponseBody) *DescribeARMServerInstancesResponse {
	s.Body = v
	return s
}

type DescribeApplicationRequest struct {
	AppId               *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppVersions         *string `json:"AppVersions,omitempty" xml:"AppVersions,omitempty"`
	Level               *string `json:"Level,omitempty" xml:"Level,omitempty"`
	OutDetailStatParams *string `json:"OutDetailStatParams,omitempty" xml:"OutDetailStatParams,omitempty"`
}

func (s DescribeApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationRequest) SetAppId(v string) *DescribeApplicationRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationRequest) SetAppVersions(v string) *DescribeApplicationRequest {
	s.AppVersions = &v
	return s
}

func (s *DescribeApplicationRequest) SetLevel(v string) *DescribeApplicationRequest {
	s.Level = &v
	return s
}

func (s *DescribeApplicationRequest) SetOutDetailStatParams(v string) *DescribeApplicationRequest {
	s.OutDetailStatParams = &v
	return s
}

type DescribeApplicationResponseBody struct {
	Application *string `json:"Application,omitempty" xml:"Application,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationResponseBody) SetApplication(v string) *DescribeApplicationResponseBody {
	s.Application = &v
	return s
}

func (s *DescribeApplicationResponseBody) SetRequestId(v string) *DescribeApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApplicationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationResponse) SetHeaders(v map[string]*string) *DescribeApplicationResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationResponse) SetStatusCode(v int32) *DescribeApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationResponse) SetBody(v *DescribeApplicationResponseBody) *DescribeApplicationResponse {
	s.Body = v
	return s
}

type DescribeApplicationResourceSummaryRequest struct {
	Level        *string `json:"Level,omitempty" xml:"Level,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeApplicationResourceSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationResourceSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationResourceSummaryRequest) SetLevel(v string) *DescribeApplicationResourceSummaryRequest {
	s.Level = &v
	return s
}

func (s *DescribeApplicationResourceSummaryRequest) SetResourceType(v string) *DescribeApplicationResourceSummaryRequest {
	s.ResourceType = &v
	return s
}

type DescribeApplicationResourceSummaryResponseBody struct {
	ApplicationResource *string `json:"ApplicationResource,omitempty" xml:"ApplicationResource,omitempty"`
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApplicationResourceSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationResourceSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationResourceSummaryResponseBody) SetApplicationResource(v string) *DescribeApplicationResourceSummaryResponseBody {
	s.ApplicationResource = &v
	return s
}

func (s *DescribeApplicationResourceSummaryResponseBody) SetRequestId(v string) *DescribeApplicationResourceSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApplicationResourceSummaryResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeApplicationResourceSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApplicationResourceSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationResourceSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationResourceSummaryResponse) SetHeaders(v map[string]*string) *DescribeApplicationResourceSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationResourceSummaryResponse) SetStatusCode(v int32) *DescribeApplicationResourceSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationResourceSummaryResponse) SetBody(v *DescribeApplicationResourceSummaryResponseBody) *DescribeApplicationResourceSummaryResponse {
	s.Body = v
	return s
}

type DescribeAvailableResourceRequest struct {
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceRequest) SetVersion(v string) *DescribeAvailableResourceRequest {
	s.Version = &v
	return s
}

type DescribeAvailableResourceResponseBody struct {
	Code             *int32                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Images           *DescribeAvailableResourceResponseBodyImages           `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	RequestId        *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SupportResources *DescribeAvailableResourceResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBody) SetCode(v int32) *DescribeAvailableResourceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetImages(v *DescribeAvailableResourceResponseBodyImages) *DescribeAvailableResourceResponseBody {
	s.Images = v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetRequestId(v string) *DescribeAvailableResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetSupportResources(v *DescribeAvailableResourceResponseBodySupportResources) *DescribeAvailableResourceResponseBody {
	s.SupportResources = v
	return s
}

type DescribeAvailableResourceResponseBodyImages struct {
	Image []*DescribeAvailableResourceResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyImages) SetImage(v []*DescribeAvailableResourceResponseBodyImagesImage) *DescribeAvailableResourceResponseBodyImages {
	s.Image = v
	return s
}

type DescribeAvailableResourceResponseBodyImagesImage struct {
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
}

func (s DescribeAvailableResourceResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyImagesImage) SetImageId(v string) *DescribeAvailableResourceResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyImagesImage) SetImageName(v string) *DescribeAvailableResourceResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

type DescribeAvailableResourceResponseBodySupportResources struct {
	SupportResource []*DescribeAvailableResourceResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodySupportResources) SetSupportResource(v []*DescribeAvailableResourceResponseBodySupportResourcesSupportResource) *DescribeAvailableResourceResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeAvailableResourceResponseBodySupportResourcesSupportResource struct {
	DataDiskSize          *string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	EnsRegionId           *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceSpec          *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	SupportResourcesCount *string `json:"SupportResourcesCount,omitempty" xml:"SupportResourcesCount,omitempty"`
	SystemDiskSize        *string `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribeAvailableResourceResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetDataDiskSize(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetInstanceSpec(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetSupportResourcesCount(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.SupportResourcesCount = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetSystemDiskSize(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.SystemDiskSize = &v
	return s
}

type DescribeAvailableResourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAvailableResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourceResponse) SetStatusCode(v int32) *DescribeAvailableResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableResourceResponse) SetBody(v *DescribeAvailableResourceResponseBody) *DescribeAvailableResourceResponse {
	s.Body = v
	return s
}

type DescribeAvailableResourceInfoResponseBody struct {
	Images           *DescribeAvailableResourceInfoResponseBodyImages           `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	RequestId        *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SupportResources *DescribeAvailableResourceInfoResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBody) SetImages(v *DescribeAvailableResourceInfoResponseBodyImages) *DescribeAvailableResourceInfoResponseBody {
	s.Images = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBody) SetRequestId(v string) *DescribeAvailableResourceInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBody) SetSupportResources(v *DescribeAvailableResourceInfoResponseBodySupportResources) *DescribeAvailableResourceInfoResponseBody {
	s.SupportResources = v
	return s
}

type DescribeAvailableResourceInfoResponseBodyImages struct {
	Image []*DescribeAvailableResourceInfoResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodyImages) SetImage(v []*DescribeAvailableResourceInfoResponseBodyImagesImage) *DescribeAvailableResourceInfoResponseBodyImages {
	s.Image = v
	return s
}

type DescribeAvailableResourceInfoResponseBodyImagesImage struct {
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	ImageSize *int32  `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
}

func (s DescribeAvailableResourceInfoResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodyImagesImage) SetImageId(v string) *DescribeAvailableResourceInfoResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodyImagesImage) SetImageName(v string) *DescribeAvailableResourceInfoResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodyImagesImage) SetImageSize(v int32) *DescribeAvailableResourceInfoResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResources struct {
	SupportResource []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResources) SetSupportResource(v []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) *DescribeAvailableResourceInfoResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource struct {
	BandwidthTypes      *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes      `json:"BandwidthTypes,omitempty" xml:"BandwidthTypes,omitempty" type:"Struct"`
	DataDiskMaxSize     *int32                                                                                       `json:"DataDiskMaxSize,omitempty" xml:"DataDiskMaxSize,omitempty"`
	DataDiskMinSize     *int32                                                                                       `json:"DataDiskMinSize,omitempty" xml:"DataDiskMinSize,omitempty"`
	EnsRegionIds        *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds        `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Struct"`
	EnsRegionIdsExtends *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends `json:"EnsRegionIdsExtends,omitempty" xml:"EnsRegionIdsExtends,omitempty" type:"Struct"`
	InstanceSpeces      *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces      `json:"InstanceSpeces,omitempty" xml:"InstanceSpeces,omitempty" type:"Struct"`
	SystemDiskMaxSize   *int32                                                                                       `json:"SystemDiskMaxSize,omitempty" xml:"SystemDiskMaxSize,omitempty"`
	SystemDiskMinSize   *int32                                                                                       `json:"SystemDiskMinSize,omitempty" xml:"SystemDiskMinSize,omitempty"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetBandwidthTypes(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.BandwidthTypes = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDataDiskMaxSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DataDiskMaxSize = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDataDiskMinSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DataDiskMinSize = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionIds(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionIdsExtends(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionIdsExtends = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetInstanceSpeces(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.InstanceSpeces = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetSystemDiskMaxSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.SystemDiskMaxSize = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetSystemDiskMinSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.SystemDiskMinSize = &v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes struct {
	BandwidthType []*string `json:"BandwidthType,omitempty" xml:"BandwidthType,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) SetBandwidthType(v []*string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes {
	s.BandwidthType = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds struct {
	EnsRegionId []*string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) SetEnsRegionId(v []*string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds {
	s.EnsRegionId = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends struct {
	EnsRegionId []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) SetEnsRegionId(v []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends {
	s.EnsRegionId = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId struct {
	Area        *string `json:"Area,omitempty" xml:"Area,omitempty"`
	EnName      *string `json:"EnName,omitempty" xml:"EnName,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Province    *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetArea(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.Area = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetEnName(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.EnName = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetEnsRegionId(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetName(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.Name = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetProvince(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.Province = &v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces struct {
	InstanceSpec []*string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) SetInstanceSpec(v []*string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces {
	s.InstanceSpec = v
	return s
}

type DescribeAvailableResourceInfoResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAvailableResourceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableResourceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourceInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourceInfoResponse) SetStatusCode(v int32) *DescribeAvailableResourceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponse) SetBody(v *DescribeAvailableResourceInfoResponseBody) *DescribeAvailableResourceInfoResponse {
	s.Body = v
	return s
}

type DescribeBandWithdChargeTypeRequest struct {
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBandWithdChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandWithdChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandWithdChargeTypeRequest) SetVersion(v string) *DescribeBandWithdChargeTypeRequest {
	s.Version = &v
	return s
}

type DescribeBandWithdChargeTypeResponseBody struct {
	BandWithTypeInfo   *string `json:"BandWithTypeInfo,omitempty" xml:"BandWithTypeInfo,omitempty"`
	ChargeContractType *string `json:"ChargeContractType,omitempty" xml:"ChargeContractType,omitempty"`
	ChargeCycleInfo    *string `json:"ChargeCycleInfo,omitempty" xml:"ChargeCycleInfo,omitempty"`
	Code               *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBandWithdChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandWithdChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetBandWithTypeInfo(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.BandWithTypeInfo = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetChargeContractType(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.ChargeContractType = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetChargeCycleInfo(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.ChargeCycleInfo = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetCode(v int32) *DescribeBandWithdChargeTypeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetRequestId(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBandWithdChargeTypeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBandWithdChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBandWithdChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandWithdChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandWithdChargeTypeResponse) SetHeaders(v map[string]*string) *DescribeBandWithdChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeBandWithdChargeTypeResponse) SetStatusCode(v int32) *DescribeBandWithdChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponse) SetBody(v *DescribeBandWithdChargeTypeResponseBody) *DescribeBandWithdChargeTypeResponse {
	s.Body = v
	return s
}

type DescribeBandwitdhByInternetChargeTypeRequest struct {
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Isp         *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBandwitdhByInternetChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwitdhByInternetChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetEndTime(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetEnsRegionId(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetIsp(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.Isp = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetStartTime(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetVersion(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.Version = &v
	return s
}

type DescribeBandwitdhByInternetChargeTypeResponseBody struct {
	BandwidthValue     *int64  `json:"BandwidthValue,omitempty" xml:"BandwidthValue,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeStamp          *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeBandwitdhByInternetChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwitdhByInternetChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetBandwidthValue(v int64) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.BandwidthValue = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetInternetChargeType(v string) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetRequestId(v string) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetTimeStamp(v string) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.TimeStamp = &v
	return s
}

type DescribeBandwitdhByInternetChargeTypeResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBandwitdhByInternetChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBandwitdhByInternetChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwitdhByInternetChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwitdhByInternetChargeTypeResponse) SetHeaders(v map[string]*string) *DescribeBandwitdhByInternetChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponse) SetStatusCode(v int32) *DescribeBandwitdhByInternetChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponse) SetBody(v *DescribeBandwitdhByInternetChargeTypeResponseBody) *DescribeBandwitdhByInternetChargeTypeResponse {
	s.Body = v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponseBody struct {
	RequestId        *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SupportResources *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBody) SetRequestId(v string) *DescribeCloudDiskAvailableResourceInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBody) SetSupportResources(v *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) *DescribeCloudDiskAvailableResourceInfoResponseBody {
	s.SupportResources = v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources struct {
	SupportResource []*DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) SetSupportResource(v []*DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource struct {
	CanBuyCount     *int64  `json:"CanBuyCount,omitempty" xml:"CanBuyCount,omitempty"`
	Category        *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DefaultDiskSize *int64  `json:"DefaultDiskSize,omitempty" xml:"DefaultDiskSize,omitempty"`
	DiskMaxSize     *int64  `json:"DiskMaxSize,omitempty" xml:"DiskMaxSize,omitempty"`
	DiskMinSize     *int64  `json:"DiskMinSize,omitempty" xml:"DiskMinSize,omitempty"`
	EnsRegionId     *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionName   *string `json:"EnsRegionName,omitempty" xml:"EnsRegionName,omitempty"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetCanBuyCount(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.CanBuyCount = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetCategory(v string) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.Category = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDefaultDiskSize(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DefaultDiskSize = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDiskMaxSize(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DiskMaxSize = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDiskMinSize(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DiskMinSize = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionName(v string) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionName = &v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudDiskAvailableResourceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponse) SetHeaders(v map[string]*string) *DescribeCloudDiskAvailableResourceInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponse) SetStatusCode(v int32) *DescribeCloudDiskAvailableResourceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponse) SetBody(v *DescribeCloudDiskAvailableResourceInfoResponseBody) *DescribeCloudDiskAvailableResourceInfoResponse {
	s.Body = v
	return s
}

type DescribeCloudDiskTypesRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeCloudDiskTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesRequest) SetEnsRegionId(v string) *DescribeCloudDiskTypesRequest {
	s.EnsRegionId = &v
	return s
}

type DescribeCloudDiskTypesResponseBody struct {
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SupportResources *DescribeCloudDiskTypesResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeCloudDiskTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponseBody) SetRequestId(v string) *DescribeCloudDiskTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudDiskTypesResponseBody) SetSupportResources(v *DescribeCloudDiskTypesResponseBodySupportResources) *DescribeCloudDiskTypesResponseBody {
	s.SupportResources = v
	return s
}

type DescribeCloudDiskTypesResponseBodySupportResources struct {
	SupportResource []*DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeCloudDiskTypesResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponseBodySupportResources) SetSupportResource(v []*DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) *DescribeCloudDiskTypesResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) SetCategory(v string) *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource {
	s.Category = &v
	return s
}

func (s *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

type DescribeCloudDiskTypesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudDiskTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudDiskTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponse) SetHeaders(v map[string]*string) *DescribeCloudDiskTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudDiskTypesResponse) SetStatusCode(v int32) *DescribeCloudDiskTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudDiskTypesResponse) SetBody(v *DescribeCloudDiskTypesResponseBody) *DescribeCloudDiskTypesResponse {
	s.Body = v
	return s
}

type DescribeCreatePrePaidInstanceResultRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Version    *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeCreatePrePaidInstanceResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultRequest) SetInstanceId(v string) *DescribeCreatePrePaidInstanceResultRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultRequest) SetVersion(v string) *DescribeCreatePrePaidInstanceResultRequest {
	s.Version = &v
	return s
}

type DescribeCreatePrePaidInstanceResultResponseBody struct {
	InstanceCreateResult *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult `json:"InstanceCreateResult,omitempty" xml:"InstanceCreateResult,omitempty" type:"Struct"`
	RequestId            *string                                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCreatePrePaidInstanceResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultResponseBody) SetInstanceCreateResult(v *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) *DescribeCreatePrePaidInstanceResultResponseBody {
	s.InstanceCreateResult = v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponseBody) SetRequestId(v string) *DescribeCreatePrePaidInstanceResultResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult struct {
	InstanceCreateStatus *string `json:"InstanceCreateStatus,omitempty" xml:"InstanceCreateStatus,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) SetInstanceCreateStatus(v string) *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult {
	s.InstanceCreateStatus = &v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) SetInstanceId(v string) *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult {
	s.InstanceId = &v
	return s
}

type DescribeCreatePrePaidInstanceResultResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCreatePrePaidInstanceResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCreatePrePaidInstanceResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultResponse) SetHeaders(v map[string]*string) *DescribeCreatePrePaidInstanceResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponse) SetStatusCode(v int32) *DescribeCreatePrePaidInstanceResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponse) SetBody(v *DescribeCreatePrePaidInstanceResultResponseBody) *DescribeCreatePrePaidInstanceResultResponse {
	s.Body = v
	return s
}

type DescribeDataDistResultRequest struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DataNames    *string `json:"DataNames,omitempty" xml:"DataNames,omitempty"`
	DataVersions *string `json:"DataVersions,omitempty" xml:"DataVersions,omitempty"`
	InstanceIds  *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	MaxDate      *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	MinDate      *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDataDistResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultRequest) SetAppId(v string) *DescribeDataDistResultRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetDataNames(v string) *DescribeDataDistResultRequest {
	s.DataNames = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetDataVersions(v string) *DescribeDataDistResultRequest {
	s.DataVersions = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetInstanceIds(v string) *DescribeDataDistResultRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetMaxDate(v string) *DescribeDataDistResultRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetMinDate(v string) *DescribeDataDistResultRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetPageNumber(v int32) *DescribeDataDistResultRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetPageSize(v int32) *DescribeDataDistResultRequest {
	s.PageSize = &v
	return s
}

type DescribeDataDistResultResponseBody struct {
	DistResults *DescribeDataDistResultResponseBodyDistResults `json:"DistResults,omitempty" xml:"DistResults,omitempty" type:"Struct"`
	PageNumber  *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataDistResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBody) SetDistResults(v *DescribeDataDistResultResponseBodyDistResults) *DescribeDataDistResultResponseBody {
	s.DistResults = v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetPageNumber(v int32) *DescribeDataDistResultResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetPageSize(v int32) *DescribeDataDistResultResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetRequestId(v string) *DescribeDataDistResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetTotalCount(v int32) *DescribeDataDistResultResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDataDistResultResponseBodyDistResults struct {
	DistResult []*DescribeDataDistResultResponseBodyDistResultsDistResult `json:"DistResult,omitempty" xml:"DistResult,omitempty" type:"Repeated"`
}

func (s DescribeDataDistResultResponseBodyDistResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResults) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResults) SetDistResult(v []*DescribeDataDistResultResponseBodyDistResultsDistResult) *DescribeDataDistResultResponseBodyDistResults {
	s.DistResult = v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResult struct {
	Name        *string                                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	StatusStats *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats `json:"StatusStats,omitempty" xml:"StatusStats,omitempty" type:"Struct"`
	Version     *string                                                             `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResult) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResult) SetName(v string) *DescribeDataDistResultResponseBodyDistResultsDistResult {
	s.Name = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResult) SetStatusStats(v *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) *DescribeDataDistResultResponseBodyDistResultsDistResult {
	s.StatusStats = v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResult) SetVersion(v string) *DescribeDataDistResultResponseBodyDistResultsDistResult {
	s.Version = &v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats struct {
	StatusStat []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat `json:"StatusStat,omitempty" xml:"StatusStat,omitempty" type:"Repeated"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) SetStatusStat(v []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats {
	s.StatusStat = v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat struct {
	InstanceCount *string                                                                                `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	Instances     *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	Status        *string                                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) SetInstanceCount(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat {
	s.InstanceCount = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) SetInstances(v *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat {
	s.Instances = v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) SetStatus(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat {
	s.Status = &v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances struct {
	Instance []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) SetInstance(v []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances {
	s.Instance = v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance struct {
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StatusDescrip *string `json:"StatusDescrip,omitempty" xml:"StatusDescrip,omitempty"`
	UpdateTime    *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetInstanceId(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetStartTime(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetStatusDescrip(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.StatusDescrip = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetUpdateTime(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.UpdateTime = &v
	return s
}

type DescribeDataDistResultResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDataDistResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataDistResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponse) SetHeaders(v map[string]*string) *DescribeDataDistResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataDistResultResponse) SetStatusCode(v int32) *DescribeDataDistResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataDistResultResponse) SetBody(v *DescribeDataDistResultResponseBody) *DescribeDataDistResultResponse {
	s.Body = v
	return s
}

type DescribeDataDownloadURLRequest struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DataName             *string `json:"DataName,omitempty" xml:"DataName,omitempty"`
	DataVersion          *string `json:"DataVersion,omitempty" xml:"DataVersion,omitempty"`
	ExpireTimeout        *int64  `json:"ExpireTimeout,omitempty" xml:"ExpireTimeout,omitempty"`
	ServerFilterStrategy *string `json:"ServerFilterStrategy,omitempty" xml:"ServerFilterStrategy,omitempty"`
}

func (s DescribeDataDownloadURLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLRequest) SetAppId(v string) *DescribeDataDownloadURLRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetDataName(v string) *DescribeDataDownloadURLRequest {
	s.DataName = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetDataVersion(v string) *DescribeDataDownloadURLRequest {
	s.DataVersion = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetExpireTimeout(v int64) *DescribeDataDownloadURLRequest {
	s.ExpireTimeout = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetServerFilterStrategy(v string) *DescribeDataDownloadURLRequest {
	s.ServerFilterStrategy = &v
	return s
}

type DescribeDataDownloadURLResponseBody struct {
	Code      *int64                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *DescribeDataDownloadURLResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDataDownloadURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponseBody) SetCode(v int64) *DescribeDataDownloadURLResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBody) SetData(v *DescribeDataDownloadURLResponseBodyData) *DescribeDataDownloadURLResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDataDownloadURLResponseBody) SetMessage(v string) *DescribeDataDownloadURLResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBody) SetRequestId(v string) *DescribeDataDownloadURLResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDataDownloadURLResponseBodyData struct {
	ExpireTime *string                                              `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	ServerList []*DescribeDataDownloadURLResponseBodyDataServerList `json:"ServerList,omitempty" xml:"ServerList,omitempty" type:"Repeated"`
	Url        *string                                              `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeDataDownloadURLResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponseBodyData) SetExpireTime(v string) *DescribeDataDownloadURLResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBodyData) SetServerList(v []*DescribeDataDownloadURLResponseBodyDataServerList) *DescribeDataDownloadURLResponseBodyData {
	s.ServerList = v
	return s
}

func (s *DescribeDataDownloadURLResponseBodyData) SetUrl(v string) *DescribeDataDownloadURLResponseBodyData {
	s.Url = &v
	return s
}

type DescribeDataDownloadURLResponseBodyDataServerList struct {
	Host     *string `json:"Host,omitempty" xml:"Host,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDataDownloadURLResponseBodyDataServerList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponseBodyDataServerList) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponseBodyDataServerList) SetHost(v string) *DescribeDataDownloadURLResponseBodyDataServerList {
	s.Host = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBodyDataServerList) SetRegionId(v string) *DescribeDataDownloadURLResponseBodyDataServerList {
	s.RegionId = &v
	return s
}

type DescribeDataDownloadURLResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDataDownloadURLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataDownloadURLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponse) SetHeaders(v map[string]*string) *DescribeDataDownloadURLResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataDownloadURLResponse) SetStatusCode(v int32) *DescribeDataDownloadURLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataDownloadURLResponse) SetBody(v *DescribeDataDownloadURLResponseBody) *DescribeDataDownloadURLResponse {
	s.Body = v
	return s
}

type DescribeDataPushResultRequest struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DataNames    *string `json:"DataNames,omitempty" xml:"DataNames,omitempty"`
	DataVersions *string `json:"DataVersions,omitempty" xml:"DataVersions,omitempty"`
	MaxDate      *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	MinDate      *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionIds    *string `json:"RegionIds,omitempty" xml:"RegionIds,omitempty"`
}

func (s DescribeDataPushResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultRequest) SetAppId(v string) *DescribeDataPushResultRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetDataNames(v string) *DescribeDataPushResultRequest {
	s.DataNames = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetDataVersions(v string) *DescribeDataPushResultRequest {
	s.DataVersions = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetMaxDate(v string) *DescribeDataPushResultRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetMinDate(v string) *DescribeDataPushResultRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetPageNumber(v int32) *DescribeDataPushResultRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetPageSize(v int32) *DescribeDataPushResultRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetRegionIds(v string) *DescribeDataPushResultRequest {
	s.RegionIds = &v
	return s
}

type DescribeDataPushResultResponseBody struct {
	PageNumber  *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PushResults *DescribeDataPushResultResponseBodyPushResults `json:"PushResults,omitempty" xml:"PushResults,omitempty" type:"Struct"`
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataPushResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBody) SetPageNumber(v int32) *DescribeDataPushResultResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetPageSize(v int32) *DescribeDataPushResultResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetPushResults(v *DescribeDataPushResultResponseBodyPushResults) *DescribeDataPushResultResponseBody {
	s.PushResults = v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetRequestId(v string) *DescribeDataPushResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetTotalCount(v int32) *DescribeDataPushResultResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDataPushResultResponseBodyPushResults struct {
	PushResult []*DescribeDataPushResultResponseBodyPushResultsPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Repeated"`
}

func (s DescribeDataPushResultResponseBodyPushResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResults) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResults) SetPushResult(v []*DescribeDataPushResultResponseBodyPushResultsPushResult) *DescribeDataPushResultResponseBodyPushResults {
	s.PushResult = v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResult struct {
	Name        *string                                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	StatusStatS *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS `json:"StatusStatS,omitempty" xml:"StatusStatS,omitempty" type:"Struct"`
	Version     *string                                                             `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResult) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResult) SetName(v string) *DescribeDataPushResultResponseBodyPushResultsPushResult {
	s.Name = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResult) SetStatusStatS(v *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) *DescribeDataPushResultResponseBodyPushResultsPushResult {
	s.StatusStatS = v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResult) SetVersion(v string) *DescribeDataPushResultResponseBodyPushResultsPushResult {
	s.Version = &v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS struct {
	StatusStat []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat `json:"StatusStat,omitempty" xml:"StatusStat,omitempty" type:"Repeated"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) SetStatusStat(v []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS {
	s.StatusStat = v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat struct {
	RegionIdCount *int32                                                                                 `json:"RegionIdCount,omitempty" xml:"RegionIdCount,omitempty"`
	RegionIds     *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds `json:"RegionIds,omitempty" xml:"RegionIds,omitempty" type:"Struct"`
	Status        *string                                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) SetRegionIdCount(v int32) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat {
	s.RegionIdCount = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) SetRegionIds(v *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat {
	s.RegionIds = v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) SetStatus(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat {
	s.Status = &v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds struct {
	RegionId []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId `json:"RegionId,omitempty" xml:"RegionId,omitempty" type:"Repeated"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) SetRegionId(v []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds {
	s.RegionId = v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StatusDescrip *string `json:"StatusDescrip,omitempty" xml:"StatusDescrip,omitempty"`
	UpdateTime    *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetRegionId(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.RegionId = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetStartTime(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.StartTime = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetStatusDescrip(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.StatusDescrip = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetUpdateTime(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.UpdateTime = &v
	return s
}

type DescribeDataPushResultResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDataPushResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataPushResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponse) SetHeaders(v map[string]*string) *DescribeDataPushResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataPushResultResponse) SetStatusCode(v int32) *DescribeDataPushResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataPushResultResponse) SetBody(v *DescribeDataPushResultResponseBody) *DescribeDataPushResultResponse {
	s.Body = v
	return s
}

type DescribeDeviceServiceRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OrderId     *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ServiceId   *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DescribeDeviceServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceRequest) SetAppId(v string) *DescribeDeviceServiceRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetEnsRegionId(v string) *DescribeDeviceServiceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetInstanceId(v string) *DescribeDeviceServiceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetOrderId(v string) *DescribeDeviceServiceRequest {
	s.OrderId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetRegionId(v string) *DescribeDeviceServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetServiceId(v string) *DescribeDeviceServiceRequest {
	s.ServiceId = &v
	return s
}

type DescribeDeviceServiceResponseBody struct {
	AppMetaData         *DescribeDeviceServiceResponseBodyAppMetaData           `json:"AppMetaData,omitempty" xml:"AppMetaData,omitempty" type:"Struct"`
	AppStatus           *DescribeDeviceServiceResponseBodyAppStatus             `json:"AppStatus,omitempty" xml:"AppStatus,omitempty" type:"Struct"`
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceDetailInfos []*DescribeDeviceServiceResponseBodyResourceDetailInfos `json:"ResourceDetailInfos,omitempty" xml:"ResourceDetailInfos,omitempty" type:"Repeated"`
	ResourceInfos       []*DescribeDeviceServiceResponseBodyResourceInfos       `json:"ResourceInfos,omitempty" xml:"ResourceInfos,omitempty" type:"Repeated"`
}

func (s DescribeDeviceServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBody) SetAppMetaData(v *DescribeDeviceServiceResponseBodyAppMetaData) *DescribeDeviceServiceResponseBody {
	s.AppMetaData = v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetAppStatus(v *DescribeDeviceServiceResponseBodyAppStatus) *DescribeDeviceServiceResponseBody {
	s.AppStatus = v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetRequestId(v string) *DescribeDeviceServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetResourceDetailInfos(v []*DescribeDeviceServiceResponseBodyResourceDetailInfos) *DescribeDeviceServiceResponseBody {
	s.ResourceDetailInfos = v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetResourceInfos(v []*DescribeDeviceServiceResponseBodyResourceInfos) *DescribeDeviceServiceResponseBody {
	s.ResourceInfos = v
	return s
}

type DescribeDeviceServiceResponseBodyAppMetaData struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppName          *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	AppStableVersion *string `json:"AppStableVersion,omitempty" xml:"AppStableVersion,omitempty"`
	AppType          *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	ClusterName      *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	CreateTime       *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyAppMetaData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyAppMetaData) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppId(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppName(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppStableVersion(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppStableVersion = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppType(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppType = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetClusterName(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.ClusterName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetCreateTime(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.CreateTime = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetDescription(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.Description = &v
	return s
}

type DescribeDeviceServiceResponseBodyAppStatus struct {
	Phase         *string `json:"Phase,omitempty" xml:"Phase,omitempty"`
	StatusDescrip *string `json:"StatusDescrip,omitempty" xml:"StatusDescrip,omitempty"`
	UpdateTime    *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyAppStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyAppStatus) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyAppStatus) SetPhase(v string) *DescribeDeviceServiceResponseBodyAppStatus {
	s.Phase = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppStatus) SetStatusDescrip(v string) *DescribeDeviceServiceResponseBodyAppStatus {
	s.StatusDescrip = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppStatus) SetUpdateTime(v string) *DescribeDeviceServiceResponseBodyAppStatus {
	s.UpdateTime = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceDetailInfos struct {
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	ID         *string `json:"ID,omitempty" xml:"ID,omitempty"`
	IP         *string `json:"IP,omitempty" xml:"IP,omitempty"`
	ISP        *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	ImageID    *string `json:"ImageID,omitempty" xml:"ImageID,omitempty"`
	Mac        *string `json:"Mac,omitempty" xml:"Mac,omitempty"`
	RegionID   *string `json:"RegionID,omitempty" xml:"RegionID,omitempty"`
	Server     *string `json:"Server,omitempty" xml:"Server,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceDetailInfos) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetDeviceName(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.DeviceName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetID(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.ID = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetIP(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.IP = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetISP(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.ISP = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetImageID(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.ImageID = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetMac(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Mac = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetRegionID(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.RegionID = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetServer(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Server = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetStatus(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Status = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetType(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Type = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfos struct {
	AppVersion     *string                                                      `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	AreaCode       *string                                                      `json:"AreaCode,omitempty" xml:"AreaCode,omitempty"`
	AreaName       *string                                                      `json:"AreaName,omitempty" xml:"AreaName,omitempty"`
	CreateTime     *string                                                      `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeviceInfos    []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos `json:"DeviceInfos,omitempty" xml:"DeviceInfos,omitempty" type:"Repeated"`
	InstanceId     *string                                                      `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceStatus *string                                                      `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	InternalIps    []*DescribeDeviceServiceResponseBodyResourceInfosInternalIps `json:"InternalIps,omitempty" xml:"InternalIps,omitempty" type:"Repeated"`
	PublicIps      []*DescribeDeviceServiceResponseBodyResourceInfosPublicIps   `json:"PublicIps,omitempty" xml:"PublicIps,omitempty" type:"Repeated"`
	RegionCode     *string                                                      `json:"RegionCode,omitempty" xml:"RegionCode,omitempty"`
	RegionId       *string                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName     *string                                                      `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfos) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetAppVersion(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.AppVersion = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetAreaCode(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.AreaCode = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetAreaName(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.AreaName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetCreateTime(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.CreateTime = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetDeviceInfos(v []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.DeviceInfos = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetInstanceId(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.InstanceId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetInstanceStatus(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.InstanceStatus = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetInternalIps(v []*DescribeDeviceServiceResponseBodyResourceInfosInternalIps) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.InternalIps = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetPublicIps(v []*DescribeDeviceServiceResponseBodyResourceInfosPublicIps) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.PublicIps = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetRegionCode(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.RegionCode = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetRegionId(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.RegionId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetRegionName(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.RegionName = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos struct {
	Name    *string                                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Network []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork `json:"Network,omitempty" xml:"Network,omitempty" type:"Repeated"`
	Status  *string                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) SetName(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos {
	s.Name = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) SetNetwork(v []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos {
	s.Network = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) SetStatus(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos {
	s.Status = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork struct {
	ContainerPorts *string `json:"ContainerPorts,omitempty" xml:"ContainerPorts,omitempty"`
	ExternalIp     *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	HostPorts      *string `json:"HostPorts,omitempty" xml:"HostPorts,omitempty"`
	Protocol       *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetContainerPorts(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.ContainerPorts = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetExternalIp(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.ExternalIp = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetHostPorts(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.HostPorts = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetProtocol(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.Protocol = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosInternalIps struct {
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosInternalIps) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosInternalIps) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosInternalIps) SetIp(v string) *DescribeDeviceServiceResponseBodyResourceInfosInternalIps {
	s.Ip = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosPublicIps struct {
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosPublicIps) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosPublicIps) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosPublicIps) SetIp(v string) *DescribeDeviceServiceResponseBodyResourceInfosPublicIps {
	s.Ip = &v
	return s
}

type DescribeDeviceServiceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDeviceServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDeviceServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponse) SetHeaders(v map[string]*string) *DescribeDeviceServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeviceServiceResponse) SetStatusCode(v int32) *DescribeDeviceServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeviceServiceResponse) SetBody(v *DescribeDeviceServiceResponseBody) *DescribeDeviceServiceResponse {
	s.Body = v
	return s
}

type DescribeDisksRequest struct {
	Category       *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DiskChargeType *string `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	DiskId         *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskIds        *string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	DiskName       *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	DiskType       *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	EnsRegionId    *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionIds   *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	OrderByParams  *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	PageNumber     *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDisksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksRequest) GoString() string {
	return s.String()
}

func (s *DescribeDisksRequest) SetCategory(v string) *DescribeDisksRequest {
	s.Category = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskChargeType(v string) *DescribeDisksRequest {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskId(v string) *DescribeDisksRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskIds(v string) *DescribeDisksRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskName(v string) *DescribeDisksRequest {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskType(v string) *DescribeDisksRequest {
	s.DiskType = &v
	return s
}

func (s *DescribeDisksRequest) SetEnsRegionId(v string) *DescribeDisksRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeDisksRequest) SetEnsRegionIds(v string) *DescribeDisksRequest {
	s.EnsRegionIds = &v
	return s
}

func (s *DescribeDisksRequest) SetOrderByParams(v string) *DescribeDisksRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeDisksRequest) SetPageNumber(v string) *DescribeDisksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksRequest) SetPageSize(v string) *DescribeDisksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksRequest) SetStatus(v string) *DescribeDisksRequest {
	s.Status = &v
	return s
}

func (s *DescribeDisksRequest) SetType(v string) *DescribeDisksRequest {
	s.Type = &v
	return s
}

type DescribeDisksResponseBody struct {
	Code       *int32                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Disks      *DescribeDisksResponseBodyDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Struct"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDisksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBody) SetCode(v int32) *DescribeDisksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDisksResponseBody) SetDisks(v *DescribeDisksResponseBodyDisks) *DescribeDisksResponseBody {
	s.Disks = v
	return s
}

func (s *DescribeDisksResponseBody) SetPageNumber(v int32) *DescribeDisksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksResponseBody) SetPageSize(v int32) *DescribeDisksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksResponseBody) SetRequestId(v string) *DescribeDisksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDisksResponseBody) SetTotalCount(v int32) *DescribeDisksResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDisksResponseBodyDisks struct {
	Disks []*DescribeDisksResponseBodyDisksDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
}

func (s DescribeDisksResponseBodyDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisks) SetDisks(v []*DescribeDisksResponseBodyDisksDisks) *DescribeDisksResponseBodyDisks {
	s.Disks = v
	return s
}

type DescribeDisksResponseBodyDisksDisks struct {
	Category       *string `json:"Category,omitempty" xml:"Category,omitempty"`
	CreationTime   *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DiskChargeType *string `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	DiskId         *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskName       *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	EnsRegionId    *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName   *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Portable       *bool   `json:"Portable,omitempty" xml:"Portable,omitempty"`
	Size           *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDisksResponseBodyDisksDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisksDisks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisksDisks) SetCategory(v string) *DescribeDisksResponseBodyDisksDisks {
	s.Category = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetCreationTime(v string) *DescribeDisksResponseBodyDisksDisks {
	s.CreationTime = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDiskChargeType(v string) *DescribeDisksResponseBodyDisksDisks {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDiskId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDiskName(v string) *DescribeDisksResponseBodyDisksDisks {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetEnsRegionId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetInstanceId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetInstanceName(v string) *DescribeDisksResponseBodyDisksDisks {
	s.InstanceName = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetPortable(v bool) *DescribeDisksResponseBodyDisksDisks {
	s.Portable = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetSize(v int32) *DescribeDisksResponseBodyDisksDisks {
	s.Size = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetStatus(v string) *DescribeDisksResponseBodyDisksDisks {
	s.Status = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetType(v string) *DescribeDisksResponseBodyDisksDisks {
	s.Type = &v
	return s
}

type DescribeDisksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDisksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDisksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponse) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponse) SetHeaders(v map[string]*string) *DescribeDisksResponse {
	s.Headers = v
	return s
}

func (s *DescribeDisksResponse) SetStatusCode(v int32) *DescribeDisksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDisksResponse) SetBody(v *DescribeDisksResponseBody) *DescribeDisksResponse {
	s.Body = v
	return s
}

type DescribeEipAddressesRequest struct {
	Eips        *string `json:"Eips,omitempty" xml:"Eips,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEipAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesRequest) SetEips(v string) *DescribeEipAddressesRequest {
	s.Eips = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetEnsRegionId(v string) *DescribeEipAddressesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEipAddressesRequest) SetVersion(v string) *DescribeEipAddressesRequest {
	s.Version = &v
	return s
}

type DescribeEipAddressesResponseBody struct {
	EipAddresses *DescribeEipAddressesResponseBodyEipAddresses `json:"EipAddresses,omitempty" xml:"EipAddresses,omitempty" type:"Struct"`
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEipAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseBody) SetEipAddresses(v *DescribeEipAddressesResponseBodyEipAddresses) *DescribeEipAddressesResponseBody {
	s.EipAddresses = v
	return s
}

func (s *DescribeEipAddressesResponseBody) SetRequestId(v string) *DescribeEipAddressesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEipAddressesResponseBodyEipAddresses struct {
	EipAddress []*DescribeEipAddressesResponseBodyEipAddressesEipAddress `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" type:"Repeated"`
}

func (s DescribeEipAddressesResponseBodyEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseBodyEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseBodyEipAddresses) SetEipAddress(v []*DescribeEipAddressesResponseBodyEipAddressesEipAddress) *DescribeEipAddressesResponseBodyEipAddresses {
	s.EipAddress = v
	return s
}

type DescribeEipAddressesResponseBodyEipAddressesEipAddress struct {
	Eip                  *string `json:"Eip,omitempty" xml:"Eip,omitempty"`
	InstanceIdInternetIp *string `json:"InstanceIdInternetIp,omitempty" xml:"InstanceIdInternetIp,omitempty"`
}

func (s DescribeEipAddressesResponseBodyEipAddressesEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponseBodyEipAddressesEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponseBodyEipAddressesEipAddress) SetEip(v string) *DescribeEipAddressesResponseBodyEipAddressesEipAddress {
	s.Eip = &v
	return s
}

func (s *DescribeEipAddressesResponseBodyEipAddressesEipAddress) SetInstanceIdInternetIp(v string) *DescribeEipAddressesResponseBodyEipAddressesEipAddress {
	s.InstanceIdInternetIp = &v
	return s
}

type DescribeEipAddressesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEipAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEipAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEipAddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEipAddressesResponse) SetHeaders(v map[string]*string) *DescribeEipAddressesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEipAddressesResponse) SetStatusCode(v int32) *DescribeEipAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEipAddressesResponse) SetBody(v *DescribeEipAddressesResponseBody) *DescribeEipAddressesResponse {
	s.Body = v
	return s
}

type DescribeElbAvailableResourceInfoResponseBody struct {
	ElbAvailableResourceInfo []*DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo `json:"ElbAvailableResourceInfo,omitempty" xml:"ElbAvailableResourceInfo,omitempty" type:"Repeated"`
	RequestId                *string                                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeElbAvailableResourceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeElbAvailableResourceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeElbAvailableResourceInfoResponseBody) SetElbAvailableResourceInfo(v []*DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) *DescribeElbAvailableResourceInfoResponseBody {
	s.ElbAvailableResourceInfo = v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBody) SetRequestId(v string) *DescribeElbAvailableResourceInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo struct {
	Area             *string   `json:"Area,omitempty" xml:"Area,omitempty"`
	CanBuyCount      *string   `json:"CanBuyCount,omitempty" xml:"CanBuyCount,omitempty"`
	EnName           *string   `json:"EnName,omitempty" xml:"EnName,omitempty"`
	EnsRegionId      *string   `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	LoadBalancerSpec []*string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty" type:"Repeated"`
	Name             *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Province         *string   `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) GoString() string {
	return s.String()
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetArea(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.Area = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetCanBuyCount(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.CanBuyCount = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetEnName(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.EnName = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetEnsRegionId(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetLoadBalancerSpec(v []*string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.LoadBalancerSpec = v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetName(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.Name = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetProvince(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.Province = &v
	return s
}

type DescribeElbAvailableResourceInfoResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeElbAvailableResourceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeElbAvailableResourceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeElbAvailableResourceInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeElbAvailableResourceInfoResponse) SetHeaders(v map[string]*string) *DescribeElbAvailableResourceInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponse) SetStatusCode(v int32) *DescribeElbAvailableResourceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponse) SetBody(v *DescribeElbAvailableResourceInfoResponseBody) *DescribeElbAvailableResourceInfoResponse {
	s.Body = v
	return s
}

type DescribeEnsEipAddressesRequest struct {
	AllocationId           *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	AssociatedInstanceId   *string `json:"AssociatedInstanceId,omitempty" xml:"AssociatedInstanceId,omitempty"`
	AssociatedInstanceType *string `json:"AssociatedInstanceType,omitempty" xml:"AssociatedInstanceType,omitempty"`
	EipAddress             *string `json:"EipAddress,omitempty" xml:"EipAddress,omitempty"`
	EnsRegionId            *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	PageNumber             *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize               *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeEnsEipAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesRequest) SetAllocationId(v string) *DescribeEnsEipAddressesRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetAssociatedInstanceId(v string) *DescribeEnsEipAddressesRequest {
	s.AssociatedInstanceId = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetAssociatedInstanceType(v string) *DescribeEnsEipAddressesRequest {
	s.AssociatedInstanceType = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetEipAddress(v string) *DescribeEnsEipAddressesRequest {
	s.EipAddress = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetEnsRegionId(v string) *DescribeEnsEipAddressesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetPageNumber(v int32) *DescribeEnsEipAddressesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetPageSize(v int32) *DescribeEnsEipAddressesRequest {
	s.PageSize = &v
	return s
}

type DescribeEnsEipAddressesResponseBody struct {
	EipAddresses *DescribeEnsEipAddressesResponseBodyEipAddresses `json:"EipAddresses,omitempty" xml:"EipAddresses,omitempty" type:"Struct"`
	PageNumber   *int32                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEnsEipAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponseBody) SetEipAddresses(v *DescribeEnsEipAddressesResponseBodyEipAddresses) *DescribeEnsEipAddressesResponseBody {
	s.EipAddresses = v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetPageNumber(v int32) *DescribeEnsEipAddressesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetPageSize(v int32) *DescribeEnsEipAddressesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetRequestId(v string) *DescribeEnsEipAddressesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetTotalCount(v int32) *DescribeEnsEipAddressesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEnsEipAddressesResponseBodyEipAddresses struct {
	EipAddress []*DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" type:"Repeated"`
}

func (s DescribeEnsEipAddressesResponseBodyEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponseBodyEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddresses) SetEipAddress(v []*DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) *DescribeEnsEipAddressesResponseBodyEipAddresses {
	s.EipAddress = v
	return s
}

type DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress struct {
	AllocationId       *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	AllocationTime     *string `json:"AllocationTime,omitempty" xml:"AllocationTime,omitempty"`
	Bandwidth          *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId        *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	IpAddress          *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	Isp                *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetAllocationId(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetAllocationTime(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.AllocationTime = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetBandwidth(v int32) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetChargeType(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.ChargeType = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetDescription(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Description = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetEnsRegionId(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetInstanceId(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.InstanceId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetInstanceType(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.InstanceType = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetInternetChargeType(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetIpAddress(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetIsp(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Isp = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetName(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Name = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetStatus(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Status = &v
	return s
}

type DescribeEnsEipAddressesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsEipAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsEipAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponse) SetHeaders(v map[string]*string) *DescribeEnsEipAddressesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsEipAddressesResponse) SetStatusCode(v int32) *DescribeEnsEipAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsEipAddressesResponse) SetBody(v *DescribeEnsEipAddressesResponseBody) *DescribeEnsEipAddressesResponse {
	s.Body = v
	return s
}

type DescribeEnsNetDistrictRequest struct {
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	NetLevelCode    *string `json:"NetLevelCode,omitempty" xml:"NetLevelCode,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEnsNetDistrictRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictRequest) SetNetDistrictCode(v string) *DescribeEnsNetDistrictRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetDistrictRequest) SetNetLevelCode(v string) *DescribeEnsNetDistrictRequest {
	s.NetLevelCode = &v
	return s
}

func (s *DescribeEnsNetDistrictRequest) SetVersion(v string) *DescribeEnsNetDistrictRequest {
	s.Version = &v
	return s
}

type DescribeEnsNetDistrictResponseBody struct {
	Code            *int32                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	EnsNetDistricts *DescribeEnsNetDistrictResponseBodyEnsNetDistricts `json:"EnsNetDistricts,omitempty" xml:"EnsNetDistricts,omitempty" type:"Struct"`
	RequestId       *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsNetDistrictResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponseBody) SetCode(v int32) *DescribeEnsNetDistrictResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBody) SetEnsNetDistricts(v *DescribeEnsNetDistrictResponseBodyEnsNetDistricts) *DescribeEnsNetDistrictResponseBody {
	s.EnsNetDistricts = v
	return s
}

func (s *DescribeEnsNetDistrictResponseBody) SetRequestId(v string) *DescribeEnsNetDistrictResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsNetDistrictResponseBodyEnsNetDistricts struct {
	EnsNetDistrict []*DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict `json:"EnsNetDistrict,omitempty" xml:"EnsNetDistrict,omitempty" type:"Repeated"`
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistricts) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistricts) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistricts) SetEnsNetDistrict(v []*DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) *DescribeEnsNetDistrictResponseBodyEnsNetDistricts {
	s.EnsNetDistrict = v
	return s
}

type DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict struct {
	EnsRegionIdCount      *string `json:"EnsRegionIdCount,omitempty" xml:"EnsRegionIdCount,omitempty"`
	NetDistrictCode       *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	NetDistrictEnName     *string `json:"NetDistrictEnName,omitempty" xml:"NetDistrictEnName,omitempty"`
	NetDistrictFatherCode *string `json:"NetDistrictFatherCode,omitempty" xml:"NetDistrictFatherCode,omitempty"`
	NetDistrictLevel      *string `json:"NetDistrictLevel,omitempty" xml:"NetDistrictLevel,omitempty"`
	NetDistrictName       *string `json:"NetDistrictName,omitempty" xml:"NetDistrictName,omitempty"`
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetEnsRegionIdCount(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.EnsRegionIdCount = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictCode(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictEnName(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictEnName = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictFatherCode(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictFatherCode = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictLevel(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictLevel = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictName(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictName = &v
	return s
}

type DescribeEnsNetDistrictResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsNetDistrictResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsNetDistrictResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponse) SetHeaders(v map[string]*string) *DescribeEnsNetDistrictResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsNetDistrictResponse) SetStatusCode(v int32) *DescribeEnsNetDistrictResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsNetDistrictResponse) SetBody(v *DescribeEnsNetDistrictResponseBody) *DescribeEnsNetDistrictResponse {
	s.Body = v
	return s
}

type DescribeEnsNetLevelRequest struct {
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEnsNetLevelRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelRequest) SetVersion(v string) *DescribeEnsNetLevelRequest {
	s.Version = &v
	return s
}

type DescribeEnsNetLevelResponseBody struct {
	Code         *int32                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	EnsNetLevels *DescribeEnsNetLevelResponseBodyEnsNetLevels `json:"EnsNetLevels,omitempty" xml:"EnsNetLevels,omitempty" type:"Struct"`
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsNetLevelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponseBody) SetCode(v int32) *DescribeEnsNetLevelResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsNetLevelResponseBody) SetEnsNetLevels(v *DescribeEnsNetLevelResponseBodyEnsNetLevels) *DescribeEnsNetLevelResponseBody {
	s.EnsNetLevels = v
	return s
}

func (s *DescribeEnsNetLevelResponseBody) SetRequestId(v string) *DescribeEnsNetLevelResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsNetLevelResponseBodyEnsNetLevels struct {
	EnsNetLevel []*DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel `json:"EnsNetLevel,omitempty" xml:"EnsNetLevel,omitempty" type:"Repeated"`
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevels) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevels) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponseBodyEnsNetLevels) SetEnsNetLevel(v []*DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) *DescribeEnsNetLevelResponseBodyEnsNetLevels {
	s.EnsNetLevel = v
	return s
}

type DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel struct {
	EnsNetLevelCode *string `json:"EnsNetLevelCode,omitempty" xml:"EnsNetLevelCode,omitempty"`
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) SetEnsNetLevelCode(v string) *DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel {
	s.EnsNetLevelCode = &v
	return s
}

type DescribeEnsNetLevelResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsNetLevelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsNetLevelResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponse) SetHeaders(v map[string]*string) *DescribeEnsNetLevelResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsNetLevelResponse) SetStatusCode(v int32) *DescribeEnsNetLevelResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsNetLevelResponse) SetBody(v *DescribeEnsNetLevelResponseBody) *DescribeEnsNetLevelResponse {
	s.Body = v
	return s
}

type DescribeEnsNetSaleDistrictRequest struct {
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	NetLevelCode    *string `json:"NetLevelCode,omitempty" xml:"NetLevelCode,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEnsNetSaleDistrictRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictRequest) SetNetDistrictCode(v string) *DescribeEnsNetSaleDistrictRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictRequest) SetNetLevelCode(v string) *DescribeEnsNetSaleDistrictRequest {
	s.NetLevelCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictRequest) SetVersion(v string) *DescribeEnsNetSaleDistrictRequest {
	s.Version = &v
	return s
}

type DescribeEnsNetSaleDistrictResponseBody struct {
	Code            *int32                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	EnsNetDistricts *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts `json:"EnsNetDistricts,omitempty" xml:"EnsNetDistricts,omitempty" type:"Struct"`
	RequestId       *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsNetSaleDistrictResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponseBody) SetCode(v int32) *DescribeEnsNetSaleDistrictResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBody) SetEnsNetDistricts(v *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) *DescribeEnsNetSaleDistrictResponseBody {
	s.EnsNetDistricts = v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBody) SetRequestId(v string) *DescribeEnsNetSaleDistrictResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts struct {
	EnsNetDistrict []*DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict `json:"EnsNetDistrict,omitempty" xml:"EnsNetDistrict,omitempty" type:"Repeated"`
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) SetEnsNetDistrict(v []*DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts {
	s.EnsNetDistrict = v
	return s
}

type DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict struct {
	EnsRegionIdCount      *string `json:"EnsRegionIdCount,omitempty" xml:"EnsRegionIdCount,omitempty"`
	InstanceCount         *string `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	NetDistrictCode       *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	NetDistrictEnName     *string `json:"NetDistrictEnName,omitempty" xml:"NetDistrictEnName,omitempty"`
	NetDistrictFatherCode *string `json:"NetDistrictFatherCode,omitempty" xml:"NetDistrictFatherCode,omitempty"`
	NetDistrictLevel      *string `json:"NetDistrictLevel,omitempty" xml:"NetDistrictLevel,omitempty"`
	NetDistrictName       *string `json:"NetDistrictName,omitempty" xml:"NetDistrictName,omitempty"`
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetEnsRegionIdCount(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.EnsRegionIdCount = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetInstanceCount(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.InstanceCount = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictCode(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictEnName(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictEnName = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictFatherCode(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictFatherCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictLevel(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictLevel = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictName(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictName = &v
	return s
}

type DescribeEnsNetSaleDistrictResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsNetSaleDistrictResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsNetSaleDistrictResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponse) SetHeaders(v map[string]*string) *DescribeEnsNetSaleDistrictResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponse) SetStatusCode(v int32) *DescribeEnsNetSaleDistrictResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponse) SetBody(v *DescribeEnsNetSaleDistrictResponseBody) *DescribeEnsNetSaleDistrictResponse {
	s.Body = v
	return s
}

type DescribeEnsRegionIdIpv6InfoRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEnsRegionIdIpv6InfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoRequest) SetEnsRegionId(v string) *DescribeEnsRegionIdIpv6InfoRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoRequest) SetVersion(v string) *DescribeEnsRegionIdIpv6InfoRequest {
	s.Version = &v
	return s
}

type DescribeEnsRegionIdIpv6InfoResponseBody struct {
	RequestId       *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SupportIpv6Info *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info `json:"SupportIpv6Info,omitempty" xml:"SupportIpv6Info,omitempty" type:"Struct"`
}

func (s DescribeEnsRegionIdIpv6InfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBody) SetRequestId(v string) *DescribeEnsRegionIdIpv6InfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBody) SetSupportIpv6Info(v *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) *DescribeEnsRegionIdIpv6InfoResponseBody {
	s.SupportIpv6Info = v
	return s
}

type DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	SupportIpv6 *bool   `json:"SupportIpv6,omitempty" xml:"SupportIpv6,omitempty"`
}

func (s DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) SetEnsRegionId(v string) *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) SetSupportIpv6(v bool) *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info {
	s.SupportIpv6 = &v
	return s
}

type DescribeEnsRegionIdIpv6InfoResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsRegionIdIpv6InfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsRegionIdIpv6InfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoResponse) SetHeaders(v map[string]*string) *DescribeEnsRegionIdIpv6InfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponse) SetStatusCode(v int32) *DescribeEnsRegionIdIpv6InfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponse) SetBody(v *DescribeEnsRegionIdIpv6InfoResponseBody) *DescribeEnsRegionIdIpv6InfoResponse {
	s.Body = v
	return s
}

type DescribeEnsRegionIdResourceRequest struct {
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Isp           *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeEnsRegionIdResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceRequest) SetEndTime(v string) *DescribeEnsRegionIdResourceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetIsp(v string) *DescribeEnsRegionIdResourceRequest {
	s.Isp = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetOrderByParams(v string) *DescribeEnsRegionIdResourceRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetPageNumber(v int32) *DescribeEnsRegionIdResourceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetPageSize(v string) *DescribeEnsRegionIdResourceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetStartTime(v string) *DescribeEnsRegionIdResourceRequest {
	s.StartTime = &v
	return s
}

type DescribeEnsRegionIdResourceResponseBody struct {
	EnsRegionIdResources *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources `json:"EnsRegionIdResources,omitempty" xml:"EnsRegionIdResources,omitempty" type:"Struct"`
	PageNumber           *int32                                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount           *int32                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEnsRegionIdResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetEnsRegionIdResources(v *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) *DescribeEnsRegionIdResourceResponseBody {
	s.EnsRegionIdResources = v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetPageNumber(v int32) *DescribeEnsRegionIdResourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetPageSize(v int32) *DescribeEnsRegionIdResourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetRequestId(v string) *DescribeEnsRegionIdResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetTotalCount(v int32) *DescribeEnsRegionIdResourceResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources struct {
	EnsRegionIdResource []*DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource `json:"EnsRegionIdResource,omitempty" xml:"EnsRegionIdResource,omitempty" type:"Repeated"`
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) SetEnsRegionIdResource(v []*DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources {
	s.EnsRegionIdResource = v
	return s
}

type DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource struct {
	Area              *string `json:"Area,omitempty" xml:"Area,omitempty"`
	AreaCode          *string `json:"AreaCode,omitempty" xml:"AreaCode,omitempty"`
	BizDate           *string `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	EnsRegionId       *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionIdName   *string `json:"EnsRegionIdName,omitempty" xml:"EnsRegionIdName,omitempty"`
	InstanceCount     *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	InternetBandwidth *int64  `json:"InternetBandwidth,omitempty" xml:"InternetBandwidth,omitempty"`
	Isp               *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	VCpu              *int32  `json:"VCpu,omitempty" xml:"VCpu,omitempty"`
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetArea(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.Area = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetAreaCode(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.AreaCode = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetBizDate(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.BizDate = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetEnsRegionId(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetEnsRegionIdName(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.EnsRegionIdName = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetInstanceCount(v int32) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.InstanceCount = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetInternetBandwidth(v int64) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.InternetBandwidth = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetIsp(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.Isp = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetVCpu(v int32) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.VCpu = &v
	return s
}

type DescribeEnsRegionIdResourceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsRegionIdResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsRegionIdResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponse) SetHeaders(v map[string]*string) *DescribeEnsRegionIdResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRegionIdResourceResponse) SetStatusCode(v int32) *DescribeEnsRegionIdResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponse) SetBody(v *DescribeEnsRegionIdResourceResponseBody) *DescribeEnsRegionIdResourceResponse {
	s.Body = v
	return s
}

type DescribeEnsRegionsRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeEnsRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsRequest) SetEnsRegionId(v string) *DescribeEnsRegionsRequest {
	s.EnsRegionId = &v
	return s
}

type DescribeEnsRegionsResponseBody struct {
	Code       *int32                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	EnsRegions *DescribeEnsRegionsResponseBodyEnsRegions `json:"EnsRegions,omitempty" xml:"EnsRegions,omitempty" type:"Struct"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponseBody) SetCode(v int32) *DescribeEnsRegionsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsRegionsResponseBody) SetEnsRegions(v *DescribeEnsRegionsResponseBodyEnsRegions) *DescribeEnsRegionsResponseBody {
	s.EnsRegions = v
	return s
}

func (s *DescribeEnsRegionsResponseBody) SetRequestId(v string) *DescribeEnsRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsRegionsResponseBodyEnsRegions struct {
	EnsRegions []*DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions `json:"EnsRegions,omitempty" xml:"EnsRegions,omitempty" type:"Repeated"`
}

func (s DescribeEnsRegionsResponseBodyEnsRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponseBodyEnsRegions) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponseBodyEnsRegions) SetEnsRegions(v []*DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) *DescribeEnsRegionsResponseBodyEnsRegions {
	s.EnsRegions = v
	return s
}

type DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions struct {
	Area        *string `json:"Area,omitempty" xml:"Area,omitempty"`
	EnName      *string `json:"EnName,omitempty" xml:"EnName,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Province    *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetArea(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.Area = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetEnName(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.EnName = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetEnsRegionId(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetName(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.Name = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetProvince(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.Province = &v
	return s
}

type DescribeEnsRegionsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponse) SetHeaders(v map[string]*string) *DescribeEnsRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRegionsResponse) SetStatusCode(v int32) *DescribeEnsRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRegionsResponse) SetBody(v *DescribeEnsRegionsResponseBody) *DescribeEnsRegionsResponse {
	s.Body = v
	return s
}

type DescribeEnsResourceUsageRequest struct {
	ExpiredEndTime   *string `json:"ExpiredEndTime,omitempty" xml:"ExpiredEndTime,omitempty"`
	ExpiredStartTime *string `json:"ExpiredStartTime,omitempty" xml:"ExpiredStartTime,omitempty"`
}

func (s DescribeEnsResourceUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageRequest) SetExpiredEndTime(v string) *DescribeEnsResourceUsageRequest {
	s.ExpiredEndTime = &v
	return s
}

func (s *DescribeEnsResourceUsageRequest) SetExpiredStartTime(v string) *DescribeEnsResourceUsageRequest {
	s.ExpiredStartTime = &v
	return s
}

type DescribeEnsResourceUsageResponseBody struct {
	EnsResourceUsage []*DescribeEnsResourceUsageResponseBodyEnsResourceUsage `json:"EnsResourceUsage,omitempty" xml:"EnsResourceUsage,omitempty" type:"Repeated"`
	RequestId        *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsResourceUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageResponseBody) SetEnsResourceUsage(v []*DescribeEnsResourceUsageResponseBodyEnsResourceUsage) *DescribeEnsResourceUsageResponseBody {
	s.EnsResourceUsage = v
	return s
}

func (s *DescribeEnsResourceUsageResponseBody) SetRequestId(v string) *DescribeEnsResourceUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsResourceUsageResponseBodyEnsResourceUsage struct {
	ComputeResourceCount *int32  `json:"ComputeResourceCount,omitempty" xml:"ComputeResourceCount,omitempty"`
	CpuSum               *int64  `json:"CpuSum,omitempty" xml:"CpuSum,omitempty"`
	DiskCount            *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DownCount            *int32  `json:"DownCount,omitempty" xml:"DownCount,omitempty"`
	ExpiredCount         *int32  `json:"ExpiredCount,omitempty" xml:"ExpiredCount,omitempty"`
	ExpiringCount        *int32  `json:"ExpiringCount,omitempty" xml:"ExpiringCount,omitempty"`
	GpuSum               *int64  `json:"GpuSum,omitempty" xml:"GpuSum,omitempty"`
	InstanceCount        *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	RunningCount         *int32  `json:"RunningCount,omitempty" xml:"RunningCount,omitempty"`
	ServiceType          *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	StorageSum           *int64  `json:"StorageSum,omitempty" xml:"StorageSum,omitempty"`
}

func (s DescribeEnsResourceUsageResponseBodyEnsResourceUsage) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageResponseBodyEnsResourceUsage) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetComputeResourceCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ComputeResourceCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetCpuSum(v int64) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.CpuSum = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetDiskCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.DiskCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetDownCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.DownCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetExpiredCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ExpiredCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetExpiringCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ExpiringCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetGpuSum(v int64) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.GpuSum = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetInstanceCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.InstanceCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetRunningCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.RunningCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetServiceType(v string) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ServiceType = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetStorageSum(v int64) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.StorageSum = &v
	return s
}

type DescribeEnsResourceUsageResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsResourceUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsResourceUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageResponse) SetHeaders(v map[string]*string) *DescribeEnsResourceUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsResourceUsageResponse) SetStatusCode(v int32) *DescribeEnsResourceUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsResourceUsageResponse) SetBody(v *DescribeEnsResourceUsageResponseBody) *DescribeEnsResourceUsageResponse {
	s.Body = v
	return s
}

type DescribeEnsRouteEntryListRequest struct {
	DestinationCidrBlock *string `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	NextHopId            *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopType          *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RouteEntryId         *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
	RouteEntryName       *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	RouteEntryType       *string `json:"RouteEntryType,omitempty" xml:"RouteEntryType,omitempty"`
	RouteTableId         *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
}

func (s DescribeEnsRouteEntryListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListRequest) SetDestinationCidrBlock(v string) *DescribeEnsRouteEntryListRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetNextHopId(v string) *DescribeEnsRouteEntryListRequest {
	s.NextHopId = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetNextHopType(v string) *DescribeEnsRouteEntryListRequest {
	s.NextHopType = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetPageNumber(v int32) *DescribeEnsRouteEntryListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetPageSize(v int32) *DescribeEnsRouteEntryListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteEntryId(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteEntryId = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteEntryName(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteEntryName = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteEntryType(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteEntryType = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteTableId(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteTableId = &v
	return s
}

type DescribeEnsRouteEntryListResponseBody struct {
	PageNumber  *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouteEntrys []*DescribeEnsRouteEntryListResponseBodyRouteEntrys `json:"RouteEntrys,omitempty" xml:"RouteEntrys,omitempty" type:"Repeated"`
	TotalCount  *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEnsRouteEntryListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponseBody) SetPageNumber(v int32) *DescribeEnsRouteEntryListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetPageSize(v int32) *DescribeEnsRouteEntryListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetRequestId(v string) *DescribeEnsRouteEntryListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetRouteEntrys(v []*DescribeEnsRouteEntryListResponseBodyRouteEntrys) *DescribeEnsRouteEntryListResponseBody {
	s.RouteEntrys = v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetTotalCount(v int32) *DescribeEnsRouteEntryListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEnsRouteEntryListResponseBodyRouteEntrys struct {
	Description          *string                                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	DestinationCidrBlock *string                                                     `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	NextHops             []*DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops `json:"NextHops,omitempty" xml:"NextHops,omitempty" type:"Repeated"`
	RouteEntryId         *string                                                     `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
	RouteEntryName       *string                                                     `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	RouteTableId         *string                                                     `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	Status               *string                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                 *string                                                     `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrys) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetDescription(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.Description = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetDestinationCidrBlock(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetNextHops(v []*DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.NextHops = v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetRouteEntryId(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.RouteEntryId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetRouteEntryName(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.RouteEntryName = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetRouteTableId(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.RouteTableId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetStatus(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.Status = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetType(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.Type = &v
	return s
}

type DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops struct {
	NextHopId   *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) SetNextHopId(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops {
	s.NextHopId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) SetNextHopType(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops {
	s.NextHopType = &v
	return s
}

type DescribeEnsRouteEntryListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEnsRouteEntryListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEnsRouteEntryListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponse) SetHeaders(v map[string]*string) *DescribeEnsRouteEntryListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRouteEntryListResponse) SetStatusCode(v int32) *DescribeEnsRouteEntryListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponse) SetBody(v *DescribeEnsRouteEntryListResponseBody) *DescribeEnsRouteEntryListResponse {
	s.Body = v
	return s
}

type DescribeEpnBandWidthDataRequest struct {
	EPNInstanceId   *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnsRegionId     *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Isp             *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	Period          *string `json:"Period,omitempty" xml:"Period,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEpnBandWidthDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataRequest) SetEPNInstanceId(v string) *DescribeEpnBandWidthDataRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetEndTime(v string) *DescribeEpnBandWidthDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetEnsRegionId(v string) *DescribeEpnBandWidthDataRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetInstanceId(v string) *DescribeEpnBandWidthDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetIsp(v string) *DescribeEpnBandWidthDataRequest {
	s.Isp = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetNetworkingModel(v string) *DescribeEpnBandWidthDataRequest {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetPeriod(v string) *DescribeEpnBandWidthDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetStartTime(v string) *DescribeEpnBandWidthDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetVersion(v string) *DescribeEpnBandWidthDataRequest {
	s.Version = &v
	return s
}

type DescribeEpnBandWidthDataResponseBody struct {
	MonitorData *DescribeEpnBandWidthDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Struct"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEpnBandWidthDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponseBody) SetMonitorData(v *DescribeEpnBandWidthDataResponseBodyMonitorData) *DescribeEpnBandWidthDataResponseBody {
	s.MonitorData = v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBody) SetRequestId(v string) *DescribeEpnBandWidthDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEpnBandWidthDataResponseBodyMonitorData struct {
	BandWidthMonitorData []*DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData `json:"BandWidthMonitorData,omitempty" xml:"BandWidthMonitorData,omitempty" type:"Repeated"`
	MaxDownBandWidth     *int64                                                                 `json:"MaxDownBandWidth,omitempty" xml:"MaxDownBandWidth,omitempty"`
	MaxUpBandWidth       *int64                                                                 `json:"MaxUpBandWidth,omitempty" xml:"MaxUpBandWidth,omitempty"`
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorData) SetBandWidthMonitorData(v []*DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) *DescribeEpnBandWidthDataResponseBodyMonitorData {
	s.BandWidthMonitorData = v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorData) SetMaxDownBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorData {
	s.MaxDownBandWidth = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorData) SetMaxUpBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorData {
	s.MaxUpBandWidth = &v
	return s
}

type DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData struct {
	DownBandWidth *int64  `json:"DownBandWidth,omitempty" xml:"DownBandWidth,omitempty"`
	InternetRX    *int64  `json:"InternetRX,omitempty" xml:"InternetRX,omitempty"`
	InternetTX    *int64  `json:"InternetTX,omitempty" xml:"InternetTX,omitempty"`
	TimeStamp     *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	UpBandWidth   *int64  `json:"UpBandWidth,omitempty" xml:"UpBandWidth,omitempty"`
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetDownBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.DownBandWidth = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetRX(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetRX = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetTX(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetTX = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetTimeStamp(v string) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetUpBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.UpBandWidth = &v
	return s
}

type DescribeEpnBandWidthDataResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEpnBandWidthDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEpnBandWidthDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponse) SetHeaders(v map[string]*string) *DescribeEpnBandWidthDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnBandWidthDataResponse) SetStatusCode(v int32) *DescribeEpnBandWidthDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponse) SetBody(v *DescribeEpnBandWidthDataResponseBody) *DescribeEpnBandWidthDataResponse {
	s.Body = v
	return s
}

type DescribeEpnBandwitdhByInternetChargeTypeRequest struct {
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnsRegionId     *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Isp             *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEpnBandwitdhByInternetChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandwitdhByInternetChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetEndTime(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetEnsRegionId(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetIsp(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.Isp = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetNetworkingModel(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetStartTime(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetVersion(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.Version = &v
	return s
}

type DescribeEpnBandwitdhByInternetChargeTypeResponseBody struct {
	BandwidthValue     *int64  `json:"BandwidthValue,omitempty" xml:"BandwidthValue,omitempty"`
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeStamp          *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetBandwidthValue(v int64) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.BandwidthValue = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetInternetChargeType(v string) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetRequestId(v string) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetTimeStamp(v string) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.TimeStamp = &v
	return s
}

type DescribeEpnBandwitdhByInternetChargeTypeResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEpnBandwitdhByInternetChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponse) SetHeaders(v map[string]*string) *DescribeEpnBandwitdhByInternetChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponse) SetStatusCode(v int32) *DescribeEpnBandwitdhByInternetChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponse) SetBody(v *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) *DescribeEpnBandwitdhByInternetChargeTypeResponse {
	s.Body = v
	return s
}

type DescribeEpnInstanceAttributeRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s DescribeEpnInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeRequest) SetEPNInstanceId(v string) *DescribeEpnInstanceAttributeRequest {
	s.EPNInstanceId = &v
	return s
}

type DescribeEpnInstanceAttributeResponseBody struct {
	ConfVersions    []*DescribeEpnInstanceAttributeResponseBodyConfVersions `json:"ConfVersions,omitempty" xml:"ConfVersions,omitempty" type:"Repeated"`
	EPNInstanceId   *string                                                 `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	EPNInstanceName *string                                                 `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	Instances       []*DescribeEpnInstanceAttributeResponseBodyInstances    `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	NetworkingModel *string                                                 `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	RequestId       *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VSwitches       []*DescribeEpnInstanceAttributeResponseBodyVSwitches    `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" type:"Repeated"`
}

func (s DescribeEpnInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetConfVersions(v []*DescribeEpnInstanceAttributeResponseBodyConfVersions) *DescribeEpnInstanceAttributeResponseBody {
	s.ConfVersions = v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetEPNInstanceId(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetEPNInstanceName(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.EPNInstanceName = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetInstances(v []*DescribeEpnInstanceAttributeResponseBodyInstances) *DescribeEpnInstanceAttributeResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetNetworkingModel(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetRequestId(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetVSwitches(v []*DescribeEpnInstanceAttributeResponseBodyVSwitches) *DescribeEpnInstanceAttributeResponseBody {
	s.VSwitches = v
	return s
}

type DescribeEpnInstanceAttributeResponseBodyConfVersions struct {
	ConfVersion *string `json:"ConfVersion,omitempty" xml:"ConfVersion,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeEpnInstanceAttributeResponseBodyConfVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBodyConfVersions) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBodyConfVersions) SetConfVersion(v string) *DescribeEpnInstanceAttributeResponseBodyConfVersions {
	s.ConfVersion = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyConfVersions) SetEnsRegionId(v string) *DescribeEpnInstanceAttributeResponseBodyConfVersions {
	s.EnsRegionId = &v
	return s
}

type DescribeEpnInstanceAttributeResponseBodyInstances struct {
	EnsRegionId      *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName     *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Isp              *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	PublicIpAddress  *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEpnInstanceAttributeResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetEnsRegionId(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetInstanceId(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetInstanceName(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetIsp(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.Isp = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetPrivateIpAddress(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetPublicIpAddress(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.PublicIpAddress = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetStatus(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.Status = &v
	return s
}

type DescribeEpnInstanceAttributeResponseBodyVSwitches struct {
	CidrBlock   *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	VSwitchId   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeEpnInstanceAttributeResponseBodyVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBodyVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetCidrBlock(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.CidrBlock = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetEnsRegionId(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetVSwitchId(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.VSwitchId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetVSwitchName(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.VSwitchName = &v
	return s
}

type DescribeEpnInstanceAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEpnInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEpnInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeEpnInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnInstanceAttributeResponse) SetStatusCode(v int32) *DescribeEpnInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponse) SetBody(v *DescribeEpnInstanceAttributeResponseBody) *DescribeEpnInstanceAttributeResponse {
	s.Body = v
	return s
}

type DescribeEpnInstancesRequest struct {
	EPNInstanceId   *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	EPNInstanceName *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeEpnInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesRequest) SetEPNInstanceId(v string) *DescribeEpnInstancesRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnInstancesRequest) SetEPNInstanceName(v string) *DescribeEpnInstancesRequest {
	s.EPNInstanceName = &v
	return s
}

func (s *DescribeEpnInstancesRequest) SetPageNumber(v int32) *DescribeEpnInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEpnInstancesRequest) SetPageSize(v int32) *DescribeEpnInstancesRequest {
	s.PageSize = &v
	return s
}

type DescribeEpnInstancesResponseBody struct {
	EPNInstances *DescribeEpnInstancesResponseBodyEPNInstances `json:"EPNInstances,omitempty" xml:"EPNInstances,omitempty" type:"Struct"`
	PageNumber   *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEpnInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponseBody) SetEPNInstances(v *DescribeEpnInstancesResponseBodyEPNInstances) *DescribeEpnInstancesResponseBody {
	s.EPNInstances = v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetPageNumber(v int32) *DescribeEpnInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetPageSize(v int32) *DescribeEpnInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetRequestId(v string) *DescribeEpnInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetTotalCount(v int32) *DescribeEpnInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEpnInstancesResponseBodyEPNInstances struct {
	EPNInstance []*DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance `json:"EPNInstance,omitempty" xml:"EPNInstance,omitempty" type:"Repeated"`
}

func (s DescribeEpnInstancesResponseBodyEPNInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponseBodyEPNInstances) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponseBodyEPNInstances) SetEPNInstance(v []*DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) *DescribeEpnInstancesResponseBodyEPNInstances {
	s.EPNInstance = v
	return s
}

type DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance struct {
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	EPNInstanceId           *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	EPNInstanceName         *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	EPNInstanceType         *string `json:"EPNInstanceType,omitempty" xml:"EPNInstanceType,omitempty"`
	EndTime                 *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InternetMaxBandwidthOut *int32  `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	ModifyTime              *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	NetworkingModel         *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	StartTime               *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetCreationTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEPNInstanceId(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEPNInstanceName(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EPNInstanceName = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEPNInstanceType(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EPNInstanceType = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEndTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EndTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetInternetMaxBandwidthOut(v int32) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetModifyTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.ModifyTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetNetworkingModel(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetStartTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetStatus(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.Status = &v
	return s
}

type DescribeEpnInstancesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEpnInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEpnInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponse) SetHeaders(v map[string]*string) *DescribeEpnInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnInstancesResponse) SetStatusCode(v int32) *DescribeEpnInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnInstancesResponse) SetBody(v *DescribeEpnInstancesResponseBody) *DescribeEpnInstancesResponse {
	s.Body = v
	return s
}

type DescribeEpnMeasurementDataRequest struct {
	EndDate   *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Version   *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEpnMeasurementDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataRequest) SetEndDate(v string) *DescribeEpnMeasurementDataRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeEpnMeasurementDataRequest) SetStartDate(v string) *DescribeEpnMeasurementDataRequest {
	s.StartDate = &v
	return s
}

func (s *DescribeEpnMeasurementDataRequest) SetVersion(v string) *DescribeEpnMeasurementDataRequest {
	s.Version = &v
	return s
}

type DescribeEpnMeasurementDataResponseBody struct {
	MeasurementDatas *DescribeEpnMeasurementDataResponseBodyMeasurementDatas `json:"MeasurementDatas,omitempty" xml:"MeasurementDatas,omitempty" type:"Struct"`
	RequestId        *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEpnMeasurementDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBody) SetMeasurementDatas(v *DescribeEpnMeasurementDataResponseBodyMeasurementDatas) *DescribeEpnMeasurementDataResponseBody {
	s.MeasurementDatas = v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBody) SetRequestId(v string) *DescribeEpnMeasurementDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatas struct {
	MeasurementData []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData `json:"MeasurementData,omitempty" xml:"MeasurementData,omitempty" type:"Repeated"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatas) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatas) SetMeasurementData(v []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) *DescribeEpnMeasurementDataResponseBodyMeasurementDatas {
	s.MeasurementData = v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData struct {
	BandWidthFeeDatas *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas `json:"BandWidthFeeDatas,omitempty" xml:"BandWidthFeeDatas,omitempty" type:"Struct"`
	ChargeModel       *string                                                                                 `json:"ChargeModel,omitempty" xml:"ChargeModel,omitempty"`
	CostCycle         *string                                                                                 `json:"CostCycle,omitempty" xml:"CostCycle,omitempty"`
	CostEndTime       *string                                                                                 `json:"CostEndTime,omitempty" xml:"CostEndTime,omitempty"`
	CostStartTime     *string                                                                                 `json:"CostStartTime,omitempty" xml:"CostStartTime,omitempty"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetBandWidthFeeDatas(v *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.BandWidthFeeDatas = v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetChargeModel(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ChargeModel = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostCycle(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostCycle = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostEndTime(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostEndTime = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostStartTime(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostStartTime = &v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas struct {
	BandWidthFeeData []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData `json:"BandWidthFeeData,omitempty" xml:"BandWidthFeeData,omitempty" type:"Repeated"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) SetBandWidthFeeData(v []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas {
	s.BandWidthFeeData = v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData struct {
	CostCode *string `json:"CostCode,omitempty" xml:"CostCode,omitempty"`
	CostName *string `json:"CostName,omitempty" xml:"CostName,omitempty"`
	CostType *string `json:"CostType,omitempty" xml:"CostType,omitempty"`
	CostVal  *int32  `json:"CostVal,omitempty" xml:"CostVal,omitempty"`
	IspLine  *string `json:"IspLine,omitempty" xml:"IspLine,omitempty"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostCode(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostCode = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostName(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostName = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostType(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostType = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostVal(v int32) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostVal = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetIspLine(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.IspLine = &v
	return s
}

type DescribeEpnMeasurementDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEpnMeasurementDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEpnMeasurementDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponse) SetHeaders(v map[string]*string) *DescribeEpnMeasurementDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnMeasurementDataResponse) SetStatusCode(v int32) *DescribeEpnMeasurementDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponse) SetBody(v *DescribeEpnMeasurementDataResponseBody) *DescribeEpnMeasurementDataResponse {
	s.Body = v
	return s
}

type DescribeExportImageInfoRequest struct {
	ImageId    *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName  *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeExportImageInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoRequest) SetImageId(v string) *DescribeExportImageInfoRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeExportImageInfoRequest) SetImageName(v string) *DescribeExportImageInfoRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeExportImageInfoRequest) SetPageNumber(v int32) *DescribeExportImageInfoRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeExportImageInfoRequest) SetPageSize(v int32) *DescribeExportImageInfoRequest {
	s.PageSize = &v
	return s
}

type DescribeExportImageInfoResponseBody struct {
	Images     *DescribeExportImageInfoResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	PageNumber *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeExportImageInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponseBody) SetImages(v *DescribeExportImageInfoResponseBodyImages) *DescribeExportImageInfoResponseBody {
	s.Images = v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetPageNumber(v int32) *DescribeExportImageInfoResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetPageSize(v int32) *DescribeExportImageInfoResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetRequestId(v string) *DescribeExportImageInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetTotalCount(v int32) *DescribeExportImageInfoResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeExportImageInfoResponseBodyImages struct {
	Image []*DescribeExportImageInfoResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeExportImageInfoResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponseBodyImages) SetImage(v []*DescribeExportImageInfoResponseBodyImagesImage) *DescribeExportImageInfoResponseBodyImages {
	s.Image = v
	return s
}

type DescribeExportImageInfoResponseBodyImagesImage struct {
	Architecture      *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	CreationTime      *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ExportedImageURL  *string `json:"ExportedImageURL,omitempty" xml:"ExportedImageURL,omitempty"`
	ImageExportStatus *string `json:"ImageExportStatus,omitempty" xml:"ImageExportStatus,omitempty"`
	ImageId           *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName         *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	ImageOwnerAlias   *string `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	Platform          *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
}

func (s DescribeExportImageInfoResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetArchitecture(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.Architecture = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetCreationTime(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetExportedImageURL(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ExportedImageURL = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageExportStatus(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageExportStatus = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageId(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageName(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageOwnerAlias(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetPlatform(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.Platform = &v
	return s
}

type DescribeExportImageInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExportImageInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExportImageInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponse) SetHeaders(v map[string]*string) *DescribeExportImageInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeExportImageInfoResponse) SetStatusCode(v int32) *DescribeExportImageInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExportImageInfoResponse) SetBody(v *DescribeExportImageInfoResponseBody) *DescribeExportImageInfoResponse {
	s.Body = v
	return s
}

type DescribeExportImageStatusRequest struct {
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeExportImageStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeExportImageStatusRequest) SetImageId(v string) *DescribeExportImageStatusRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeExportImageStatusRequest) SetVersion(v string) *DescribeExportImageStatusRequest {
	s.Version = &v
	return s
}

type DescribeExportImageStatusResponseBody struct {
	ImageExportStatus *string `json:"ImageExportStatus,omitempty" xml:"ImageExportStatus,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExportImageStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExportImageStatusResponseBody) SetImageExportStatus(v string) *DescribeExportImageStatusResponseBody {
	s.ImageExportStatus = &v
	return s
}

func (s *DescribeExportImageStatusResponseBody) SetRequestId(v string) *DescribeExportImageStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExportImageStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeExportImageStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExportImageStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeExportImageStatusResponse) SetHeaders(v map[string]*string) *DescribeExportImageStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeExportImageStatusResponse) SetStatusCode(v int32) *DescribeExportImageStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExportImageStatusResponse) SetBody(v *DescribeExportImageStatusResponseBody) *DescribeExportImageStatusResponse {
	s.Body = v
	return s
}

type DescribeForwardTableEntriesRequest struct {
	ExternalIp       *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ForwardEntryId   *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	InternalIp       *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	IpProtocol       *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	NatGatewayId     *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	PageNumber       *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeForwardTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesRequest) SetExternalIp(v string) *DescribeForwardTableEntriesRequest {
	s.ExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryName(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetInternalIp(v string) *DescribeForwardTableEntriesRequest {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetIpProtocol(v string) *DescribeForwardTableEntriesRequest {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetNatGatewayId(v string) *DescribeForwardTableEntriesRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageNumber(v int32) *DescribeForwardTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageSize(v int32) *DescribeForwardTableEntriesRequest {
	s.PageSize = &v
	return s
}

type DescribeForwardTableEntriesResponseBody struct {
	ForwardTableEntries []*DescribeForwardTableEntriesResponseBodyForwardTableEntries `json:"ForwardTableEntries,omitempty" xml:"ForwardTableEntries,omitempty" type:"Repeated"`
	PageNumber          *string                                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *string                                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount          *string                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeForwardTableEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseBody) SetForwardTableEntries(v []*DescribeForwardTableEntriesResponseBodyForwardTableEntries) *DescribeForwardTableEntriesResponseBody {
	s.ForwardTableEntries = v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetPageNumber(v string) *DescribeForwardTableEntriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetPageSize(v string) *DescribeForwardTableEntriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetRequestId(v string) *DescribeForwardTableEntriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetTotalCount(v string) *DescribeForwardTableEntriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeForwardTableEntriesResponseBodyForwardTableEntries struct {
	ExternalIp       *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort     *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	ForwardEntryId   *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	HealthCheckPort  *string `json:"HealthCheckPort,omitempty" xml:"HealthCheckPort,omitempty"`
	InternalIp       *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort     *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	IpProtocol       *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	NatGatewayId     *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeForwardTableEntriesResponseBodyForwardTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseBodyForwardTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetExternalIp(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetExternalPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ExternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetForwardEntryId(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetForwardEntryName(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ForwardEntryName = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetHealthCheckPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.HealthCheckPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetInternalIp(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetInternalPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.InternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetIpProtocol(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetNatGatewayId(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetStatus(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.Status = &v
	return s
}

type DescribeForwardTableEntriesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeForwardTableEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeForwardTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponse) SetHeaders(v map[string]*string) *DescribeForwardTableEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetStatusCode(v int32) *DescribeForwardTableEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetBody(v *DescribeForwardTableEntriesResponseBody) *DescribeForwardTableEntriesResponse {
	s.Body = v
	return s
}

type DescribeImageInfosRequest struct {
	OsType  *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeImageInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosRequest) SetOsType(v string) *DescribeImageInfosRequest {
	s.OsType = &v
	return s
}

func (s *DescribeImageInfosRequest) SetVersion(v string) *DescribeImageInfosRequest {
	s.Version = &v
	return s
}

type DescribeImageInfosResponseBody struct {
	Code      *int32                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Images    *DescribeImageInfosResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBody) SetCode(v int32) *DescribeImageInfosResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeImageInfosResponseBody) SetImages(v *DescribeImageInfosResponseBodyImages) *DescribeImageInfosResponseBody {
	s.Images = v
	return s
}

func (s *DescribeImageInfosResponseBody) SetRequestId(v string) *DescribeImageInfosResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageInfosResponseBodyImages struct {
	Image []*DescribeImageInfosResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeImageInfosResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBodyImages) SetImage(v []*DescribeImageInfosResponseBodyImagesImage) *DescribeImageInfosResponseBodyImages {
	s.Image = v
	return s
}

type DescribeImageInfosResponseBodyImagesImage struct {
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ImageId      *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageSize    *string `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	ImageVersion *string `json:"ImageVersion,omitempty" xml:"ImageVersion,omitempty"`
	OSName       *string `json:"OSName,omitempty" xml:"OSName,omitempty"`
	OSType       *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
}

func (s DescribeImageInfosResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetDescription(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.Description = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetImageId(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetImageSize(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetImageVersion(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.ImageVersion = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetOSName(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.OSName = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetOSType(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.OSType = &v
	return s
}

type DescribeImageInfosResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponse) SetHeaders(v map[string]*string) *DescribeImageInfosResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageInfosResponse) SetStatusCode(v int32) *DescribeImageInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageInfosResponse) SetBody(v *DescribeImageInfosResponseBody) *DescribeImageInfosResponse {
	s.Body = v
	return s
}

type DescribeImageSharePermissionRequest struct {
	AliyunId   *int64  `json:"AliyunId,omitempty" xml:"AliyunId,omitempty"`
	ImageId    *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionRequest) SetAliyunId(v int64) *DescribeImageSharePermissionRequest {
	s.AliyunId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetImageId(v string) *DescribeImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageNumber(v string) *DescribeImageSharePermissionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageSize(v string) *DescribeImageSharePermissionRequest {
	s.PageSize = &v
	return s
}

type DescribeImageSharePermissionResponseBody struct {
	Accounts   *DescribeImageSharePermissionResponseBodyAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Struct"`
	ImageId    *string                                           `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	PageNumber *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageSharePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBody) SetAccounts(v *DescribeImageSharePermissionResponseBodyAccounts) *DescribeImageSharePermissionResponseBody {
	s.Accounts = v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetImageId(v string) *DescribeImageSharePermissionResponseBody {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetPageNumber(v int32) *DescribeImageSharePermissionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetPageSize(v int32) *DescribeImageSharePermissionResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetRequestId(v string) *DescribeImageSharePermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetTotalCount(v int32) *DescribeImageSharePermissionResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImageSharePermissionResponseBodyAccounts struct {
	Account []*string `json:"Account,omitempty" xml:"Account,omitempty" type:"Repeated"`
}

func (s DescribeImageSharePermissionResponseBodyAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBodyAccounts) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBodyAccounts) SetAccount(v []*string) *DescribeImageSharePermissionResponseBodyAccounts {
	s.Account = v
	return s
}

type DescribeImageSharePermissionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImageSharePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponse) SetHeaders(v map[string]*string) *DescribeImageSharePermissionResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetStatusCode(v int32) *DescribeImageSharePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetBody(v *DescribeImageSharePermissionResponseBody) *DescribeImageSharePermissionResponse {
	s.Body = v
	return s
}

type DescribeImagesRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	ImageId     *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName   *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	PageNumber  *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
	Product     *string `json:"product,omitempty" xml:"product,omitempty"`
}

func (s DescribeImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequest) SetEnsRegionId(v string) *DescribeImagesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeImagesRequest) SetImageId(v string) *DescribeImagesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesRequest) SetImageName(v string) *DescribeImagesRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesRequest) SetPageNumber(v string) *DescribeImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesRequest) SetPageSize(v string) *DescribeImagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesRequest) SetStatus(v string) *DescribeImagesRequest {
	s.Status = &v
	return s
}

func (s *DescribeImagesRequest) SetVersion(v string) *DescribeImagesRequest {
	s.Version = &v
	return s
}

func (s *DescribeImagesRequest) SetProduct(v string) *DescribeImagesRequest {
	s.Product = &v
	return s
}

type DescribeImagesResponseBody struct {
	Code       *int32                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Images     *DescribeImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBody) SetCode(v int32) *DescribeImagesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeImagesResponseBody) SetImages(v *DescribeImagesResponseBodyImages) *DescribeImagesResponseBody {
	s.Images = v
	return s
}

func (s *DescribeImagesResponseBody) SetPageNumber(v int32) *DescribeImagesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesResponseBody) SetPageSize(v int32) *DescribeImagesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesResponseBody) SetRequestId(v string) *DescribeImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImagesResponseBody) SetTotalCount(v int32) *DescribeImagesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImagesResponseBodyImages struct {
	Image []*DescribeImagesResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeImagesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImages) SetImage(v []*DescribeImagesResponseBodyImagesImage) *DescribeImagesResponseBodyImages {
	s.Image = v
	return s
}

type DescribeImagesResponseBodyImagesImage struct {
	Architecture    *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ImageId         *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName       *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	ImageOwnerAlias *string `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	ImageSize       *string `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	Platform        *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
}

func (s DescribeImagesResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImagesImage) SetArchitecture(v string) *DescribeImagesResponseBodyImagesImage {
	s.Architecture = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetCreationTime(v string) *DescribeImagesResponseBodyImagesImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageId(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageName(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageOwnerAlias(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageSize(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetPlatform(v string) *DescribeImagesResponseBodyImagesImage {
	s.Platform = &v
	return s
}

type DescribeImagesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeImagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponse) SetHeaders(v map[string]*string) *DescribeImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImagesResponse) SetStatusCode(v int32) *DescribeImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImagesResponse) SetBody(v *DescribeImagesResponseBody) *DescribeImagesResponse {
	s.Body = v
	return s
}

type DescribeInstanceAutoRenewAttributeRequest struct {
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetInstanceIds(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetOwnerId(v int64) *DescribeInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetVersion(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.Version = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBody struct {
	Code                    *int32                                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceRenewAttributes *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes `json:"InstanceRenewAttributes,omitempty" xml:"InstanceRenewAttributes,omitempty" type:"Struct"`
	RequestId               *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetCode(v int32) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetInstanceRenewAttributes(v *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.InstanceRenewAttributes = v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetRequestId(v string) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes struct {
	InstanceRenewAttribute []*DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute `json:"InstanceRenewAttribute,omitempty" xml:"InstanceRenewAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) SetInstanceRenewAttribute(v []*DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes {
	s.InstanceRenewAttribute = v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute struct {
	AutoRenewal *bool   `json:"AutoRenewal,omitempty" xml:"AutoRenewal,omitempty"`
	Duration    *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetAutoRenewal(v bool) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.AutoRenewal = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetDuration(v string) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.Duration = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.InstanceId = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *DescribeInstanceAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetStatusCode(v int32) *DescribeInstanceAutoRenewAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetBody(v *DescribeInstanceAutoRenewAttributeResponseBody) *DescribeInstanceAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type DescribeInstanceMonitorDataRequest struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Period     *string `json:"Period,omitempty" xml:"Period,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Version    *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeInstanceMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataRequest) SetEndTime(v string) *DescribeInstanceMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetInstanceId(v string) *DescribeInstanceMonitorDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetPeriod(v string) *DescribeInstanceMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetStartTime(v string) *DescribeInstanceMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetVersion(v string) *DescribeInstanceMonitorDataRequest {
	s.Version = &v
	return s
}

type DescribeInstanceMonitorDataResponseBody struct {
	Code        *int32                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	MonitorData *DescribeInstanceMonitorDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Struct"`
	RequestId   *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBody) SetCode(v int32) *DescribeInstanceMonitorDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBody) SetMonitorData(v *DescribeInstanceMonitorDataResponseBodyMonitorData) *DescribeInstanceMonitorDataResponseBody {
	s.MonitorData = v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBody) SetRequestId(v string) *DescribeInstanceMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceMonitorDataResponseBodyMonitorData struct {
	InstanceMonitorData []*DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData `json:"InstanceMonitorData,omitempty" xml:"InstanceMonitorData,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetInstanceMonitorData(v []*DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.InstanceMonitorData = v
	return s
}

type DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData struct {
	CPU        *string `json:"CPU,omitempty" xml:"CPU,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Memory     *string `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) SetCPU(v string) *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData {
	s.CPU = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) SetInstanceId(v string) *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) SetMemory(v string) *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData {
	s.Memory = &v
	return s
}

type DescribeInstanceMonitorDataResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeInstanceMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceMonitorDataResponse) SetStatusCode(v int32) *DescribeInstanceMonitorDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponse) SetBody(v *DescribeInstanceMonitorDataResponseBody) *DescribeInstanceMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeInstanceSpecRequest struct {
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecRequest) SetVersion(v string) *DescribeInstanceSpecRequest {
	s.Version = &v
	return s
}

type DescribeInstanceSpecResponseBody struct {
	BandwidthLimit    *int32                                         `json:"BandwidthLimit,omitempty" xml:"BandwidthLimit,omitempty"`
	Code              *int32                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	DataDiskMaxSize   *int32                                         `json:"DataDiskMaxSize,omitempty" xml:"DataDiskMaxSize,omitempty"`
	DataDiskMinSize   *int32                                         `json:"DataDiskMinSize,omitempty" xml:"DataDiskMinSize,omitempty"`
	InstanceSpecs     *DescribeInstanceSpecResponseBodyInstanceSpecs `json:"InstanceSpecs,omitempty" xml:"InstanceSpecs,omitempty" type:"Struct"`
	RequestId         *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SystemDiskMaxSize *int32                                         `json:"SystemDiskMaxSize,omitempty" xml:"SystemDiskMaxSize,omitempty"`
}

func (s DescribeInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponseBody) SetBandwidthLimit(v int32) *DescribeInstanceSpecResponseBody {
	s.BandwidthLimit = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetCode(v int32) *DescribeInstanceSpecResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetDataDiskMaxSize(v int32) *DescribeInstanceSpecResponseBody {
	s.DataDiskMaxSize = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetDataDiskMinSize(v int32) *DescribeInstanceSpecResponseBody {
	s.DataDiskMinSize = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetInstanceSpecs(v *DescribeInstanceSpecResponseBodyInstanceSpecs) *DescribeInstanceSpecResponseBody {
	s.InstanceSpecs = v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetRequestId(v string) *DescribeInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetSystemDiskMaxSize(v int32) *DescribeInstanceSpecResponseBody {
	s.SystemDiskMaxSize = &v
	return s
}

type DescribeInstanceSpecResponseBodyInstanceSpecs struct {
	InstanceSpec []*DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty" type:"Repeated"`
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecs) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecs) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecs) SetInstanceSpec(v []*DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) *DescribeInstanceSpecResponseBodyInstanceSpecs {
	s.InstanceSpec = v
	return s
}

type DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec struct {
	Core         *string `json:"Core,omitempty" xml:"Core,omitempty"`
	DisplayName  *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Memory       *string `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetCore(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.Core = &v
	return s
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetDisplayName(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.DisplayName = &v
	return s
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetInstanceType(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetMemory(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.Memory = &v
	return s
}

type DescribeInstanceSpecResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponse) SetHeaders(v map[string]*string) *DescribeInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSpecResponse) SetStatusCode(v int32) *DescribeInstanceSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSpecResponse) SetBody(v *DescribeInstanceSpecResponseBody) *DescribeInstanceSpecResponse {
	s.Body = v
	return s
}

type DescribeInstanceTypesRequest struct {
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeInstanceTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesRequest) SetVersion(v string) *DescribeInstanceTypesRequest {
	s.Version = &v
	return s
}

type DescribeInstanceTypesResponseBody struct {
	Code          *int32                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceTypes *DescribeInstanceTypesResponseBodyInstanceTypes `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Struct"`
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBody) SetCode(v int32) *DescribeInstanceTypesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceTypesResponseBody) SetInstanceTypes(v *DescribeInstanceTypesResponseBodyInstanceTypes) *DescribeInstanceTypesResponseBody {
	s.InstanceTypes = v
	return s
}

func (s *DescribeInstanceTypesResponseBody) SetRequestId(v string) *DescribeInstanceTypesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceTypesResponseBodyInstanceTypes struct {
	InstanceType []*DescribeInstanceTypesResponseBodyInstanceTypesInstanceType `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTypesResponseBodyInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBodyInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstanceType(v []*DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstanceType = v
	return s
}

type DescribeInstanceTypesResponseBodyInstanceTypesInstanceType struct {
	CpuCoreCount     *int32  `json:"CpuCoreCount,omitempty" xml:"CpuCoreCount,omitempty"`
	InstanceTypeId   *string `json:"InstanceTypeId,omitempty" xml:"InstanceTypeId,omitempty"`
	InstanceTypeName *string `json:"InstanceTypeName,omitempty" xml:"InstanceTypeName,omitempty"`
	MemorySize       *int32  `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
}

func (s DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetCpuCoreCount(v int32) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.CpuCoreCount = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetInstanceTypeId(v string) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.InstanceTypeId = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetInstanceTypeName(v string) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.InstanceTypeName = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetMemorySize(v int32) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.MemorySize = &v
	return s
}

type DescribeInstanceTypesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceTypesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponse) SetHeaders(v map[string]*string) *DescribeInstanceTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTypesResponse) SetStatusCode(v int32) *DescribeInstanceTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTypesResponse) SetBody(v *DescribeInstanceTypesResponseBody) *DescribeInstanceTypesResponse {
	s.Body = v
	return s
}

type DescribeInstanceVncUrlRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceVncUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlRequest) SetInstanceId(v string) *DescribeInstanceVncUrlRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceVncUrlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VncUrl    *string `json:"VncUrl,omitempty" xml:"VncUrl,omitempty"`
}

func (s DescribeInstanceVncUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponseBody) SetRequestId(v string) *DescribeInstanceVncUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceVncUrlResponseBody) SetVncUrl(v string) *DescribeInstanceVncUrlResponseBody {
	s.VncUrl = &v
	return s
}

type DescribeInstanceVncUrlResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceVncUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceVncUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponse) SetHeaders(v map[string]*string) *DescribeInstanceVncUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetStatusCode(v int32) *DescribeInstanceVncUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetBody(v *DescribeInstanceVncUrlResponseBody) *DescribeInstanceVncUrlResponse {
	s.Body = v
	return s
}

type DescribeInstancesRequest struct {
	EnsRegionId          *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionIds         *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	EnsServiceId         *string `json:"EnsServiceId,omitempty" xml:"EnsServiceId,omitempty"`
	ImageId              *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceId           *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceIds          *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	InstanceName         *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceResourceType *string `json:"InstanceResourceType,omitempty" xml:"InstanceResourceType,omitempty"`
	NetworkId            *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	OrderByParams        *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchKey            *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetEnsRegionId(v string) *DescribeInstancesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstancesRequest) SetEnsRegionIds(v string) *DescribeInstancesRequest {
	s.EnsRegionIds = &v
	return s
}

func (s *DescribeInstancesRequest) SetEnsServiceId(v string) *DescribeInstancesRequest {
	s.EnsServiceId = &v
	return s
}

func (s *DescribeInstancesRequest) SetImageId(v string) *DescribeInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceId(v string) *DescribeInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceIds(v string) *DescribeInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceName(v string) *DescribeInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceResourceType(v string) *DescribeInstancesRequest {
	s.InstanceResourceType = &v
	return s
}

func (s *DescribeInstancesRequest) SetNetworkId(v string) *DescribeInstancesRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeInstancesRequest) SetOrderByParams(v string) *DescribeInstancesRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageNumber(v int32) *DescribeInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageSize(v string) *DescribeInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesRequest) SetSearchKey(v string) *DescribeInstancesRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeInstancesRequest) SetSecurityGroupId(v string) *DescribeInstancesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetStatus(v string) *DescribeInstancesRequest {
	s.Status = &v
	return s
}

func (s *DescribeInstancesRequest) SetVSwitchId(v string) *DescribeInstancesRequest {
	s.VSwitchId = &v
	return s
}

type DescribeInstancesResponseBody struct {
	Code       *int32                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	Instances  *DescribeInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBody) SetCode(v int32) *DescribeInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetInstances(v *DescribeInstancesResponseBodyInstances) *DescribeInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageNumber(v int32) *DescribeInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageSize(v int32) *DescribeInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetRequestId(v string) *DescribeInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetTotalCount(v int32) *DescribeInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstancesResponseBodyInstances struct {
	Instance []*DescribeInstancesResponseBodyInstancesInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstances) SetInstance(v []*DescribeInstancesResponseBodyInstancesInstance) *DescribeInstancesResponseBodyInstances {
	s.Instance = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstance struct {
	Cpu                     *string                                                           `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreationTime            *string                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DataDisk                *DescribeInstancesResponseBodyInstancesInstanceDataDisk           `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Struct"`
	Disk                    *int32                                                            `json:"Disk,omitempty" xml:"Disk,omitempty"`
	EnsRegionId             *string                                                           `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	ExpiredTime             *string                                                           `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HostName                *string                                                           `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ImageId                 *string                                                           `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InnerIpAddress          *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress     `json:"InnerIpAddress,omitempty" xml:"InnerIpAddress,omitempty" type:"Struct"`
	InstanceId              *string                                                           `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName            *string                                                           `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceResourceType    *string                                                           `json:"InstanceResourceType,omitempty" xml:"InstanceResourceType,omitempty"`
	InstanceTypeFamily      *string                                                           `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	InternetMaxBandwidthIn  *int32                                                            `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	InternetMaxBandwidthOut *int32                                                            `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	Memory                  *int32                                                            `json:"Memory,omitempty" xml:"Memory,omitempty"`
	NetworkAttributes       *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes  `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	OSName                  *string                                                           `json:"OSName,omitempty" xml:"OSName,omitempty"`
	PrivateIpAddresses      *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses `json:"PrivateIpAddresses,omitempty" xml:"PrivateIpAddresses,omitempty" type:"Struct"`
	PublicIpAddress         *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress    `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty" type:"Struct"`
	PublicIpAddresses       *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses  `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty" type:"Struct"`
	SecurityGroupIds        *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds   `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Struct"`
	SpecName                *string                                                           `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	Status                  *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	SystemDisk              *DescribeInstancesResponseBodyInstancesInstanceSystemDisk         `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
}

func (s DescribeInstancesResponseBodyInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetCpu(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.Cpu = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetCreationTime(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetDataDisk(v *DescribeInstancesResponseBodyInstancesInstanceDataDisk) *DescribeInstancesResponseBodyInstancesInstance {
	s.DataDisk = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetDisk(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.Disk = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetEnsRegionId(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetExpiredTime(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetHostName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.HostName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetImageId(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInnerIpAddress(v *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) *DescribeInstancesResponseBodyInstancesInstance {
	s.InnerIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceId(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceResourceType(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceResourceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceTypeFamily(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInternetMaxBandwidthIn(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInternetMaxBandwidthOut(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetMemory(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.Memory = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetNetworkAttributes(v *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) *DescribeInstancesResponseBodyInstancesInstance {
	s.NetworkAttributes = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetOSName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.OSName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetPrivateIpAddresses(v *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) *DescribeInstancesResponseBodyInstancesInstance {
	s.PrivateIpAddresses = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetPublicIpAddress(v *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) *DescribeInstancesResponseBodyInstancesInstance {
	s.PublicIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetPublicIpAddresses(v *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) *DescribeInstancesResponseBodyInstancesInstance {
	s.PublicIpAddresses = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetSecurityGroupIds(v *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) *DescribeInstancesResponseBodyInstancesInstance {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetSpecName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.SpecName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetStatus(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.Status = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetSystemDisk(v *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) *DescribeInstancesResponseBodyInstancesInstance {
	s.SystemDisk = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceDataDisk struct {
	DataDisk []*DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDisk) SetDataDisk(v []*DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) *DescribeInstancesResponseBodyInstancesInstanceDataDisk {
	s.DataDisk = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk struct {
	Category   *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DiskId     *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskName   *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Size       *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	DeviceType *string `json:"device_type,omitempty" xml:"device_type,omitempty"`
	DiskType   *string `json:"disk_type,omitempty" xml:"disk_type,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
	Storage    *int32  `json:"storage,omitempty" xml:"storage,omitempty"`
	Uuid       *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetCategory(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Category = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDiskId(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DiskId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDiskName(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetSize(v int32) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Size = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDeviceType(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDiskType(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DiskType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetName(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Name = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetStorage(v int32) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Storage = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetUuid(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Uuid = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress struct {
	IpAddress []*string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes struct {
	NetworkId        *string                                                                          `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	PrivateIpAddress *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Struct"`
	VSwitchId        *string                                                                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) SetNetworkId(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes {
	s.NetworkId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) SetPrivateIpAddress(v *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes {
	s.PrivateIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) SetVSwitchId(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes {
	s.VSwitchId = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress struct {
	IpAddress []*string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses struct {
	PrivateIpAddress []*DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) SetPrivateIpAddress(v []*DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses {
	s.PrivateIpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress struct {
	GateWay *string `json:"GateWay,omitempty" xml:"GateWay,omitempty"`
	Ip      *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Isp     *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) SetGateWay(v string) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress {
	s.GateWay = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) SetIp(v string) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress {
	s.Ip = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) SetIsp(v string) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress {
	s.Isp = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePublicIpAddress struct {
	IpAddress []*string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses struct {
	PublicIpAddress []*DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) SetPublicIpAddress(v []*DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses {
	s.PublicIpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress struct {
	GateWay *string `json:"GateWay,omitempty" xml:"GateWay,omitempty"`
	Ip      *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Isp     *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) SetGateWay(v string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress {
	s.GateWay = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) SetIp(v string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress {
	s.Ip = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) SetIsp(v string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress {
	s.Isp = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds struct {
	SecurityGroupId []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) SetSecurityGroupId(v []*string) *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds {
	s.SecurityGroupId = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceSystemDisk struct {
	Category   *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DiskId     *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskName   *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Size       *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	DeviceType *string `json:"device_type,omitempty" xml:"device_type,omitempty"`
	DiskType   *string `json:"disk_type,omitempty" xml:"disk_type,omitempty"`
	Name       *string `json:"name,omitempty" xml:"name,omitempty"`
	Storage    *int32  `json:"storage,omitempty" xml:"storage,omitempty"`
	Uuid       *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetCategory(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Category = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDiskId(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DiskId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDiskName(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetSize(v int32) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Size = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDeviceType(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDiskType(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DiskType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetName(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Name = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetStorage(v int32) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Storage = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetUuid(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Uuid = &v
	return s
}

type DescribeInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetHeaders(v map[string]*string) *DescribeInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesResponse) SetStatusCode(v int32) *DescribeInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancesResponse) SetBody(v *DescribeInstancesResponseBody) *DescribeInstancesResponse {
	s.Body = v
	return s
}

type DescribeKeyPairsRequest struct {
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	PageNumber  *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsRequest) SetKeyPairName(v string) *DescribeKeyPairsRequest {
	s.KeyPairName = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageNumber(v string) *DescribeKeyPairsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageSize(v string) *DescribeKeyPairsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetVersion(v string) *DescribeKeyPairsRequest {
	s.Version = &v
	return s
}

type DescribeKeyPairsResponseBody struct {
	KeyPairs   *DescribeKeyPairsResponseBodyKeyPairs `json:"KeyPairs,omitempty" xml:"KeyPairs,omitempty" type:"Struct"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeKeyPairsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBody) SetKeyPairs(v *DescribeKeyPairsResponseBodyKeyPairs) *DescribeKeyPairsResponseBody {
	s.KeyPairs = v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetPageNumber(v int32) *DescribeKeyPairsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetPageSize(v int32) *DescribeKeyPairsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetRequestId(v string) *DescribeKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetTotalCount(v int32) *DescribeKeyPairsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeKeyPairsResponseBodyKeyPairs struct {
	KeyPair []*DescribeKeyPairsResponseBodyKeyPairsKeyPair `json:"KeyPair,omitempty" xml:"KeyPair,omitempty" type:"Repeated"`
}

func (s DescribeKeyPairsResponseBodyKeyPairs) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBodyKeyPairs) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBodyKeyPairs) SetKeyPair(v []*DescribeKeyPairsResponseBodyKeyPairsKeyPair) *DescribeKeyPairsResponseBodyKeyPairs {
	s.KeyPair = v
	return s
}

type DescribeKeyPairsResponseBodyKeyPairsKeyPair struct {
	CreationTime       *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	KeyPairName        *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
}

func (s DescribeKeyPairsResponseBodyKeyPairsKeyPair) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBodyKeyPairsKeyPair) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBodyKeyPairsKeyPair) SetCreationTime(v string) *DescribeKeyPairsResponseBodyKeyPairsKeyPair {
	s.CreationTime = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairsKeyPair) SetKeyPairFingerPrint(v string) *DescribeKeyPairsResponseBodyKeyPairsKeyPair {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairsKeyPair) SetKeyPairName(v string) *DescribeKeyPairsResponseBodyKeyPairsKeyPair {
	s.KeyPairName = &v
	return s
}

type DescribeKeyPairsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponse) SetHeaders(v map[string]*string) *DescribeKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *DescribeKeyPairsResponse) SetStatusCode(v int32) *DescribeKeyPairsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeKeyPairsResponse) SetBody(v *DescribeKeyPairsResponseBody) *DescribeKeyPairsResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerAttributeRequest struct {
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerAttributeResponseBody struct {
	Address                   *string                                                               `json:"Address,omitempty" xml:"Address,omitempty"`
	AddressIPVersion          *string                                                               `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	BackendServers            []*DescribeLoadBalancerAttributeResponseBodyBackendServers            `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	Bandwidth                 *int32                                                                `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	CreateTime                *string                                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EndTime                   *string                                                               `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnsRegionId               *string                                                               `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	ListenerPorts             []*string                                                             `json:"ListenerPorts,omitempty" xml:"ListenerPorts,omitempty" type:"Repeated"`
	ListenerPortsAndProtocols []*DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols `json:"ListenerPortsAndProtocols,omitempty" xml:"ListenerPortsAndProtocols,omitempty" type:"Repeated"`
	LoadBalancerId            *string                                                               `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	LoadBalancerName          *string                                                               `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	LoadBalancerSpec          *string                                                               `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
	LoadBalancerStatus        *string                                                               `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
	NetworkId                 *string                                                               `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	PayType                   *string                                                               `json:"PayType,omitempty" xml:"PayType,omitempty"`
	RequestId                 *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VSwitchId                 *string                                                               `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeLoadBalancerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetAddress(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.Address = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetAddressIPVersion(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.AddressIPVersion = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetBackendServers(v []*DescribeLoadBalancerAttributeResponseBodyBackendServers) *DescribeLoadBalancerAttributeResponseBody {
	s.BackendServers = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetCreateTime(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetEndTime(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetEnsRegionId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetListenerPorts(v []*string) *DescribeLoadBalancerAttributeResponseBody {
	s.ListenerPorts = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetListenerPortsAndProtocols(v []*DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) *DescribeLoadBalancerAttributeResponseBody {
	s.ListenerPortsAndProtocols = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerName(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerSpec(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerSpec = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerStatus(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerStatus = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetNetworkId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.NetworkId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetPayType(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.PayType = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetVSwitchId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.VSwitchId = &v
	return s
}

type DescribeLoadBalancerAttributeResponseBodyBackendServers struct {
	Ip       *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Port     *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Weight   *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s DescribeLoadBalancerAttributeResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetIp(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Ip = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetPort(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Port = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetServerId(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.ServerId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetType(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Type = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetWeight(v int32) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Weight = &v
	return s
}

type DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols struct {
	Description      *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ForwardPort      *int32  `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	ListenerForward  *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	ListenerPort     *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
}

func (s DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetDescription(v string) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetForwardPort(v int32) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ForwardPort = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetListenerForward(v string) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ListenerForward = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetListenerPort(v int32) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetListenerProtocol(v string) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ListenerProtocol = &v
	return s
}

type DescribeLoadBalancerAttributeResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoadBalancerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoadBalancerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponse) SetBody(v *DescribeLoadBalancerAttributeResponseBody) *DescribeLoadBalancerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerHTTPListenerAttributeRequest struct {
	ListenerPort   *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerHTTPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerHTTPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerHTTPListenerAttributeResponseBody struct {
	Bandwidth              *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ForwardPort            *int32  `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	HealthCheck            *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckDomain      *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode    *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval    *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod      *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout     *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckURI         *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold       *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	IdleTimeout            *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	ListenerForward        *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	ListenerPort           *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RequestTimeout         *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler              *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServerCertificateId    *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	Status                 *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UnhealthyThreshold     *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetForwardPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ForwardPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckDomain(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckDomain = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckHttpCode(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckMethod(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckMethod = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckTimeout(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckURI(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckURI = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetIdleTimeout(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.IdleTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetListenerForward(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ListenerForward = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetRequestTimeout(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.RequestTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetServerCertificateId(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ServerCertificateId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

type DescribeLoadBalancerHTTPListenerAttributeResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoadBalancerHTTPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerHTTPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponse) SetBody(v *DescribeLoadBalancerHTTPListenerAttributeResponseBody) *DescribeLoadBalancerHTTPListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerHTTPSListenerAttributeRequest struct {
	ListenerPort   *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerHTTPSListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPSListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerHTTPSListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerHTTPSListenerAttributeResponseBody struct {
	Bandwidth              *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ForwardPort            *int32  `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	HealthCheck            *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckDomain      *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode    *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval    *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod      *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout     *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckURI         *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold       *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	IdleTimeout            *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	ListenerForward        *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	ListenerPort           *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RequestTimeout         *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler              *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServerCertificateId    *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	Status                 *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UnhealthyThreshold     *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetForwardPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ForwardPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckDomain(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckDomain = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckHttpCode(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckMethod(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckMethod = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckTimeout(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckURI(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckURI = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetIdleTimeout(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.IdleTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetListenerForward(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ListenerForward = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetRequestTimeout(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.RequestTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetServerCertificateId(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ServerCertificateId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

type DescribeLoadBalancerHTTPSListenerAttributeResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoadBalancerHTTPSListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerHTTPSListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponse) SetBody(v *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) *DescribeLoadBalancerHTTPSListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerSpecRequest struct {
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
}

func (s DescribeLoadBalancerSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecRequest) SetLoadBalancerSpec(v string) *DescribeLoadBalancerSpecRequest {
	s.LoadBalancerSpec = &v
	return s
}

type DescribeLoadBalancerSpecResponseBody struct {
	LoadBalancerSpecs []*DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs `json:"LoadBalancerSpecs,omitempty" xml:"LoadBalancerSpecs,omitempty" type:"Repeated"`
	PageNumber        *int32                                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount        *int32                                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLoadBalancerSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecResponseBody) SetLoadBalancerSpecs(v []*DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) *DescribeLoadBalancerSpecResponseBody {
	s.LoadBalancerSpecs = v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetPageNumber(v int32) *DescribeLoadBalancerSpecResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetPageSize(v int32) *DescribeLoadBalancerSpecResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetRequestId(v string) *DescribeLoadBalancerSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetTotalCount(v int32) *DescribeLoadBalancerSpecResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs struct {
	DisplayName      *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
}

func (s DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) SetDisplayName(v string) *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs {
	s.DisplayName = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) SetLoadBalancerSpec(v string) *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs {
	s.LoadBalancerSpec = &v
	return s
}

type DescribeLoadBalancerSpecResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoadBalancerSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoadBalancerSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerSpecResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerSpecResponse) SetStatusCode(v int32) *DescribeLoadBalancerSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponse) SetBody(v *DescribeLoadBalancerSpecResponseBody) *DescribeLoadBalancerSpecResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerTCPListenerAttributeRequest struct {
	ListenerPort   *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerTCPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerTCPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerTCPListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerTCPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerTCPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerTCPListenerAttributeResponseBody struct {
	BackendServerPort         *int32  `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	Bandwidth                 *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EipTransmit               *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	EstablishedTimeout        *int32  `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	HealthCheck               *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckDomain         *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode       *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckType           *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	HealthCheckURI            *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	ListenerPort              *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	PersistenceTimeout        *int32  `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	RequestId                 *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Scheduler                 *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	Status                    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s DescribeLoadBalancerTCPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerTCPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetBackendServerPort(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetEipTransmit(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.EipTransmit = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetEstablishedTimeout(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.EstablishedTimeout = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckConnectTimeout(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckDomain(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckDomain = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckHttpCode(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckType(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckType = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckURI(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckURI = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetPersistenceTimeout(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.PersistenceTimeout = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

type DescribeLoadBalancerTCPListenerAttributeResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoadBalancerTCPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoadBalancerTCPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerTCPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerTCPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerTCPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponse) SetBody(v *DescribeLoadBalancerTCPListenerAttributeResponseBody) *DescribeLoadBalancerTCPListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerUDPListenerAttributeRequest struct {
	ListenerPort   *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerUDPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerUDPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerUDPListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerUDPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerUDPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerUDPListenerAttributeResponseBody struct {
	BackendServerPort         *int32  `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	Bandwidth                 *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EipTransmit               *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	HealthCheck               *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckExp            *string `json:"HealthCheckExp,omitempty" xml:"HealthCheckExp,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckReq            *string `json:"HealthCheckReq,omitempty" xml:"HealthCheckReq,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	ListenerPort              *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	RequestId                 *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Scheduler                 *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	Status                    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s DescribeLoadBalancerUDPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerUDPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetBackendServerPort(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetEipTransmit(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.EipTransmit = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckConnectTimeout(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckExp(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckExp = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckReq(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckReq = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

type DescribeLoadBalancerUDPListenerAttributeResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoadBalancerUDPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoadBalancerUDPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerUDPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerUDPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerUDPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponse) SetBody(v *DescribeLoadBalancerUDPListenerAttributeResponseBody) *DescribeLoadBalancerUDPListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancersRequest struct {
	Address            *string `json:"Address,omitempty" xml:"Address,omitempty"`
	EnsRegionId        *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	LoadBalancerId     *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	LoadBalancerName   *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	LoadBalancerStatus *string `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
	NetworkId          *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	PageNumber         *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ServerId           *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	VSwitchId          *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeLoadBalancersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersRequest) SetAddress(v string) *DescribeLoadBalancersRequest {
	s.Address = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetEnsRegionId(v string) *DescribeLoadBalancersRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetLoadBalancerId(v string) *DescribeLoadBalancersRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetLoadBalancerName(v string) *DescribeLoadBalancersRequest {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetLoadBalancerStatus(v string) *DescribeLoadBalancersRequest {
	s.LoadBalancerStatus = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetNetworkId(v string) *DescribeLoadBalancersRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetPageNumber(v int32) *DescribeLoadBalancersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetPageSize(v int32) *DescribeLoadBalancersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetServerId(v string) *DescribeLoadBalancersRequest {
	s.ServerId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetVSwitchId(v string) *DescribeLoadBalancersRequest {
	s.VSwitchId = &v
	return s
}

type DescribeLoadBalancersResponseBody struct {
	LoadBalancers *DescribeLoadBalancersResponseBodyLoadBalancers `json:"LoadBalancers,omitempty" xml:"LoadBalancers,omitempty" type:"Struct"`
	PageNumber    *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount    *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLoadBalancersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponseBody) SetLoadBalancers(v *DescribeLoadBalancersResponseBodyLoadBalancers) *DescribeLoadBalancersResponseBody {
	s.LoadBalancers = v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetPageNumber(v int32) *DescribeLoadBalancersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetPageSize(v int32) *DescribeLoadBalancersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetRequestId(v string) *DescribeLoadBalancersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetTotalCount(v int32) *DescribeLoadBalancersResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLoadBalancersResponseBodyLoadBalancers struct {
	LoadBalancer []*DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer `json:"LoadBalancer,omitempty" xml:"LoadBalancer,omitempty" type:"Repeated"`
}

func (s DescribeLoadBalancersResponseBodyLoadBalancers) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponseBodyLoadBalancers) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancers) SetLoadBalancer(v []*DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) *DescribeLoadBalancersResponseBodyLoadBalancers {
	s.LoadBalancer = v
	return s
}

type DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer struct {
	Address            *string `json:"Address,omitempty" xml:"Address,omitempty"`
	AddressIPVersion   *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	CreateTime         *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	EnsRegionId        *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	LoadBalancerId     *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	LoadBalancerName   *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	LoadBalancerStatus *string `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
	NetworkId          *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	PayType            *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	VSwitchId          *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetAddress(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.Address = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetAddressIPVersion(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.AddressIPVersion = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetCreateTime(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.CreateTime = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetEnsRegionId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetLoadBalancerId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetLoadBalancerName(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetLoadBalancerStatus(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.LoadBalancerStatus = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetNetworkId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.NetworkId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetPayType(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.PayType = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetVSwitchId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.VSwitchId = &v
	return s
}

type DescribeLoadBalancersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLoadBalancersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLoadBalancersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancersResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancersResponse) SetStatusCode(v int32) *DescribeLoadBalancersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancersResponse) SetBody(v *DescribeLoadBalancersResponseBody) *DescribeLoadBalancersResponse {
	s.Body = v
	return s
}

type DescribeMeasurementDataRequest struct {
	EndDate   *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	Version   *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeMeasurementDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataRequest) SetEndDate(v string) *DescribeMeasurementDataRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeMeasurementDataRequest) SetStartDate(v string) *DescribeMeasurementDataRequest {
	s.StartDate = &v
	return s
}

func (s *DescribeMeasurementDataRequest) SetVersion(v string) *DescribeMeasurementDataRequest {
	s.Version = &v
	return s
}

type DescribeMeasurementDataResponseBody struct {
	MeasurementDatas *DescribeMeasurementDataResponseBodyMeasurementDatas `json:"MeasurementDatas,omitempty" xml:"MeasurementDatas,omitempty" type:"Struct"`
	RequestId        *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeasurementDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBody) SetMeasurementDatas(v *DescribeMeasurementDataResponseBodyMeasurementDatas) *DescribeMeasurementDataResponseBody {
	s.MeasurementDatas = v
	return s
}

func (s *DescribeMeasurementDataResponseBody) SetRequestId(v string) *DescribeMeasurementDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatas struct {
	MeasurementData []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData `json:"MeasurementData,omitempty" xml:"MeasurementData,omitempty" type:"Repeated"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatas) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatas) SetMeasurementData(v []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) *DescribeMeasurementDataResponseBodyMeasurementDatas {
	s.MeasurementData = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData struct {
	BandWidthFeeDatas      *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas      `json:"BandWidthFeeDatas,omitempty" xml:"BandWidthFeeDatas,omitempty" type:"Struct"`
	ChargeModel            *string                                                                                   `json:"ChargeModel,omitempty" xml:"ChargeModel,omitempty"`
	CostCycle              *string                                                                                   `json:"CostCycle,omitempty" xml:"CostCycle,omitempty"`
	CostEndTime            *string                                                                                   `json:"CostEndTime,omitempty" xml:"CostEndTime,omitempty"`
	CostStartTime          *string                                                                                   `json:"CostStartTime,omitempty" xml:"CostStartTime,omitempty"`
	ResourceFeeData        *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData        `json:"ResourceFeeData,omitempty" xml:"ResourceFeeData,omitempty" type:"Struct"`
	ResourceFeeDataDetails *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails `json:"ResourceFeeDataDetails,omitempty" xml:"ResourceFeeDataDetails,omitempty" type:"Struct"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetBandWidthFeeDatas(v *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.BandWidthFeeDatas = v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetChargeModel(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ChargeModel = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostCycle(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostCycle = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostEndTime(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostEndTime = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostStartTime(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostStartTime = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetResourceFeeData(v *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ResourceFeeData = v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetResourceFeeDataDetails(v *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ResourceFeeDataDetails = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas struct {
	BandWidthFeeData []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData `json:"BandWidthFeeData,omitempty" xml:"BandWidthFeeData,omitempty" type:"Repeated"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) SetBandWidthFeeData(v []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas {
	s.BandWidthFeeData = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData struct {
	CostCode *string `json:"CostCode,omitempty" xml:"CostCode,omitempty"`
	CostName *string `json:"CostName,omitempty" xml:"CostName,omitempty"`
	CostVal  *int32  `json:"CostVal,omitempty" xml:"CostVal,omitempty"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostCode(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostCode = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostName(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostName = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostVal(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostVal = &v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData struct {
	Memory  *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	Storage *int32 `json:"Storage,omitempty" xml:"Storage,omitempty"`
	Vcpu    *int32 `json:"Vcpu,omitempty" xml:"Vcpu,omitempty"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) SetMemory(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData {
	s.Memory = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) SetStorage(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData {
	s.Storage = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) SetVcpu(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData {
	s.Vcpu = &v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails struct {
	ResourceFeeDataDetail []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail `json:"ResourceFeeDataDetail,omitempty" xml:"ResourceFeeDataDetail,omitempty" type:"Repeated"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) SetResourceFeeDataDetail(v []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails {
	s.ResourceFeeDataDetail = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail struct {
	CostCode     *string `json:"CostCode,omitempty" xml:"CostCode,omitempty"`
	CostName     *string `json:"CostName,omitempty" xml:"CostName,omitempty"`
	CostVal      *int32  `json:"CostVal,omitempty" xml:"CostVal,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetCostCode(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.CostCode = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetCostName(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.CostName = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetCostVal(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.CostVal = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetResourceType(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.ResourceType = &v
	return s
}

type DescribeMeasurementDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeasurementDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeasurementDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponse) SetHeaders(v map[string]*string) *DescribeMeasurementDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeasurementDataResponse) SetStatusCode(v int32) *DescribeMeasurementDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeasurementDataResponse) SetBody(v *DescribeMeasurementDataResponseBody) *DescribeMeasurementDataResponse {
	s.Body = v
	return s
}

type DescribeMountTargetsRequest struct {
	EnsRegionId     *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FileSystemId    *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeMountTargetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsRequest) SetEnsRegionId(v string) *DescribeMountTargetsRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetFileSystemId(v string) *DescribeMountTargetsRequest {
	s.FileSystemId = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetMountTargetName(v string) *DescribeMountTargetsRequest {
	s.MountTargetName = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetPageNumber(v int32) *DescribeMountTargetsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetPageSize(v int32) *DescribeMountTargetsRequest {
	s.PageSize = &v
	return s
}

type DescribeMountTargetsResponseBody struct {
	MountTargets []*DescribeMountTargetsResponseBodyMountTargets `json:"MountTargets,omitempty" xml:"MountTargets,omitempty" type:"Repeated"`
	PageNumber   *int32                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeMountTargetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsResponseBody) SetMountTargets(v []*DescribeMountTargetsResponseBodyMountTargets) *DescribeMountTargetsResponseBody {
	s.MountTargets = v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetPageNumber(v int32) *DescribeMountTargetsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetPageSize(v int32) *DescribeMountTargetsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetRequestId(v string) *DescribeMountTargetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetTotalCount(v int32) *DescribeMountTargetsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeMountTargetsResponseBodyMountTargets struct {
	EnsRegionId       *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FileSystemId      *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	MountTargetName   *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
	NetWorkId         *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMountTargetsResponseBodyMountTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsResponseBodyMountTargets) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetEnsRegionId(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetFileSystemId(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.FileSystemId = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetMountTargetDomain(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.MountTargetDomain = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetMountTargetName(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.MountTargetName = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetNetWorkId(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.NetWorkId = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetStatus(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.Status = &v
	return s
}

type DescribeMountTargetsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMountTargetsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMountTargetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsResponse) SetHeaders(v map[string]*string) *DescribeMountTargetsResponse {
	s.Headers = v
	return s
}

func (s *DescribeMountTargetsResponse) SetStatusCode(v int32) *DescribeMountTargetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMountTargetsResponse) SetBody(v *DescribeMountTargetsResponseBody) *DescribeMountTargetsResponse {
	s.Body = v
	return s
}

type DescribeNatGatewaysRequest struct {
	EnsRegionId  *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	NetworkId    *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VSwitchId    *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNatGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysRequest) SetEnsRegionId(v string) *DescribeNatGatewaysRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetName(v string) *DescribeNatGatewaysRequest {
	s.Name = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNatGatewayId(v string) *DescribeNatGatewaysRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNetworkId(v string) *DescribeNatGatewaysRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageNumber(v int32) *DescribeNatGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageSize(v int32) *DescribeNatGatewaysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetVSwitchId(v string) *DescribeNatGatewaysRequest {
	s.VSwitchId = &v
	return s
}

type DescribeNatGatewaysResponseBody struct {
	NatGateways []*DescribeNatGatewaysResponseBodyNatGateways `json:"NatGateways,omitempty" xml:"NatGateways,omitempty" type:"Repeated"`
	PageNumber  *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNatGatewaysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseBody) SetNatGateways(v []*DescribeNatGatewaysResponseBodyNatGateways) *DescribeNatGatewaysResponseBody {
	s.NatGateways = v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetPageNumber(v int32) *DescribeNatGatewaysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetPageSize(v int32) *DescribeNatGatewaysResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetRequestId(v string) *DescribeNatGatewaysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetTotalCount(v int32) *DescribeNatGatewaysResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNatGatewaysResponseBodyNatGateways struct {
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	EnsRegionId  *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	NetworkId    *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	Spec         *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	VSwitchId    *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNatGatewaysResponseBodyNatGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseBodyNatGateways) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetCreationTime(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.CreationTime = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetEnsRegionId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetName(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Name = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetNatGatewayId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetNetworkId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.NetworkId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetSpec(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Spec = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetVSwitchId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.VSwitchId = &v
	return s
}

type DescribeNatGatewaysResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNatGatewaysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNatGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponse) SetHeaders(v map[string]*string) *DescribeNatGatewaysResponse {
	s.Headers = v
	return s
}

func (s *DescribeNatGatewaysResponse) SetStatusCode(v int32) *DescribeNatGatewaysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetBody(v *DescribeNatGatewaysResponseBody) *DescribeNatGatewaysResponse {
	s.Body = v
	return s
}

type DescribeNetworkAclsRequest struct {
	NetworkAclId   *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	PageNumber     *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceId     *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s DescribeNetworkAclsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsRequest) SetNetworkAclId(v string) *DescribeNetworkAclsRequest {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetNetworkAclName(v string) *DescribeNetworkAclsRequest {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetPageNumber(v string) *DescribeNetworkAclsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetPageSize(v string) *DescribeNetworkAclsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetResourceId(v string) *DescribeNetworkAclsRequest {
	s.ResourceId = &v
	return s
}

type DescribeNetworkAclsResponseBody struct {
	NetworkAcls []*DescribeNetworkAclsResponseBodyNetworkAcls `json:"NetworkAcls,omitempty" xml:"NetworkAcls,omitempty" type:"Repeated"`
	PageNumber  *string                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *string                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *string                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNetworkAclsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBody) SetNetworkAcls(v []*DescribeNetworkAclsResponseBodyNetworkAcls) *DescribeNetworkAclsResponseBody {
	s.NetworkAcls = v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetPageNumber(v string) *DescribeNetworkAclsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetPageSize(v string) *DescribeNetworkAclsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetRequestId(v string) *DescribeNetworkAclsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetTotalCount(v string) *DescribeNetworkAclsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAcls struct {
	CreationTime      *string                                                        `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description       *string                                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	EgressAclEntries  []*DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries  `json:"EgressAclEntries,omitempty" xml:"EgressAclEntries,omitempty" type:"Repeated"`
	IngressAclEntries []*DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries `json:"IngressAclEntries,omitempty" xml:"IngressAclEntries,omitempty" type:"Repeated"`
	NetworkAclId      *string                                                        `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	NetworkAclName    *string                                                        `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	Resources         []*DescribeNetworkAclsResponseBodyNetworkAclsResources         `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Repeated"`
	Status            *string                                                        `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAcls) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAcls) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetCreationTime(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetDescription(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetEgressAclEntries(v []*DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.EgressAclEntries = v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetIngressAclEntries(v []*DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.IngressAclEntries = v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetNetworkAclId(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetNetworkAclName(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetResources(v []*DescribeNetworkAclsResponseBodyNetworkAclsResources) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.Resources = v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetStatus(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.Status = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries struct {
	CidrBlock           *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange           *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority            *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetCidrBlock(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetDescription(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetNetworkAclEntryId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetNetworkAclEntryName(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.NetworkAclEntryName = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetPolicy(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetPortRange(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.PortRange = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetPriority(v int32) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Priority = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetProtocol(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetType(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Type = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries struct {
	CidrBlock           *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	NetworkAclEntryId   *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty"`
	Policy              *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange           *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority            *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetCidrBlock(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetDescription(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetNetworkAclEntryId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetNetworkAclEntryName(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.NetworkAclEntryName = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetPolicy(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetPortRange(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.PortRange = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetPriority(v int32) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Priority = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetProtocol(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetType(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Type = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAclsResources struct {
	EnsRegionId  *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsResources) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetEnsRegionId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetResourceId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.ResourceId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetResourceType(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.ResourceType = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetStatus(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.Status = &v
	return s
}

type DescribeNetworkAclsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNetworkAclsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkAclsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponse) SetHeaders(v map[string]*string) *DescribeNetworkAclsResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkAclsResponse) SetStatusCode(v int32) *DescribeNetworkAclsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkAclsResponse) SetBody(v *DescribeNetworkAclsResponseBody) *DescribeNetworkAclsResponse {
	s.Body = v
	return s
}

type DescribeNetworkAttributeRequest struct {
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
}

func (s DescribeNetworkAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeRequest) SetNetworkId(v string) *DescribeNetworkAttributeRequest {
	s.NetworkId = &v
	return s
}

type DescribeNetworkAttributeResponseBody struct {
	CidrBlock      *string                                             `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CloudResources *DescribeNetworkAttributeResponseBodyCloudResources `json:"CloudResources,omitempty" xml:"CloudResources,omitempty" type:"Struct"`
	CreatedTime    *string                                             `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description    *string                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId    *string                                             `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	NetworkAclId   *string                                             `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	NetworkId      *string                                             `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NetworkName    *string                                             `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RouterTableId  *string                                             `json:"RouterTableId,omitempty" xml:"RouterTableId,omitempty"`
	Status         *string                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	VSwitchIds     *DescribeNetworkAttributeResponseBodyVSwitchIds     `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Struct"`
}

func (s DescribeNetworkAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBody) SetCidrBlock(v string) *DescribeNetworkAttributeResponseBody {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetCloudResources(v *DescribeNetworkAttributeResponseBodyCloudResources) *DescribeNetworkAttributeResponseBody {
	s.CloudResources = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetCreatedTime(v string) *DescribeNetworkAttributeResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetDescription(v string) *DescribeNetworkAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetEnsRegionId(v string) *DescribeNetworkAttributeResponseBody {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNetworkAclId(v string) *DescribeNetworkAttributeResponseBody {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNetworkId(v string) *DescribeNetworkAttributeResponseBody {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNetworkName(v string) *DescribeNetworkAttributeResponseBody {
	s.NetworkName = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetRequestId(v string) *DescribeNetworkAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetRouterTableId(v string) *DescribeNetworkAttributeResponseBody {
	s.RouterTableId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetStatus(v string) *DescribeNetworkAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetVSwitchIds(v *DescribeNetworkAttributeResponseBodyVSwitchIds) *DescribeNetworkAttributeResponseBody {
	s.VSwitchIds = v
	return s
}

type DescribeNetworkAttributeResponseBodyCloudResources struct {
	CloudResourceSetType []*DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType `json:"CloudResourceSetType,omitempty" xml:"CloudResourceSetType,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyCloudResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyCloudResources) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyCloudResources) SetCloudResourceSetType(v []*DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) *DescribeNetworkAttributeResponseBodyCloudResources {
	s.CloudResourceSetType = v
	return s
}

type DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType struct {
	ResourceCount *int32  `json:"ResourceCount,omitempty" xml:"ResourceCount,omitempty"`
	ResourceType  *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) SetResourceCount(v int32) *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType {
	s.ResourceCount = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) SetResourceType(v string) *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType {
	s.ResourceType = &v
	return s
}

type DescribeNetworkAttributeResponseBodyVSwitchIds struct {
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyVSwitchIds) SetVSwitchId(v []*string) *DescribeNetworkAttributeResponseBodyVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeNetworkAttributeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNetworkAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponse) SetHeaders(v map[string]*string) *DescribeNetworkAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkAttributeResponse) SetStatusCode(v int32) *DescribeNetworkAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkAttributeResponse) SetBody(v *DescribeNetworkAttributeResponseBody) *DescribeNetworkAttributeResponse {
	s.Body = v
	return s
}

type DescribeNetworkInterfacesRequest struct {
	EnsRegionId      *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId       *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PageNumber       *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrimaryIpAddress *string `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	VSwitchId        *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNetworkInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesRequest) SetEnsRegionId(v string) *DescribeNetworkInterfacesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetInstanceId(v string) *DescribeNetworkInterfacesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageNumber(v string) *DescribeNetworkInterfacesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageSize(v string) *DescribeNetworkInterfacesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPrimaryIpAddress(v string) *DescribeNetworkInterfacesRequest {
	s.PrimaryIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetVSwitchId(v string) *DescribeNetworkInterfacesRequest {
	s.VSwitchId = &v
	return s
}

type DescribeNetworkInterfacesResponseBody struct {
	NetworkInterfaceSets *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets `json:"NetworkInterfaceSets,omitempty" xml:"NetworkInterfaceSets,omitempty" type:"Struct"`
	PageNumber           *int32                                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount           *int32                                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBody) SetNetworkInterfaceSets(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) *DescribeNetworkInterfacesResponseBody {
	s.NetworkInterfaceSets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetPageNumber(v int32) *DescribeNetworkInterfacesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetPageSize(v int32) *DescribeNetworkInterfacesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetRequestId(v string) *DescribeNetworkInterfacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetTotalCount(v int32) *DescribeNetworkInterfacesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets struct {
	NetworkInterfaceSet []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet `json:"NetworkInterfaceSet,omitempty" xml:"NetworkInterfaceSet,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetNetworkInterfaceSet(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.NetworkInterfaceSet = v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet struct {
	CreationTime       *string                                                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	EnsRegionId        *string                                                                                    `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId         *string                                                                                    `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	MacAddress         *string                                                                                    `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	NetworkInterfaceId *string                                                                                    `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	PrimaryIp          *string                                                                                    `json:"PrimaryIp,omitempty" xml:"PrimaryIp,omitempty"`
	PrimaryIpType      *string                                                                                    `json:"PrimaryIpType,omitempty" xml:"PrimaryIpType,omitempty"`
	PrivateIpSets      *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Struct"`
	Status             *string                                                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	VSwitchId          *string                                                                                    `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetCreationTime(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetEnsRegionId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetInstanceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetMacAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.MacAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrimaryIp(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrimaryIp = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrimaryIpType(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrimaryIpType = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrivateIpSets(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrivateIpSets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetStatus(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetVSwitchId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.VSwitchId = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets struct {
	PrivateIpSet []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet `json:"PrivateIpSet,omitempty" xml:"PrivateIpSet,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) SetPrivateIpSet(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets {
	s.PrivateIpSet = v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet struct {
	Primary          *bool   `json:"Primary,omitempty" xml:"Primary,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrimary(v bool) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.Primary = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrivateIpAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.PrivateIpAddress = &v
	return s
}

type DescribeNetworkInterfacesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNetworkInterfacesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworkInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponse) SetHeaders(v map[string]*string) *DescribeNetworkInterfacesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetStatusCode(v int32) *DescribeNetworkInterfacesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetBody(v *DescribeNetworkInterfacesResponseBody) *DescribeNetworkInterfacesResponse {
	s.Body = v
	return s
}

type DescribeNetworksRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
	PageNumber  *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize    *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeNetworksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworksRequest) SetEnsRegionId(v string) *DescribeNetworksRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworksRequest) SetNetworkId(v string) *DescribeNetworksRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworksRequest) SetNetworkName(v string) *DescribeNetworksRequest {
	s.NetworkName = &v
	return s
}

func (s *DescribeNetworksRequest) SetPageNumber(v int32) *DescribeNetworksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworksRequest) SetPageSize(v int32) *DescribeNetworksRequest {
	s.PageSize = &v
	return s
}

type DescribeNetworksResponseBody struct {
	Networks   *DescribeNetworksResponseBodyNetworks `json:"Networks,omitempty" xml:"Networks,omitempty" type:"Struct"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNetworksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBody) SetNetworks(v *DescribeNetworksResponseBodyNetworks) *DescribeNetworksResponseBody {
	s.Networks = v
	return s
}

func (s *DescribeNetworksResponseBody) SetPageNumber(v int32) *DescribeNetworksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworksResponseBody) SetPageSize(v int32) *DescribeNetworksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworksResponseBody) SetRequestId(v string) *DescribeNetworksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworksResponseBody) SetTotalCount(v int32) *DescribeNetworksResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNetworksResponseBodyNetworks struct {
	Network []*DescribeNetworksResponseBodyNetworksNetwork `json:"Network,omitempty" xml:"Network,omitempty" type:"Repeated"`
}

func (s DescribeNetworksResponseBodyNetworks) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBodyNetworks) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBodyNetworks) SetNetwork(v []*DescribeNetworksResponseBodyNetworksNetwork) *DescribeNetworksResponseBodyNetworks {
	s.Network = v
	return s
}

type DescribeNetworksResponseBodyNetworksNetwork struct {
	CidrBlock     *string                                                `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CreatedTime   *string                                                `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description   *string                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId   *string                                                `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	NetworkAclId  *string                                                `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	NetworkId     *string                                                `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NetworkName   *string                                                `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
	RouterTableId *string                                                `json:"RouterTableId,omitempty" xml:"RouterTableId,omitempty"`
	Status        *string                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	VSwitchIds    *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Struct"`
}

func (s DescribeNetworksResponseBodyNetworksNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBodyNetworksNetwork) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetCidrBlock(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetCreatedTime(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.CreatedTime = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetDescription(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.Description = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetEnsRegionId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetNetworkAclId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetNetworkId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetNetworkName(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.NetworkName = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetRouterTableId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.RouterTableId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetStatus(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.Status = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetVSwitchIds(v *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) *DescribeNetworksResponseBodyNetworksNetwork {
	s.VSwitchIds = v
	return s
}

type DescribeNetworksResponseBodyNetworksNetworkVSwitchIds struct {
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
}

func (s DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) SetVSwitchId(v []*string) *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeNetworksResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeNetworksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeNetworksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponse) SetHeaders(v map[string]*string) *DescribeNetworksResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworksResponse) SetStatusCode(v int32) *DescribeNetworksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworksResponse) SetBody(v *DescribeNetworksResponseBody) *DescribeNetworksResponse {
	s.Body = v
	return s
}

type DescribePrePaidInstanceStockRequest struct {
	DataDiskSize   *int32  `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	EnsRegionId    *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceSpec   *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	SystemDiskSize *int32  `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	Version        *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribePrePaidInstanceStockRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidInstanceStockRequest) GoString() string {
	return s.String()
}

func (s *DescribePrePaidInstanceStockRequest) SetDataDiskSize(v int32) *DescribePrePaidInstanceStockRequest {
	s.DataDiskSize = &v
	return s
}

func (s *DescribePrePaidInstanceStockRequest) SetEnsRegionId(v string) *DescribePrePaidInstanceStockRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePrePaidInstanceStockRequest) SetInstanceSpec(v string) *DescribePrePaidInstanceStockRequest {
	s.InstanceSpec = &v
	return s
}

func (s *DescribePrePaidInstanceStockRequest) SetSystemDiskSize(v int32) *DescribePrePaidInstanceStockRequest {
	s.SystemDiskSize = &v
	return s
}

func (s *DescribePrePaidInstanceStockRequest) SetVersion(v string) *DescribePrePaidInstanceStockRequest {
	s.Version = &v
	return s
}

type DescribePrePaidInstanceStockResponseBody struct {
	AvaliableCount *int32  `json:"AvaliableCount,omitempty" xml:"AvaliableCount,omitempty"`
	Cores          *int32  `json:"Cores,omitempty" xml:"Cores,omitempty"`
	DataDiskSize   *int32  `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	EnsRegionId    *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceSpec   *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	Memory         *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SystemDiskSize *int32  `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribePrePaidInstanceStockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidInstanceStockResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePrePaidInstanceStockResponseBody) SetAvaliableCount(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.AvaliableCount = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetCores(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.Cores = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetDataDiskSize(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.DataDiskSize = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetEnsRegionId(v string) *DescribePrePaidInstanceStockResponseBody {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetInstanceSpec(v string) *DescribePrePaidInstanceStockResponseBody {
	s.InstanceSpec = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetMemory(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.Memory = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetRequestId(v string) *DescribePrePaidInstanceStockResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetSystemDiskSize(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.SystemDiskSize = &v
	return s
}

type DescribePrePaidInstanceStockResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePrePaidInstanceStockResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePrePaidInstanceStockResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidInstanceStockResponse) GoString() string {
	return s.String()
}

func (s *DescribePrePaidInstanceStockResponse) SetHeaders(v map[string]*string) *DescribePrePaidInstanceStockResponse {
	s.Headers = v
	return s
}

func (s *DescribePrePaidInstanceStockResponse) SetStatusCode(v int32) *DescribePrePaidInstanceStockResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponse) SetBody(v *DescribePrePaidInstanceStockResponseBody) *DescribePrePaidInstanceStockResponse {
	s.Body = v
	return s
}

type DescribePriceRequest struct {
	DataDisk           []*DescribePriceRequestDataDisk  `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	SystemDisk         *DescribePriceRequestSystemDisk  `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	DataDisks          []*DescribePriceRequestDataDisks `json:"DataDisks,omitempty" xml:"DataDisks,omitempty" type:"Repeated"`
	EnsRegionId        *string                          `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceType       *string                          `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType *string                          `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	Period             *int32                           `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit         *string                          `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Quantity           *int32                           `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetDataDisk(v []*DescribePriceRequestDataDisk) *DescribePriceRequest {
	s.DataDisk = v
	return s
}

func (s *DescribePriceRequest) SetSystemDisk(v *DescribePriceRequestSystemDisk) *DescribePriceRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribePriceRequest) SetDataDisks(v []*DescribePriceRequestDataDisks) *DescribePriceRequest {
	s.DataDisks = v
	return s
}

func (s *DescribePriceRequest) SetEnsRegionId(v string) *DescribePriceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceType(v string) *DescribePriceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePriceRequest) SetInternetChargeType(v string) *DescribePriceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribePriceRequest) SetPeriod(v int32) *DescribePriceRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceRequest) SetPeriodUnit(v string) *DescribePriceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribePriceRequest) SetQuantity(v int32) *DescribePriceRequest {
	s.Quantity = &v
	return s
}

type DescribePriceRequestDataDisk struct {
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestDataDisk) SetSize(v int32) *DescribePriceRequestDataDisk {
	s.Size = &v
	return s
}

type DescribePriceRequestSystemDisk struct {
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestSystemDisk) SetSize(v int32) *DescribePriceRequestSystemDisk {
	s.Size = &v
	return s
}

type DescribePriceRequestDataDisks struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Size     *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceRequestDataDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestDataDisks) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestDataDisks) SetCategory(v string) *DescribePriceRequestDataDisks {
	s.Category = &v
	return s
}

func (s *DescribePriceRequestDataDisks) SetSize(v int64) *DescribePriceRequestDataDisks {
	s.Size = &v
	return s
}

type DescribePriceShrinkRequest struct {
	DataDisk           []*DescribePriceShrinkRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	SystemDisk         *DescribePriceShrinkRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	DataDisksShrink    *string                               `json:"DataDisks,omitempty" xml:"DataDisks,omitempty"`
	EnsRegionId        *string                               `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceType       *string                               `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType *string                               `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	Period             *int32                                `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit         *string                               `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	Quantity           *int32                                `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
}

func (s DescribePriceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceShrinkRequest) SetDataDisk(v []*DescribePriceShrinkRequestDataDisk) *DescribePriceShrinkRequest {
	s.DataDisk = v
	return s
}

func (s *DescribePriceShrinkRequest) SetSystemDisk(v *DescribePriceShrinkRequestSystemDisk) *DescribePriceShrinkRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribePriceShrinkRequest) SetDataDisksShrink(v string) *DescribePriceShrinkRequest {
	s.DataDisksShrink = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetEnsRegionId(v string) *DescribePriceShrinkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetInstanceType(v string) *DescribePriceShrinkRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetInternetChargeType(v string) *DescribePriceShrinkRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetPeriod(v int32) *DescribePriceShrinkRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetPeriodUnit(v string) *DescribePriceShrinkRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetQuantity(v int32) *DescribePriceShrinkRequest {
	s.Quantity = &v
	return s
}

type DescribePriceShrinkRequestDataDisk struct {
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceShrinkRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceShrinkRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceShrinkRequestDataDisk) SetSize(v int32) *DescribePriceShrinkRequestDataDisk {
	s.Size = &v
	return s
}

type DescribePriceShrinkRequestSystemDisk struct {
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceShrinkRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceShrinkRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceShrinkRequestSystemDisk) SetSize(v int32) *DescribePriceShrinkRequestSystemDisk {
	s.Size = &v
	return s
}

type DescribePriceResponseBody struct {
	PriceInfo *DescribePriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBody) SetPriceInfo(v *DescribePriceResponseBodyPriceInfo) *DescribePriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribePriceResponseBody) SetRequestId(v string) *DescribePriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribePriceResponseBodyPriceInfo struct {
	Price *DescribePriceResponseBodyPriceInfoPrice `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
}

func (s DescribePriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfo) SetPrice(v *DescribePriceResponseBodyPriceInfoPrice) *DescribePriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

type DescribePriceResponseBodyPriceInfoPrice struct {
	Currency      *string  `json:"Currency,omitempty" xml:"Currency,omitempty"`
	DiscountPrice *float32 `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OriginalPrice *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	TradePrice    *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribePriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

type DescribePriceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetHeaders(v map[string]*string) *DescribePriceResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceResponse) SetStatusCode(v int32) *DescribePriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePriceResponse) SetBody(v *DescribePriceResponseBody) *DescribePriceResponse {
	s.Body = v
	return s
}

type DescribeRegionIspsRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeRegionIspsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsRequest) SetEnsRegionId(v string) *DescribeRegionIspsRequest {
	s.EnsRegionId = &v
	return s
}

type DescribeRegionIspsResponseBody struct {
	Isps      []*DescribeRegionIspsResponseBodyIsps `json:"Isps,omitempty" xml:"Isps,omitempty" type:"Repeated"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionIspsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsResponseBody) SetIsps(v []*DescribeRegionIspsResponseBodyIsps) *DescribeRegionIspsResponseBody {
	s.Isps = v
	return s
}

func (s *DescribeRegionIspsResponseBody) SetRequestId(v string) *DescribeRegionIspsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionIspsResponseBodyIsps struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeRegionIspsResponseBodyIsps) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsResponseBodyIsps) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsResponseBodyIsps) SetCode(v string) *DescribeRegionIspsResponseBodyIsps {
	s.Code = &v
	return s
}

func (s *DescribeRegionIspsResponseBodyIsps) SetName(v string) *DescribeRegionIspsResponseBodyIsps {
	s.Name = &v
	return s
}

type DescribeRegionIspsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeRegionIspsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRegionIspsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsResponse) SetHeaders(v map[string]*string) *DescribeRegionIspsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionIspsResponse) SetStatusCode(v int32) *DescribeRegionIspsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionIspsResponse) SetBody(v *DescribeRegionIspsResponseBody) *DescribeRegionIspsResponse {
	s.Body = v
	return s
}

type DescribeReservedResourceRequest struct {
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeReservedResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceRequest) SetVersion(v string) *DescribeReservedResourceRequest {
	s.Version = &v
	return s
}

type DescribeReservedResourceResponseBody struct {
	Code             *int32                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Images           *DescribeReservedResourceResponseBodyImages           `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	RequestId        *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SupportResources *DescribeReservedResourceResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeReservedResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBody) SetCode(v int32) *DescribeReservedResourceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeReservedResourceResponseBody) SetImages(v *DescribeReservedResourceResponseBodyImages) *DescribeReservedResourceResponseBody {
	s.Images = v
	return s
}

func (s *DescribeReservedResourceResponseBody) SetRequestId(v string) *DescribeReservedResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReservedResourceResponseBody) SetSupportResources(v *DescribeReservedResourceResponseBodySupportResources) *DescribeReservedResourceResponseBody {
	s.SupportResources = v
	return s
}

type DescribeReservedResourceResponseBodyImages struct {
	Image []*DescribeReservedResourceResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodyImages) SetImage(v []*DescribeReservedResourceResponseBodyImagesImage) *DescribeReservedResourceResponseBodyImages {
	s.Image = v
	return s
}

type DescribeReservedResourceResponseBodyImagesImage struct {
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
}

func (s DescribeReservedResourceResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodyImagesImage) SetImageId(v string) *DescribeReservedResourceResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeReservedResourceResponseBodyImagesImage) SetImageName(v string) *DescribeReservedResourceResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

type DescribeReservedResourceResponseBodySupportResources struct {
	SupportResource []*DescribeReservedResourceResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResources) SetSupportResource(v []*DescribeReservedResourceResponseBodySupportResourcesSupportResource) *DescribeReservedResourceResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeReservedResourceResponseBodySupportResourcesSupportResource struct {
	DataDiskSizes         *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes   `json:"DataDiskSizes,omitempty" xml:"DataDiskSizes,omitempty" type:"Struct"`
	EnsRegionId           *string                                                                             `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceSpec          *string                                                                             `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	SupportResourcesCount *string                                                                             `json:"SupportResourcesCount,omitempty" xml:"SupportResourcesCount,omitempty"`
	SystemDiskSizes       *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes `json:"SystemDiskSizes,omitempty" xml:"SystemDiskSizes,omitempty" type:"Struct"`
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetDataDiskSizes(v *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.DataDiskSizes = v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetInstanceSpec(v string) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetSupportResourcesCount(v string) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.SupportResourcesCount = &v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetSystemDiskSizes(v *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.SystemDiskSizes = v
	return s
}

type DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes struct {
	DataDiskSize []*string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) SetDataDiskSize(v []*string) *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes {
	s.DataDiskSize = v
	return s
}

type DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes struct {
	SystemDiskSize []*string `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) SetSystemDiskSize(v []*string) *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes {
	s.SystemDiskSize = v
	return s
}

type DescribeReservedResourceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeReservedResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReservedResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponse) SetHeaders(v map[string]*string) *DescribeReservedResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservedResourceResponse) SetStatusCode(v int32) *DescribeReservedResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservedResourceResponse) SetBody(v *DescribeReservedResourceResponseBody) *DescribeReservedResourceResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupAttributeRequest struct {
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s DescribeSecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBody struct {
	Description       *string                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Permissions       *DescribeSecurityGroupAttributeResponseBodyPermissions `json:"Permissions,omitempty" xml:"Permissions,omitempty" type:"Struct"`
	RequestId         *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityGroupId   *string                                                `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName *string                                                `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetDescription(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetPermissions(v *DescribeSecurityGroupAttributeResponseBodyPermissions) *DescribeSecurityGroupAttributeResponseBody {
	s.Permissions = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetRequestId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetSecurityGroupName(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.SecurityGroupName = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBodyPermissions struct {
	Permission []*DescribeSecurityGroupAttributeResponseBodyPermissionsPermission `json:"Permission,omitempty" xml:"Permission,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissions) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetPermission(v []*DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Permission = v
	return s
}

type DescribeSecurityGroupAttributeResponseBodyPermissionsPermission struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp      *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Direction       *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority        *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SourceCidrIp    *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetCreationTime(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetDescription(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetDestCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.DestCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetDirection(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Direction = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetIpProtocol(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.IpProtocol = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetPolicy(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Policy = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetPortRange(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.PortRange = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetPriority(v int32) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Priority = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetSourceCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetSourcePortRange(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.SourcePortRange = &v
	return s
}

type DescribeSecurityGroupAttributeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSecurityGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetStatusCode(v int32) *DescribeSecurityGroupAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetBody(v *DescribeSecurityGroupAttributeResponseBody) *DescribeSecurityGroupAttributeResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupsRequest struct {
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SecurityGroupId   *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	Version           *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeSecurityGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsRequest) SetPageNumber(v int32) *DescribeSecurityGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetPageSize(v int32) *DescribeSecurityGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupName(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetVersion(v string) *DescribeSecurityGroupsRequest {
	s.Version = &v
	return s
}

type DescribeSecurityGroupsResponseBody struct {
	PageNumber     *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityGroups *DescribeSecurityGroupsResponseBodySecurityGroups `json:"SecurityGroups,omitempty" xml:"SecurityGroups,omitempty" type:"Struct"`
	TotalCount     *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSecurityGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBody) SetPageNumber(v int32) *DescribeSecurityGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetPageSize(v int32) *DescribeSecurityGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetRequestId(v string) *DescribeSecurityGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetSecurityGroups(v *DescribeSecurityGroupsResponseBodySecurityGroups) *DescribeSecurityGroupsResponseBody {
	s.SecurityGroups = v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetTotalCount(v int32) *DescribeSecurityGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroups struct {
	SecurityGroup []*DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroups) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetSecurityGroup(v []*DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.SecurityGroup = v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup struct {
	CreationTime      *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InstanceCount     *int32  `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	SecurityGroupId   *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetCreationTime(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetDescription(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetInstanceCount(v int32) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.InstanceCount = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetSecurityGroupId(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetSecurityGroupName(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.SecurityGroupName = &v
	return s
}

type DescribeSecurityGroupsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSecurityGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetStatusCode(v int32) *DescribeSecurityGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetBody(v *DescribeSecurityGroupsResponseBody) *DescribeSecurityGroupsResponse {
	s.Body = v
	return s
}

type DescribeSelfImagesRequest struct {
	ImageId    *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName  *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSelfImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesRequest) SetImageId(v string) *DescribeSelfImagesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeSelfImagesRequest) SetImageName(v string) *DescribeSelfImagesRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeSelfImagesRequest) SetPageNumber(v int32) *DescribeSelfImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSelfImagesRequest) SetPageSize(v int32) *DescribeSelfImagesRequest {
	s.PageSize = &v
	return s
}

type DescribeSelfImagesResponseBody struct {
	Code      *int32                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Images    *DescribeSelfImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSelfImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBody) SetCode(v int32) *DescribeSelfImagesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSelfImagesResponseBody) SetImages(v *DescribeSelfImagesResponseBodyImages) *DescribeSelfImagesResponseBody {
	s.Images = v
	return s
}

func (s *DescribeSelfImagesResponseBody) SetRequestId(v string) *DescribeSelfImagesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSelfImagesResponseBodyImages struct {
	Image []*DescribeSelfImagesResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeSelfImagesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBodyImages) SetImage(v []*DescribeSelfImagesResponseBodyImagesImage) *DescribeSelfImagesResponseBodyImages {
	s.Image = v
	return s
}

type DescribeSelfImagesResponseBodyImagesImage struct {
	Architecture    *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ImageId         *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName       *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	ImageOwnerAlias *string `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	ImageSize       *string `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OsVersion       *string `json:"OsVersion,omitempty" xml:"OsVersion,omitempty"`
	Platform        *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSelfImagesResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetArchitecture(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.Architecture = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetCreationTime(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageId(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageName(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageOwnerAlias(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageSize(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetInstanceId(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.InstanceId = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetOsVersion(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.OsVersion = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetPlatform(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.Platform = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetStatus(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.Status = &v
	return s
}

type DescribeSelfImagesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSelfImagesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSelfImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponse) SetHeaders(v map[string]*string) *DescribeSelfImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSelfImagesResponse) SetStatusCode(v int32) *DescribeSelfImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSelfImagesResponse) SetBody(v *DescribeSelfImagesResponseBody) *DescribeSelfImagesResponse {
	s.Body = v
	return s
}

type DescribeServcieScheduleRequest struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	PodConfigName *string `json:"PodConfigName,omitempty" xml:"PodConfigName,omitempty"`
	Uuid          *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeServcieScheduleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleRequest) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleRequest) SetAppId(v string) *DescribeServcieScheduleRequest {
	s.AppId = &v
	return s
}

func (s *DescribeServcieScheduleRequest) SetPodConfigName(v string) *DescribeServcieScheduleRequest {
	s.PodConfigName = &v
	return s
}

func (s *DescribeServcieScheduleRequest) SetUuid(v string) *DescribeServcieScheduleRequest {
	s.Uuid = &v
	return s
}

type DescribeServcieScheduleResponseBody struct {
	Index           *int32                                              `json:"Index,omitempty" xml:"Index,omitempty"`
	InstanceId      *string                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceIp      *string                                             `json:"InstanceIp,omitempty" xml:"InstanceIp,omitempty"`
	InstancePort    *int32                                              `json:"InstancePort,omitempty" xml:"InstancePort,omitempty"`
	PodAbstractInfo *DescribeServcieScheduleResponseBodyPodAbstractInfo `json:"PodAbstractInfo,omitempty" xml:"PodAbstractInfo,omitempty" type:"Struct"`
	RequestId       *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RequestRepeated *bool                                               `json:"RequestRepeated,omitempty" xml:"RequestRepeated,omitempty"`
	TcpPorts        *string                                             `json:"TcpPorts,omitempty" xml:"TcpPorts,omitempty"`
}

func (s DescribeServcieScheduleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBody) SetIndex(v int32) *DescribeServcieScheduleResponseBody {
	s.Index = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetInstanceId(v string) *DescribeServcieScheduleResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetInstanceIp(v string) *DescribeServcieScheduleResponseBody {
	s.InstanceIp = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetInstancePort(v int32) *DescribeServcieScheduleResponseBody {
	s.InstancePort = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetPodAbstractInfo(v *DescribeServcieScheduleResponseBodyPodAbstractInfo) *DescribeServcieScheduleResponseBody {
	s.PodAbstractInfo = v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetRequestId(v string) *DescribeServcieScheduleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetRequestRepeated(v bool) *DescribeServcieScheduleResponseBody {
	s.RequestRepeated = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetTcpPorts(v string) *DescribeServcieScheduleResponseBody {
	s.TcpPorts = &v
	return s
}

type DescribeServcieScheduleResponseBodyPodAbstractInfo struct {
	ContainerService  *bool                                                                `json:"ContainerService,omitempty" xml:"ContainerService,omitempty"`
	ContainerStatuses *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses `json:"ContainerStatuses,omitempty" xml:"ContainerStatuses,omitempty" type:"Struct"`
	Name              *bool                                                                `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace         *bool                                                                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ResourceScope     *bool                                                                `json:"ResourceScope,omitempty" xml:"ResourceScope,omitempty"`
	Status            *bool                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfo) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetContainerService(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.ContainerService = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetContainerStatuses(v *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.ContainerStatuses = v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetName(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.Name = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetNamespace(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.Namespace = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetResourceScope(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.ResourceScope = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetStatus(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.Status = &v
	return s
}

type DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses struct {
	ContainerStatus []*DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus `json:"ContainerStatus,omitempty" xml:"ContainerStatus,omitempty" type:"Repeated"`
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) SetContainerStatus(v []*DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses {
	s.ContainerStatus = v
	return s
}

type DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus struct {
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) SetContainerId(v string) *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus {
	s.ContainerId = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) SetName(v string) *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus {
	s.Name = &v
	return s
}

type DescribeServcieScheduleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeServcieScheduleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeServcieScheduleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponse) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponse) SetHeaders(v map[string]*string) *DescribeServcieScheduleResponse {
	s.Headers = v
	return s
}

func (s *DescribeServcieScheduleResponse) SetStatusCode(v int32) *DescribeServcieScheduleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServcieScheduleResponse) SetBody(v *DescribeServcieScheduleResponseBody) *DescribeServcieScheduleResponse {
	s.Body = v
	return s
}

type DescribeSnatTableEntriesRequest struct {
	NatGatewayId  *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SnatEntryId   *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	SnatIp        *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	SourceCIDR    *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
}

func (s DescribeSnatTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesRequest) SetNatGatewayId(v string) *DescribeSnatTableEntriesRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetPageNumber(v int32) *DescribeSnatTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetPageSize(v int32) *DescribeSnatTableEntriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatEntryId(v string) *DescribeSnatTableEntriesRequest {
	s.SnatEntryId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatEntryName(v string) *DescribeSnatTableEntriesRequest {
	s.SnatEntryName = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatIp(v string) *DescribeSnatTableEntriesRequest {
	s.SnatIp = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSourceCIDR(v string) *DescribeSnatTableEntriesRequest {
	s.SourceCIDR = &v
	return s
}

type DescribeSnatTableEntriesResponseBody struct {
	PageNumber       *int32                                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32                                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnatTableEntries []*DescribeSnatTableEntriesResponseBodySnatTableEntries `json:"SnatTableEntries,omitempty" xml:"SnatTableEntries,omitempty" type:"Repeated"`
	TotalCount       *int32                                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSnatTableEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponseBody) SetPageNumber(v int32) *DescribeSnatTableEntriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetPageSize(v int32) *DescribeSnatTableEntriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetRequestId(v string) *DescribeSnatTableEntriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetSnatTableEntries(v []*DescribeSnatTableEntriesResponseBodySnatTableEntries) *DescribeSnatTableEntriesResponseBody {
	s.SnatTableEntries = v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetTotalCount(v int32) *DescribeSnatTableEntriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSnatTableEntriesResponseBodySnatTableEntries struct {
	NatGatewayId  *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	SnatEntryId   *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	SnatIp        *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	SourceCIDR    *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSnatTableEntriesResponseBodySnatTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponseBodySnatTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetNatGatewayId(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSnatEntryId(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SnatEntryId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSnatEntryName(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SnatEntryName = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSnatIp(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SnatIp = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSourceCIDR(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SourceCIDR = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetStatus(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.Status = &v
	return s
}

type DescribeSnatTableEntriesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSnatTableEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSnatTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponse) SetHeaders(v map[string]*string) *DescribeSnatTableEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetStatusCode(v int32) *DescribeSnatTableEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetBody(v *DescribeSnatTableEntriesResponseBody) *DescribeSnatTableEntriesResponse {
	s.Body = v
	return s
}

type DescribeUserBandWidthDataRequest struct {
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceId  *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Isp         *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	Period      *string `json:"Period,omitempty" xml:"Period,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeUserBandWidthDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataRequest) SetEndTime(v string) *DescribeUserBandWidthDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetEnsRegionId(v string) *DescribeUserBandWidthDataRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetInstanceId(v string) *DescribeUserBandWidthDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetIsp(v string) *DescribeUserBandWidthDataRequest {
	s.Isp = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetPeriod(v string) *DescribeUserBandWidthDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetStartTime(v string) *DescribeUserBandWidthDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetVersion(v string) *DescribeUserBandWidthDataRequest {
	s.Version = &v
	return s
}

type DescribeUserBandWidthDataResponseBody struct {
	Code        *int32                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	MonitorData *DescribeUserBandWidthDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Struct"`
	RequestId   *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserBandWidthDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponseBody) SetCode(v int32) *DescribeUserBandWidthDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBody) SetMonitorData(v *DescribeUserBandWidthDataResponseBodyMonitorData) *DescribeUserBandWidthDataResponseBody {
	s.MonitorData = v
	return s
}

func (s *DescribeUserBandWidthDataResponseBody) SetRequestId(v string) *DescribeUserBandWidthDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserBandWidthDataResponseBodyMonitorData struct {
	BandWidthMonitorData []*DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData `json:"BandWidthMonitorData,omitempty" xml:"BandWidthMonitorData,omitempty" type:"Repeated"`
	MaxDownBandWidth     *string                                                                 `json:"MaxDownBandWidth,omitempty" xml:"MaxDownBandWidth,omitempty"`
	MaxUpBandWidth       *string                                                                 `json:"MaxUpBandWidth,omitempty" xml:"MaxUpBandWidth,omitempty"`
}

func (s DescribeUserBandWidthDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorData) SetBandWidthMonitorData(v []*DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) *DescribeUserBandWidthDataResponseBodyMonitorData {
	s.BandWidthMonitorData = v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorData) SetMaxDownBandWidth(v string) *DescribeUserBandWidthDataResponseBodyMonitorData {
	s.MaxDownBandWidth = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorData) SetMaxUpBandWidth(v string) *DescribeUserBandWidthDataResponseBodyMonitorData {
	s.MaxUpBandWidth = &v
	return s
}

type DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData struct {
	DownBandWidth *int32  `json:"DownBandWidth,omitempty" xml:"DownBandWidth,omitempty"`
	InternetRX    *int32  `json:"InternetRX,omitempty" xml:"InternetRX,omitempty"`
	InternetTX    *int32  `json:"InternetTX,omitempty" xml:"InternetTX,omitempty"`
	TimeStamp     *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	UpBandWidth   *int32  `json:"UpBandWidth,omitempty" xml:"UpBandWidth,omitempty"`
}

func (s DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetDownBandWidth(v int32) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.DownBandWidth = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetRX(v int32) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetRX = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetTX(v int32) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetTX = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetTimeStamp(v string) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetUpBandWidth(v int32) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.UpBandWidth = &v
	return s
}

type DescribeUserBandWidthDataResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeUserBandWidthDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeUserBandWidthDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponse) SetHeaders(v map[string]*string) *DescribeUserBandWidthDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserBandWidthDataResponse) SetStatusCode(v int32) *DescribeUserBandWidthDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserBandWidthDataResponse) SetBody(v *DescribeUserBandWidthDataResponseBody) *DescribeUserBandWidthDataResponse {
	s.Body = v
	return s
}

type DescribeVSwitchesRequest struct {
	EnsRegionId   *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	NetworkId     *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	PageNumber    *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	VSwitchId     *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VSwitchName   *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeVSwitchesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesRequest) SetEnsRegionId(v string) *DescribeVSwitchesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetNetworkId(v string) *DescribeVSwitchesRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetOrderByParams(v string) *DescribeVSwitchesRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageNumber(v int32) *DescribeVSwitchesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageSize(v int32) *DescribeVSwitchesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchId(v string) *DescribeVSwitchesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchName(v string) *DescribeVSwitchesRequest {
	s.VSwitchName = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVersion(v string) *DescribeVSwitchesRequest {
	s.Version = &v
	return s
}

type DescribeVSwitchesResponseBody struct {
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	VSwitches  *DescribeVSwitchesResponseBodyVSwitches `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" type:"Struct"`
}

func (s DescribeVSwitchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBody) SetPageNumber(v int32) *DescribeVSwitchesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetPageSize(v int32) *DescribeVSwitchesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetRequestId(v string) *DescribeVSwitchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetTotalCount(v int32) *DescribeVSwitchesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetVSwitches(v *DescribeVSwitchesResponseBodyVSwitches) *DescribeVSwitchesResponseBody {
	s.VSwitches = v
	return s
}

type DescribeVSwitchesResponseBodyVSwitches struct {
	VSwitch []*DescribeVSwitchesResponseBodyVSwitchesVSwitch `json:"VSwitch,omitempty" xml:"VSwitch,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchesResponseBodyVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBodyVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetVSwitch(v []*DescribeVSwitchesResponseBodyVSwitchesVSwitch) *DescribeVSwitchesResponseBodyVSwitches {
	s.VSwitch = v
	return s
}

type DescribeVSwitchesResponseBodyVSwitchesVSwitch struct {
	CidrBlock   *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FreeIpCount *int64  `json:"FreeIpCount,omitempty" xml:"FreeIpCount,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VSwitchId   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeVSwitchesResponseBodyVSwitchesVSwitch) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBodyVSwitchesVSwitch) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetCidrBlock(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetCreatedTime(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.CreatedTime = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetDescription(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.Description = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetEnsRegionId(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetFreeIpCount(v int64) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.FreeIpCount = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetNetworkId(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.NetworkId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetStatus(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.Status = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetVSwitchId(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetVSwitchName(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.VSwitchName = &v
	return s
}

type DescribeVSwitchesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeVSwitchesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeVSwitchesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponse) SetHeaders(v map[string]*string) *DescribeVSwitchesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVSwitchesResponse) SetStatusCode(v int32) *DescribeVSwitchesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetBody(v *DescribeVSwitchesResponseBody) *DescribeVSwitchesResponse {
	s.Body = v
	return s
}

type DetachDiskRequest struct {
	DiskId     *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DetachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskRequest) GoString() string {
	return s.String()
}

func (s *DetachDiskRequest) SetDiskId(v string) *DetachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *DetachDiskRequest) SetInstanceId(v string) *DetachDiskRequest {
	s.InstanceId = &v
	return s
}

type DetachDiskResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskResponseBody) GoString() string {
	return s.String()
}

func (s *DetachDiskResponseBody) SetCode(v int32) *DetachDiskResponseBody {
	s.Code = &v
	return s
}

func (s *DetachDiskResponseBody) SetRequestId(v string) *DetachDiskResponseBody {
	s.RequestId = &v
	return s
}

type DetachDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DetachDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskResponse) GoString() string {
	return s.String()
}

func (s *DetachDiskResponse) SetHeaders(v map[string]*string) *DetachDiskResponse {
	s.Headers = v
	return s
}

func (s *DetachDiskResponse) SetStatusCode(v int32) *DetachDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachDiskResponse) SetBody(v *DetachDiskResponseBody) *DetachDiskResponse {
	s.Body = v
	return s
}

type DistApplicationDataRequest struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Data         *string `json:"Data,omitempty" xml:"Data,omitempty"`
	DistStrategy *string `json:"DistStrategy,omitempty" xml:"DistStrategy,omitempty"`
}

func (s DistApplicationDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataRequest) GoString() string {
	return s.String()
}

func (s *DistApplicationDataRequest) SetAppId(v string) *DistApplicationDataRequest {
	s.AppId = &v
	return s
}

func (s *DistApplicationDataRequest) SetData(v string) *DistApplicationDataRequest {
	s.Data = &v
	return s
}

func (s *DistApplicationDataRequest) SetDistStrategy(v string) *DistApplicationDataRequest {
	s.DistStrategy = &v
	return s
}

type DistApplicationDataResponseBody struct {
	DistInstanceIds        *DistApplicationDataResponseBodyDistInstanceIds `json:"DistInstanceIds,omitempty" xml:"DistInstanceIds,omitempty" type:"Struct"`
	DistInstanceTotalCount *int32                                          `json:"DistInstanceTotalCount,omitempty" xml:"DistInstanceTotalCount,omitempty"`
	DistResults            *DistApplicationDataResponseBodyDistResults     `json:"DistResults,omitempty" xml:"DistResults,omitempty" type:"Struct"`
	RequestId              *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DistApplicationDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBody) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBody) SetDistInstanceIds(v *DistApplicationDataResponseBodyDistInstanceIds) *DistApplicationDataResponseBody {
	s.DistInstanceIds = v
	return s
}

func (s *DistApplicationDataResponseBody) SetDistInstanceTotalCount(v int32) *DistApplicationDataResponseBody {
	s.DistInstanceTotalCount = &v
	return s
}

func (s *DistApplicationDataResponseBody) SetDistResults(v *DistApplicationDataResponseBodyDistResults) *DistApplicationDataResponseBody {
	s.DistResults = v
	return s
}

func (s *DistApplicationDataResponseBody) SetRequestId(v string) *DistApplicationDataResponseBody {
	s.RequestId = &v
	return s
}

type DistApplicationDataResponseBodyDistInstanceIds struct {
	DistInstanceId []*string `json:"DistInstanceId,omitempty" xml:"DistInstanceId,omitempty" type:"Repeated"`
}

func (s DistApplicationDataResponseBodyDistInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBodyDistInstanceIds) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBodyDistInstanceIds) SetDistInstanceId(v []*string) *DistApplicationDataResponseBodyDistInstanceIds {
	s.DistInstanceId = v
	return s
}

type DistApplicationDataResponseBodyDistResults struct {
	DistResult []*DistApplicationDataResponseBodyDistResultsDistResult `json:"DistResult,omitempty" xml:"DistResult,omitempty" type:"Repeated"`
}

func (s DistApplicationDataResponseBodyDistResults) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBodyDistResults) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBodyDistResults) SetDistResult(v []*DistApplicationDataResponseBodyDistResultsDistResult) *DistApplicationDataResponseBodyDistResults {
	s.DistResult = v
	return s
}

type DistApplicationDataResponseBodyDistResultsDistResult struct {
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ResultCode    *int32  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultDescrip *string `json:"ResultDescrip,omitempty" xml:"ResultDescrip,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DistApplicationDataResponseBodyDistResultsDistResult) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBodyDistResultsDistResult) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetName(v string) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.Name = &v
	return s
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetResultCode(v int32) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.ResultCode = &v
	return s
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetResultDescrip(v string) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.ResultDescrip = &v
	return s
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetVersion(v string) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.Version = &v
	return s
}

type DistApplicationDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DistApplicationDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DistApplicationDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponse) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponse) SetHeaders(v map[string]*string) *DistApplicationDataResponse {
	s.Headers = v
	return s
}

func (s *DistApplicationDataResponse) SetStatusCode(v int32) *DistApplicationDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DistApplicationDataResponse) SetBody(v *DistApplicationDataResponseBody) *DistApplicationDataResponse {
	s.Body = v
	return s
}

type ExportBillDetailDataRequest struct {
	EndDate   *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s ExportBillDetailDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportBillDetailDataRequest) GoString() string {
	return s.String()
}

func (s *ExportBillDetailDataRequest) SetEndDate(v string) *ExportBillDetailDataRequest {
	s.EndDate = &v
	return s
}

func (s *ExportBillDetailDataRequest) SetStartDate(v string) *ExportBillDetailDataRequest {
	s.StartDate = &v
	return s
}

type ExportBillDetailDataResponseBody struct {
	FilePath  *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportBillDetailDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportBillDetailDataResponseBody) GoString() string {
	return s.String()
}

func (s *ExportBillDetailDataResponseBody) SetFilePath(v string) *ExportBillDetailDataResponseBody {
	s.FilePath = &v
	return s
}

func (s *ExportBillDetailDataResponseBody) SetRequestId(v string) *ExportBillDetailDataResponseBody {
	s.RequestId = &v
	return s
}

type ExportBillDetailDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportBillDetailDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportBillDetailDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportBillDetailDataResponse) GoString() string {
	return s.String()
}

func (s *ExportBillDetailDataResponse) SetHeaders(v map[string]*string) *ExportBillDetailDataResponse {
	s.Headers = v
	return s
}

func (s *ExportBillDetailDataResponse) SetStatusCode(v int32) *ExportBillDetailDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportBillDetailDataResponse) SetBody(v *ExportBillDetailDataResponseBody) *ExportBillDetailDataResponse {
	s.Body = v
	return s
}

type ExportImageRequest struct {
	ImageId     *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	OSSBucket   *string `json:"OSSBucket,omitempty" xml:"OSSBucket,omitempty"`
	OSSPrefix   *string `json:"OSSPrefix,omitempty" xml:"OSSPrefix,omitempty"`
	OSSRegionId *string `json:"OSSRegionId,omitempty" xml:"OSSRegionId,omitempty"`
	RoleName    *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s ExportImageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportImageRequest) GoString() string {
	return s.String()
}

func (s *ExportImageRequest) SetImageId(v string) *ExportImageRequest {
	s.ImageId = &v
	return s
}

func (s *ExportImageRequest) SetOSSBucket(v string) *ExportImageRequest {
	s.OSSBucket = &v
	return s
}

func (s *ExportImageRequest) SetOSSPrefix(v string) *ExportImageRequest {
	s.OSSPrefix = &v
	return s
}

func (s *ExportImageRequest) SetOSSRegionId(v string) *ExportImageRequest {
	s.OSSRegionId = &v
	return s
}

func (s *ExportImageRequest) SetRoleName(v string) *ExportImageRequest {
	s.RoleName = &v
	return s
}

type ExportImageResponseBody struct {
	ExportedImageURL *string `json:"ExportedImageURL,omitempty" xml:"ExportedImageURL,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportImageResponseBody) GoString() string {
	return s.String()
}

func (s *ExportImageResponseBody) SetExportedImageURL(v string) *ExportImageResponseBody {
	s.ExportedImageURL = &v
	return s
}

func (s *ExportImageResponseBody) SetRequestId(v string) *ExportImageResponseBody {
	s.RequestId = &v
	return s
}

type ExportImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportImageResponse) GoString() string {
	return s.String()
}

func (s *ExportImageResponse) SetHeaders(v map[string]*string) *ExportImageResponse {
	s.Headers = v
	return s
}

func (s *ExportImageResponse) SetStatusCode(v int32) *ExportImageResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportImageResponse) SetBody(v *ExportImageResponseBody) *ExportImageResponse {
	s.Body = v
	return s
}

type ExportMeasurementDataRequest struct {
	EndDate   *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s ExportMeasurementDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportMeasurementDataRequest) GoString() string {
	return s.String()
}

func (s *ExportMeasurementDataRequest) SetEndDate(v string) *ExportMeasurementDataRequest {
	s.EndDate = &v
	return s
}

func (s *ExportMeasurementDataRequest) SetStartDate(v string) *ExportMeasurementDataRequest {
	s.StartDate = &v
	return s
}

type ExportMeasurementDataResponseBody struct {
	FilePath  *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportMeasurementDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportMeasurementDataResponseBody) GoString() string {
	return s.String()
}

func (s *ExportMeasurementDataResponseBody) SetFilePath(v string) *ExportMeasurementDataResponseBody {
	s.FilePath = &v
	return s
}

func (s *ExportMeasurementDataResponseBody) SetRequestId(v string) *ExportMeasurementDataResponseBody {
	s.RequestId = &v
	return s
}

type ExportMeasurementDataResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ExportMeasurementDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExportMeasurementDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportMeasurementDataResponse) GoString() string {
	return s.String()
}

func (s *ExportMeasurementDataResponse) SetHeaders(v map[string]*string) *ExportMeasurementDataResponse {
	s.Headers = v
	return s
}

func (s *ExportMeasurementDataResponse) SetStatusCode(v int32) *ExportMeasurementDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportMeasurementDataResponse) SetBody(v *ExportMeasurementDataResponseBody) *ExportMeasurementDataResponse {
	s.Body = v
	return s
}

type GetDeviceInternetPortRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NatType    *string `json:"NatType,omitempty" xml:"NatType,omitempty"`
	RuleId     *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetDeviceInternetPortRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceInternetPortRequest) GoString() string {
	return s.String()
}

func (s *GetDeviceInternetPortRequest) SetInstanceId(v string) *GetDeviceInternetPortRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDeviceInternetPortRequest) SetNatType(v string) *GetDeviceInternetPortRequest {
	s.NatType = &v
	return s
}

func (s *GetDeviceInternetPortRequest) SetRuleId(v string) *GetDeviceInternetPortRequest {
	s.RuleId = &v
	return s
}

type GetDeviceInternetPortResponseBody struct {
	InstanceId  *string                                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NetworkInfo []*GetDeviceInternetPortResponseBodyNetworkInfo `json:"NetworkInfo,omitempty" xml:"NetworkInfo,omitempty" type:"Repeated"`
	RequestId   *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDeviceInternetPortResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceInternetPortResponseBody) GoString() string {
	return s.String()
}

func (s *GetDeviceInternetPortResponseBody) SetInstanceId(v string) *GetDeviceInternetPortResponseBody {
	s.InstanceId = &v
	return s
}

func (s *GetDeviceInternetPortResponseBody) SetNetworkInfo(v []*GetDeviceInternetPortResponseBodyNetworkInfo) *GetDeviceInternetPortResponseBody {
	s.NetworkInfo = v
	return s
}

func (s *GetDeviceInternetPortResponseBody) SetRequestId(v string) *GetDeviceInternetPortResponseBody {
	s.RequestId = &v
	return s
}

type GetDeviceInternetPortResponseBodyNetworkInfo struct {
	ExternalIp   *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	ExternalPort *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	ISP          *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	InternalIp   *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetDeviceInternetPortResponseBodyNetworkInfo) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceInternetPortResponseBodyNetworkInfo) GoString() string {
	return s.String()
}

func (s *GetDeviceInternetPortResponseBodyNetworkInfo) SetExternalIp(v string) *GetDeviceInternetPortResponseBodyNetworkInfo {
	s.ExternalIp = &v
	return s
}

func (s *GetDeviceInternetPortResponseBodyNetworkInfo) SetExternalPort(v string) *GetDeviceInternetPortResponseBodyNetworkInfo {
	s.ExternalPort = &v
	return s
}

func (s *GetDeviceInternetPortResponseBodyNetworkInfo) SetISP(v string) *GetDeviceInternetPortResponseBodyNetworkInfo {
	s.ISP = &v
	return s
}

func (s *GetDeviceInternetPortResponseBodyNetworkInfo) SetInternalIp(v string) *GetDeviceInternetPortResponseBodyNetworkInfo {
	s.InternalIp = &v
	return s
}

func (s *GetDeviceInternetPortResponseBodyNetworkInfo) SetInternalPort(v string) *GetDeviceInternetPortResponseBodyNetworkInfo {
	s.InternalPort = &v
	return s
}

func (s *GetDeviceInternetPortResponseBodyNetworkInfo) SetStatus(v string) *GetDeviceInternetPortResponseBodyNetworkInfo {
	s.Status = &v
	return s
}

type GetDeviceInternetPortResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDeviceInternetPortResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDeviceInternetPortResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDeviceInternetPortResponse) GoString() string {
	return s.String()
}

func (s *GetDeviceInternetPortResponse) SetHeaders(v map[string]*string) *GetDeviceInternetPortResponse {
	s.Headers = v
	return s
}

func (s *GetDeviceInternetPortResponse) SetStatusCode(v int32) *GetDeviceInternetPortResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDeviceInternetPortResponse) SetBody(v *GetDeviceInternetPortResponseBody) *GetDeviceInternetPortResponse {
	s.Body = v
	return s
}

type GetOssStorageAndAccByBucketsRequest struct {
	BucketList *string `json:"BucketList,omitempty" xml:"BucketList,omitempty"`
}

func (s GetOssStorageAndAccByBucketsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsRequest) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsRequest) SetBucketList(v string) *GetOssStorageAndAccByBucketsRequest {
	s.BucketList = &v
	return s
}

type GetOssStorageAndAccByBucketsResponseBody struct {
	BucketList []*GetOssStorageAndAccByBucketsResponseBodyBucketList `json:"BucketList,omitempty" xml:"BucketList,omitempty" type:"Repeated"`
	RequestId  *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetOssStorageAndAccByBucketsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsResponseBody) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsResponseBody) SetBucketList(v []*GetOssStorageAndAccByBucketsResponseBodyBucketList) *GetOssStorageAndAccByBucketsResponseBody {
	s.BucketList = v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponseBody) SetRequestId(v string) *GetOssStorageAndAccByBucketsResponseBody {
	s.RequestId = &v
	return s
}

type GetOssStorageAndAccByBucketsResponseBodyBucketList struct {
	Acc              *int64  `json:"Acc,omitempty" xml:"Acc,omitempty"`
	Bucket           *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	StorageUsageByte *int64  `json:"StorageUsageByte,omitempty" xml:"StorageUsageByte,omitempty"`
}

func (s GetOssStorageAndAccByBucketsResponseBodyBucketList) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsResponseBodyBucketList) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsResponseBodyBucketList) SetAcc(v int64) *GetOssStorageAndAccByBucketsResponseBodyBucketList {
	s.Acc = &v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponseBodyBucketList) SetBucket(v string) *GetOssStorageAndAccByBucketsResponseBodyBucketList {
	s.Bucket = &v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponseBodyBucketList) SetStorageUsageByte(v int64) *GetOssStorageAndAccByBucketsResponseBodyBucketList {
	s.StorageUsageByte = &v
	return s
}

type GetOssStorageAndAccByBucketsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetOssStorageAndAccByBucketsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetOssStorageAndAccByBucketsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsResponse) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsResponse) SetHeaders(v map[string]*string) *GetOssStorageAndAccByBucketsResponse {
	s.Headers = v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponse) SetStatusCode(v int32) *GetOssStorageAndAccByBucketsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponse) SetBody(v *GetOssStorageAndAccByBucketsResponseBody) *GetOssStorageAndAccByBucketsResponse {
	s.Body = v
	return s
}

type ImportKeyPairRequest struct {
	KeyPairName   *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	PublicKeyBody *string `json:"PublicKeyBody,omitempty" xml:"PublicKeyBody,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ImportKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairRequest) GoString() string {
	return s.String()
}

func (s *ImportKeyPairRequest) SetKeyPairName(v string) *ImportKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairRequest) SetPublicKeyBody(v string) *ImportKeyPairRequest {
	s.PublicKeyBody = &v
	return s
}

func (s *ImportKeyPairRequest) SetVersion(v string) *ImportKeyPairRequest {
	s.Version = &v
	return s
}

type ImportKeyPairResponseBody struct {
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	KeyPairName        *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponseBody) SetKeyPairFingerPrint(v string) *ImportKeyPairResponseBody {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *ImportKeyPairResponseBody) SetKeyPairName(v string) *ImportKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairResponseBody) SetRequestId(v string) *ImportKeyPairResponseBody {
	s.RequestId = &v
	return s
}

type ImportKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ImportKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairResponse) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponse) SetHeaders(v map[string]*string) *ImportKeyPairResponse {
	s.Headers = v
	return s
}

func (s *ImportKeyPairResponse) SetStatusCode(v int32) *ImportKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportKeyPairResponse) SetBody(v *ImportKeyPairResponseBody) *ImportKeyPairResponse {
	s.Body = v
	return s
}

type JoinPublicIpsToEpnInstanceRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	InstanceInfos *string `json:"InstanceInfos,omitempty" xml:"InstanceInfos,omitempty"`
}

func (s JoinPublicIpsToEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinPublicIpsToEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *JoinPublicIpsToEpnInstanceRequest) SetEPNInstanceId(v string) *JoinPublicIpsToEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *JoinPublicIpsToEpnInstanceRequest) SetInstanceInfos(v string) *JoinPublicIpsToEpnInstanceRequest {
	s.InstanceInfos = &v
	return s
}

type JoinPublicIpsToEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinPublicIpsToEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinPublicIpsToEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *JoinPublicIpsToEpnInstanceResponseBody) SetRequestId(v string) *JoinPublicIpsToEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type JoinPublicIpsToEpnInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *JoinPublicIpsToEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinPublicIpsToEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinPublicIpsToEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *JoinPublicIpsToEpnInstanceResponse) SetHeaders(v map[string]*string) *JoinPublicIpsToEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *JoinPublicIpsToEpnInstanceResponse) SetStatusCode(v int32) *JoinPublicIpsToEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinPublicIpsToEpnInstanceResponse) SetBody(v *JoinPublicIpsToEpnInstanceResponseBody) *JoinPublicIpsToEpnInstanceResponse {
	s.Body = v
	return s
}

type JoinSecurityGroupRequest struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s JoinSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupRequest) SetInstanceId(v string) *JoinSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetSecurityGroupId(v string) *JoinSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

type JoinSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupResponseBody) SetRequestId(v string) *JoinSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type JoinSecurityGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *JoinSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupResponse) SetHeaders(v map[string]*string) *JoinSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinSecurityGroupResponse) SetStatusCode(v int32) *JoinSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinSecurityGroupResponse) SetBody(v *JoinSecurityGroupResponseBody) *JoinSecurityGroupResponse {
	s.Body = v
	return s
}

type JoinVSwitchesToEpnInstanceRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	VSwitchesInfo *string `json:"VSwitchesInfo,omitempty" xml:"VSwitchesInfo,omitempty"`
}

func (s JoinVSwitchesToEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinVSwitchesToEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *JoinVSwitchesToEpnInstanceRequest) SetEPNInstanceId(v string) *JoinVSwitchesToEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *JoinVSwitchesToEpnInstanceRequest) SetVSwitchesInfo(v string) *JoinVSwitchesToEpnInstanceRequest {
	s.VSwitchesInfo = &v
	return s
}

type JoinVSwitchesToEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinVSwitchesToEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinVSwitchesToEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *JoinVSwitchesToEpnInstanceResponseBody) SetRequestId(v string) *JoinVSwitchesToEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type JoinVSwitchesToEpnInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *JoinVSwitchesToEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinVSwitchesToEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinVSwitchesToEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *JoinVSwitchesToEpnInstanceResponse) SetHeaders(v map[string]*string) *JoinVSwitchesToEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *JoinVSwitchesToEpnInstanceResponse) SetStatusCode(v int32) *JoinVSwitchesToEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinVSwitchesToEpnInstanceResponse) SetBody(v *JoinVSwitchesToEpnInstanceResponseBody) *JoinVSwitchesToEpnInstanceResponse {
	s.Body = v
	return s
}

type LeaveSecurityGroupRequest struct {
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s LeaveSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupRequest) SetInstanceId(v string) *LeaveSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetSecurityGroupId(v string) *LeaveSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetVersion(v string) *LeaveSecurityGroupRequest {
	s.Version = &v
	return s
}

type LeaveSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LeaveSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupResponseBody) SetRequestId(v string) *LeaveSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type LeaveSecurityGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *LeaveSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LeaveSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupResponse) SetHeaders(v map[string]*string) *LeaveSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *LeaveSecurityGroupResponse) SetStatusCode(v int32) *LeaveSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *LeaveSecurityGroupResponse) SetBody(v *LeaveSecurityGroupResponseBody) *LeaveSecurityGroupResponse {
	s.Body = v
	return s
}

type ListApplicationsRequest struct {
	AppVersions      *string `json:"AppVersions,omitempty" xml:"AppVersions,omitempty"`
	ClusterNames     *string `json:"ClusterNames,omitempty" xml:"ClusterNames,omitempty"`
	Level            *string `json:"Level,omitempty" xml:"Level,omitempty"`
	MaxDate          *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	MinDate          *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	OutAppInfoParams *string `json:"OutAppInfoParams,omitempty" xml:"OutAppInfoParams,omitempty"`
	PageNumber       *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationsRequest) SetAppVersions(v string) *ListApplicationsRequest {
	s.AppVersions = &v
	return s
}

func (s *ListApplicationsRequest) SetClusterNames(v string) *ListApplicationsRequest {
	s.ClusterNames = &v
	return s
}

func (s *ListApplicationsRequest) SetLevel(v string) *ListApplicationsRequest {
	s.Level = &v
	return s
}

func (s *ListApplicationsRequest) SetMaxDate(v string) *ListApplicationsRequest {
	s.MaxDate = &v
	return s
}

func (s *ListApplicationsRequest) SetMinDate(v string) *ListApplicationsRequest {
	s.MinDate = &v
	return s
}

func (s *ListApplicationsRequest) SetOutAppInfoParams(v string) *ListApplicationsRequest {
	s.OutAppInfoParams = &v
	return s
}

func (s *ListApplicationsRequest) SetPageNumber(v int32) *ListApplicationsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListApplicationsRequest) SetPageSize(v int32) *ListApplicationsRequest {
	s.PageSize = &v
	return s
}

type ListApplicationsResponseBody struct {
	Applications *ListApplicationsResponseBodyApplications `json:"Applications,omitempty" xml:"Applications,omitempty" type:"Struct"`
	PageNumber   *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount   *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBody) SetApplications(v *ListApplicationsResponseBodyApplications) *ListApplicationsResponseBody {
	s.Applications = v
	return s
}

func (s *ListApplicationsResponseBody) SetPageNumber(v int32) *ListApplicationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListApplicationsResponseBody) SetPageSize(v int32) *ListApplicationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListApplicationsResponseBody) SetRequestId(v string) *ListApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplicationsResponseBody) SetTotalCount(v int32) *ListApplicationsResponseBody {
	s.TotalCount = &v
	return s
}

type ListApplicationsResponseBodyApplications struct {
	Application []*ListApplicationsResponseBodyApplicationsApplication `json:"Application,omitempty" xml:"Application,omitempty" type:"Repeated"`
}

func (s ListApplicationsResponseBodyApplications) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplications) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplications) SetApplication(v []*ListApplicationsResponseBodyApplicationsApplication) *ListApplicationsResponseBodyApplications {
	s.Application = v
	return s
}

type ListApplicationsResponseBodyApplicationsApplication struct {
	AppList     *ListApplicationsResponseBodyApplicationsApplicationAppList `json:"AppList,omitempty" xml:"AppList,omitempty" type:"Struct"`
	ClusterName *string                                                     `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
}

func (s ListApplicationsResponseBodyApplicationsApplication) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplicationsApplication) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplicationsApplication) SetAppList(v *ListApplicationsResponseBodyApplicationsApplicationAppList) *ListApplicationsResponseBodyApplicationsApplication {
	s.AppList = v
	return s
}

func (s *ListApplicationsResponseBodyApplicationsApplication) SetClusterName(v string) *ListApplicationsResponseBodyApplicationsApplication {
	s.ClusterName = &v
	return s
}

type ListApplicationsResponseBodyApplicationsApplicationAppList struct {
	App []*ListApplicationsResponseBodyApplicationsApplicationAppListApp `json:"App,omitempty" xml:"App,omitempty" type:"Repeated"`
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppList) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppList) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplicationsApplicationAppList) SetApp(v []*ListApplicationsResponseBodyApplicationsApplicationAppListApp) *ListApplicationsResponseBodyApplicationsApplicationAppList {
	s.App = v
	return s
}

type ListApplicationsResponseBodyApplicationsApplicationAppListApp struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AppInfo *string `json:"AppInfo,omitempty" xml:"AppInfo,omitempty"`
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppListApp) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppListApp) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplicationsApplicationAppListApp) SetAppId(v string) *ListApplicationsResponseBodyApplicationsApplicationAppListApp {
	s.AppId = &v
	return s
}

func (s *ListApplicationsResponseBodyApplicationsApplicationAppListApp) SetAppInfo(v string) *ListApplicationsResponseBodyApplicationsApplicationAppListApp {
	s.AppInfo = &v
	return s
}

type ListApplicationsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponse) SetHeaders(v map[string]*string) *ListApplicationsResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationsResponse) SetStatusCode(v int32) *ListApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApplicationsResponse) SetBody(v *ListApplicationsResponseBody) *ListApplicationsResponse {
	s.Body = v
	return s
}

type ModifyEnsEipAddressAttributeRequest struct {
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	Bandwidth    *int32  `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyEnsEipAddressAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsEipAddressAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyEnsEipAddressAttributeRequest) SetAllocationId(v string) *ModifyEnsEipAddressAttributeRequest {
	s.AllocationId = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeRequest) SetBandwidth(v int32) *ModifyEnsEipAddressAttributeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeRequest) SetDescription(v string) *ModifyEnsEipAddressAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeRequest) SetName(v string) *ModifyEnsEipAddressAttributeRequest {
	s.Name = &v
	return s
}

type ModifyEnsEipAddressAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEnsEipAddressAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsEipAddressAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEnsEipAddressAttributeResponseBody) SetRequestId(v string) *ModifyEnsEipAddressAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEnsEipAddressAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyEnsEipAddressAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyEnsEipAddressAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsEipAddressAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyEnsEipAddressAttributeResponse) SetHeaders(v map[string]*string) *ModifyEnsEipAddressAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyEnsEipAddressAttributeResponse) SetStatusCode(v int32) *ModifyEnsEipAddressAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeResponse) SetBody(v *ModifyEnsEipAddressAttributeResponseBody) *ModifyEnsEipAddressAttributeResponse {
	s.Body = v
	return s
}

type ModifyEpnInstanceRequest struct {
	EPNInstanceId           *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	EPNInstanceName         *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	InternetMaxBandwidthOut *int32  `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	NetworkingModel         *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
}

func (s ModifyEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyEpnInstanceRequest) SetEPNInstanceId(v string) *ModifyEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *ModifyEpnInstanceRequest) SetEPNInstanceName(v string) *ModifyEpnInstanceRequest {
	s.EPNInstanceName = &v
	return s
}

func (s *ModifyEpnInstanceRequest) SetInternetMaxBandwidthOut(v int32) *ModifyEpnInstanceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *ModifyEpnInstanceRequest) SetNetworkingModel(v string) *ModifyEpnInstanceRequest {
	s.NetworkingModel = &v
	return s
}

type ModifyEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEpnInstanceResponseBody) SetRequestId(v string) *ModifyEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEpnInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyEpnInstanceResponse) SetHeaders(v map[string]*string) *ModifyEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *ModifyEpnInstanceResponse) SetStatusCode(v int32) *ModifyEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEpnInstanceResponse) SetBody(v *ModifyEpnInstanceResponseBody) *ModifyEpnInstanceResponse {
	s.Body = v
	return s
}

type ModifyFileSystemRequest struct {
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EnsRegionId  *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
}

func (s ModifyFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFileSystemRequest) GoString() string {
	return s.String()
}

func (s *ModifyFileSystemRequest) SetDescription(v string) *ModifyFileSystemRequest {
	s.Description = &v
	return s
}

func (s *ModifyFileSystemRequest) SetEnsRegionId(v string) *ModifyFileSystemRequest {
	s.EnsRegionId = &v
	return s
}

func (s *ModifyFileSystemRequest) SetFileSystemId(v string) *ModifyFileSystemRequest {
	s.FileSystemId = &v
	return s
}

type ModifyFileSystemResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFileSystemResponseBody) SetRequestId(v string) *ModifyFileSystemResponseBody {
	s.RequestId = &v
	return s
}

type ModifyFileSystemResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFileSystemResponse) GoString() string {
	return s.String()
}

func (s *ModifyFileSystemResponse) SetHeaders(v map[string]*string) *ModifyFileSystemResponse {
	s.Headers = v
	return s
}

func (s *ModifyFileSystemResponse) SetStatusCode(v int32) *ModifyFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFileSystemResponse) SetBody(v *ModifyFileSystemResponseBody) *ModifyFileSystemResponse {
	s.Body = v
	return s
}

type ModifyForwardEntryRequest struct {
	ForwardEntryId   *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	HealthCheckPort  *int32  `json:"HealthCheckPort,omitempty" xml:"HealthCheckPort,omitempty"`
}

func (s ModifyForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryRequest) SetForwardEntryId(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardEntryName(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetHealthCheckPort(v int32) *ModifyForwardEntryRequest {
	s.HealthCheckPort = &v
	return s
}

type ModifyForwardEntryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponseBody) SetRequestId(v string) *ModifyForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyForwardEntryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponse) SetHeaders(v map[string]*string) *ModifyForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *ModifyForwardEntryResponse) SetStatusCode(v int32) *ModifyForwardEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyForwardEntryResponse) SetBody(v *ModifyForwardEntryResponseBody) *ModifyForwardEntryResponse {
	s.Body = v
	return s
}

type ModifyImageAttributeRequest struct {
	ImageId   *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	Version   *string `json:"Version,omitempty" xml:"Version,omitempty"`
	Product   *string `json:"product,omitempty" xml:"product,omitempty"`
}

func (s ModifyImageAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeRequest) SetImageId(v string) *ModifyImageAttributeRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageName(v string) *ModifyImageAttributeRequest {
	s.ImageName = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetVersion(v string) *ModifyImageAttributeRequest {
	s.Version = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetProduct(v string) *ModifyImageAttributeRequest {
	s.Product = &v
	return s
}

type ModifyImageAttributeResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponseBody) SetCode(v int32) *ModifyImageAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyImageAttributeResponseBody) SetRequestId(v string) *ModifyImageAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageAttributeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyImageAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyImageAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponse) SetHeaders(v map[string]*string) *ModifyImageAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageAttributeResponse) SetStatusCode(v int32) *ModifyImageAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImageAttributeResponse) SetBody(v *ModifyImageAttributeResponseBody) *ModifyImageAttributeResponse {
	s.Body = v
	return s
}

type ModifyImageSharePermissionRequest struct {
	AddAccounts    *string `json:"AddAccounts,omitempty" xml:"AddAccounts,omitempty"`
	ImageId        *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	RemoveAccounts *string `json:"RemoveAccounts,omitempty" xml:"RemoveAccounts,omitempty"`
}

func (s ModifyImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionRequest) SetAddAccounts(v string) *ModifyImageSharePermissionRequest {
	s.AddAccounts = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetImageId(v string) *ModifyImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetRemoveAccounts(v string) *ModifyImageSharePermissionRequest {
	s.RemoveAccounts = &v
	return s
}

type ModifyImageSharePermissionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageSharePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionResponseBody) SetRequestId(v string) *ModifyImageSharePermissionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageSharePermissionResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyImageSharePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionResponse) SetHeaders(v map[string]*string) *ModifyImageSharePermissionResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageSharePermissionResponse) SetStatusCode(v int32) *ModifyImageSharePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImageSharePermissionResponse) SetBody(v *ModifyImageSharePermissionResponseBody) *ModifyImageSharePermissionResponse {
	s.Body = v
	return s
}

type ModifyInstanceAttributeRequest struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	Password     *string `json:"Password,omitempty" xml:"Password,omitempty"`
	Version      *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ModifyInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeRequest) SetInstanceId(v string) *ModifyInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceName(v string) *ModifyInstanceAttributeRequest {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetPassword(v string) *ModifyInstanceAttributeRequest {
	s.Password = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetVersion(v string) *ModifyInstanceAttributeRequest {
	s.Version = &v
	return s
}

type ModifyInstanceAttributeResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponseBody) SetCode(v int32) *ModifyInstanceAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyInstanceAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetStatusCode(v int32) *ModifyInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetBody(v *ModifyInstanceAttributeResponseBody) *ModifyInstanceAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceAutoRenewAttributeRequest struct {
	AutoRenew     *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	Duration      *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	InstanceIds   *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	OwnerId       *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RenewalStatus *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
}

func (s ModifyInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetAutoRenew(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetDuration(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetInstanceIds(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.InstanceIds = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetOwnerId(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetRenewalStatus(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

type ModifyInstanceAutoRenewAttributeResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeResponseBody) SetCode(v int32) *ModifyInstanceAutoRenewAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAutoRenewAttributeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyInstanceAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetStatusCode(v int32) *ModifyInstanceAutoRenewAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetBody(v *ModifyInstanceAutoRenewAttributeResponseBody) *ModifyInstanceAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type ModifyLoadBalancerAttributeRequest struct {
	LoadBalancerId   *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
}

func (s ModifyLoadBalancerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoadBalancerAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyLoadBalancerAttributeRequest) SetLoadBalancerId(v string) *ModifyLoadBalancerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *ModifyLoadBalancerAttributeRequest) SetLoadBalancerName(v string) *ModifyLoadBalancerAttributeRequest {
	s.LoadBalancerName = &v
	return s
}

type ModifyLoadBalancerAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLoadBalancerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoadBalancerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLoadBalancerAttributeResponseBody) SetRequestId(v string) *ModifyLoadBalancerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLoadBalancerAttributeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyLoadBalancerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyLoadBalancerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoadBalancerAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyLoadBalancerAttributeResponse) SetHeaders(v map[string]*string) *ModifyLoadBalancerAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyLoadBalancerAttributeResponse) SetStatusCode(v int32) *ModifyLoadBalancerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLoadBalancerAttributeResponse) SetBody(v *ModifyLoadBalancerAttributeResponseBody) *ModifyLoadBalancerAttributeResponse {
	s.Body = v
	return s
}

type ModifyNetworkAttributeRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
}

func (s ModifyNetworkAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAttributeRequest) SetDescription(v string) *ModifyNetworkAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyNetworkAttributeRequest) SetNetworkId(v string) *ModifyNetworkAttributeRequest {
	s.NetworkId = &v
	return s
}

func (s *ModifyNetworkAttributeRequest) SetNetworkName(v string) *ModifyNetworkAttributeRequest {
	s.NetworkName = &v
	return s
}

type ModifyNetworkAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNetworkAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAttributeResponseBody) SetRequestId(v string) *ModifyNetworkAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNetworkAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyNetworkAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyNetworkAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAttributeResponse) SetHeaders(v map[string]*string) *ModifyNetworkAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyNetworkAttributeResponse) SetStatusCode(v int32) *ModifyNetworkAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNetworkAttributeResponse) SetBody(v *ModifyNetworkAttributeResponseBody) *ModifyNetworkAttributeResponse {
	s.Body = v
	return s
}

type ModifyPrepayInstanceSpecRequest struct {
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s ModifyPrepayInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceId(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceType(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceType = &v
	return s
}

type ModifyPrepayInstanceSpecResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPrepayInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecResponseBody) SetRequestId(v string) *ModifyPrepayInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPrepayInstanceSpecResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyPrepayInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyPrepayInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyPrepayInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyPrepayInstanceSpecResponse) SetStatusCode(v int32) *ModifyPrepayInstanceSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPrepayInstanceSpecResponse) SetBody(v *ModifyPrepayInstanceSpecResponseBody) *ModifyPrepayInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifySecurityGroupAttributeRequest struct {
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId   *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s ModifySecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeRequest) SetDescription(v string) *ModifySecurityGroupAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupId(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupName(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupName = &v
	return s
}

type ModifySecurityGroupAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeResponseBody) SetRequestId(v string) *ModifySecurityGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySecurityGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeResponse) SetHeaders(v map[string]*string) *ModifySecurityGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityGroupAttributeResponse) SetStatusCode(v int32) *ModifySecurityGroupAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySecurityGroupAttributeResponse) SetBody(v *ModifySecurityGroupAttributeResponseBody) *ModifySecurityGroupAttributeResponse {
	s.Body = v
	return s
}

type ModifyVSwitchAttributeRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	VSwitchId   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s ModifyVSwitchAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeRequest) SetDescription(v string) *ModifyVSwitchAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchId(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchName(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchName = &v
	return s
}

type ModifyVSwitchAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVSwitchAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponseBody) SetRequestId(v string) *ModifyVSwitchAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVSwitchAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyVSwitchAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyVSwitchAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponse) SetHeaders(v map[string]*string) *ModifyVSwitchAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyVSwitchAttributeResponse) SetStatusCode(v int32) *ModifyVSwitchAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVSwitchAttributeResponse) SetBody(v *ModifyVSwitchAttributeResponseBody) *ModifyVSwitchAttributeResponse {
	s.Body = v
	return s
}

type PreCreateEnsServiceRequest struct {
	BandwidthType           *string `json:"BandwidthType,omitempty" xml:"BandwidthType,omitempty"`
	BuyResourcesDetail      *string `json:"BuyResourcesDetail,omitempty" xml:"BuyResourcesDetail,omitempty"`
	DataDiskSize            *string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	EnsServiceName          *string `json:"EnsServiceName,omitempty" xml:"EnsServiceName,omitempty"`
	ImageId                 *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceBandwithdLimit  *string `json:"InstanceBandwithdLimit,omitempty" xml:"InstanceBandwithdLimit,omitempty"`
	InstanceSpec            *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	KeyPairName             *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	NetLevel                *string `json:"NetLevel,omitempty" xml:"NetLevel,omitempty"`
	Password                *string `json:"Password,omitempty" xml:"Password,omitempty"`
	SchedulingPriceStrategy *string `json:"SchedulingPriceStrategy,omitempty" xml:"SchedulingPriceStrategy,omitempty"`
	SchedulingStrategy      *string `json:"SchedulingStrategy,omitempty" xml:"SchedulingStrategy,omitempty"`
	SystemDiskSize          *string `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	UserData                *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s PreCreateEnsServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s PreCreateEnsServiceRequest) GoString() string {
	return s.String()
}

func (s *PreCreateEnsServiceRequest) SetBandwidthType(v string) *PreCreateEnsServiceRequest {
	s.BandwidthType = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetBuyResourcesDetail(v string) *PreCreateEnsServiceRequest {
	s.BuyResourcesDetail = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetDataDiskSize(v string) *PreCreateEnsServiceRequest {
	s.DataDiskSize = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetEnsServiceName(v string) *PreCreateEnsServiceRequest {
	s.EnsServiceName = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetImageId(v string) *PreCreateEnsServiceRequest {
	s.ImageId = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetInstanceBandwithdLimit(v string) *PreCreateEnsServiceRequest {
	s.InstanceBandwithdLimit = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetInstanceSpec(v string) *PreCreateEnsServiceRequest {
	s.InstanceSpec = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetKeyPairName(v string) *PreCreateEnsServiceRequest {
	s.KeyPairName = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetNetLevel(v string) *PreCreateEnsServiceRequest {
	s.NetLevel = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetPassword(v string) *PreCreateEnsServiceRequest {
	s.Password = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetSchedulingPriceStrategy(v string) *PreCreateEnsServiceRequest {
	s.SchedulingPriceStrategy = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetSchedulingStrategy(v string) *PreCreateEnsServiceRequest {
	s.SchedulingStrategy = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetSystemDiskSize(v string) *PreCreateEnsServiceRequest {
	s.SystemDiskSize = &v
	return s
}

func (s *PreCreateEnsServiceRequest) SetUserData(v string) *PreCreateEnsServiceRequest {
	s.UserData = &v
	return s
}

type PreCreateEnsServiceResponseBody struct {
	BuyResourcesDetail *string `json:"BuyResourcesDetail,omitempty" xml:"BuyResourcesDetail,omitempty"`
	Code               *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	EnsServiceId       *string `json:"EnsServiceId,omitempty" xml:"EnsServiceId,omitempty"`
	NetLevel           *string `json:"NetLevel,omitempty" xml:"NetLevel,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PreCreateEnsServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PreCreateEnsServiceResponseBody) GoString() string {
	return s.String()
}

func (s *PreCreateEnsServiceResponseBody) SetBuyResourcesDetail(v string) *PreCreateEnsServiceResponseBody {
	s.BuyResourcesDetail = &v
	return s
}

func (s *PreCreateEnsServiceResponseBody) SetCode(v int32) *PreCreateEnsServiceResponseBody {
	s.Code = &v
	return s
}

func (s *PreCreateEnsServiceResponseBody) SetEnsServiceId(v string) *PreCreateEnsServiceResponseBody {
	s.EnsServiceId = &v
	return s
}

func (s *PreCreateEnsServiceResponseBody) SetNetLevel(v string) *PreCreateEnsServiceResponseBody {
	s.NetLevel = &v
	return s
}

func (s *PreCreateEnsServiceResponseBody) SetRequestId(v string) *PreCreateEnsServiceResponseBody {
	s.RequestId = &v
	return s
}

type PreCreateEnsServiceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PreCreateEnsServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PreCreateEnsServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s PreCreateEnsServiceResponse) GoString() string {
	return s.String()
}

func (s *PreCreateEnsServiceResponse) SetHeaders(v map[string]*string) *PreCreateEnsServiceResponse {
	s.Headers = v
	return s
}

func (s *PreCreateEnsServiceResponse) SetStatusCode(v int32) *PreCreateEnsServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *PreCreateEnsServiceResponse) SetBody(v *PreCreateEnsServiceResponseBody) *PreCreateEnsServiceResponse {
	s.Body = v
	return s
}

type PushApplicationDataRequest struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Data         *string `json:"Data,omitempty" xml:"Data,omitempty"`
	PushStrategy *string `json:"PushStrategy,omitempty" xml:"PushStrategy,omitempty"`
	Timeout      *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s PushApplicationDataRequest) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataRequest) GoString() string {
	return s.String()
}

func (s *PushApplicationDataRequest) SetAppId(v string) *PushApplicationDataRequest {
	s.AppId = &v
	return s
}

func (s *PushApplicationDataRequest) SetData(v string) *PushApplicationDataRequest {
	s.Data = &v
	return s
}

func (s *PushApplicationDataRequest) SetPushStrategy(v string) *PushApplicationDataRequest {
	s.PushStrategy = &v
	return s
}

func (s *PushApplicationDataRequest) SetTimeout(v int32) *PushApplicationDataRequest {
	s.Timeout = &v
	return s
}

type PushApplicationDataResponseBody struct {
	PushResults *PushApplicationDataResponseBodyPushResults `json:"PushResults,omitempty" xml:"PushResults,omitempty" type:"Struct"`
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PushApplicationDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponseBody) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponseBody) SetPushResults(v *PushApplicationDataResponseBodyPushResults) *PushApplicationDataResponseBody {
	s.PushResults = v
	return s
}

func (s *PushApplicationDataResponseBody) SetRequestId(v string) *PushApplicationDataResponseBody {
	s.RequestId = &v
	return s
}

type PushApplicationDataResponseBodyPushResults struct {
	PushResult []*PushApplicationDataResponseBodyPushResultsPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Repeated"`
}

func (s PushApplicationDataResponseBodyPushResults) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponseBodyPushResults) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponseBodyPushResults) SetPushResult(v []*PushApplicationDataResponseBodyPushResultsPushResult) *PushApplicationDataResponseBodyPushResults {
	s.PushResult = v
	return s
}

type PushApplicationDataResponseBodyPushResultsPushResult struct {
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ResultCode    *int32  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultDescrip *string `json:"ResultDescrip,omitempty" xml:"ResultDescrip,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s PushApplicationDataResponseBodyPushResultsPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponseBodyPushResultsPushResult) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetName(v string) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.Name = &v
	return s
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetResultCode(v int32) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.ResultCode = &v
	return s
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetResultDescrip(v string) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.ResultDescrip = &v
	return s
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetVersion(v string) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.Version = &v
	return s
}

type PushApplicationDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *PushApplicationDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PushApplicationDataResponse) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponse) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponse) SetHeaders(v map[string]*string) *PushApplicationDataResponse {
	s.Headers = v
	return s
}

func (s *PushApplicationDataResponse) SetStatusCode(v int32) *PushApplicationDataResponse {
	s.StatusCode = &v
	return s
}

func (s *PushApplicationDataResponse) SetBody(v *PushApplicationDataResponseBody) *PushApplicationDataResponse {
	s.Body = v
	return s
}

type ReInitDiskRequest struct {
	DiskId  *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ReInitDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskRequest) GoString() string {
	return s.String()
}

func (s *ReInitDiskRequest) SetDiskId(v string) *ReInitDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ReInitDiskRequest) SetImageId(v string) *ReInitDiskRequest {
	s.ImageId = &v
	return s
}

func (s *ReInitDiskRequest) SetVersion(v string) *ReInitDiskRequest {
	s.Version = &v
	return s
}

type ReInitDiskResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReInitDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ReInitDiskResponseBody) SetCode(v int32) *ReInitDiskResponseBody {
	s.Code = &v
	return s
}

func (s *ReInitDiskResponseBody) SetRequestId(v string) *ReInitDiskResponseBody {
	s.RequestId = &v
	return s
}

type ReInitDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReInitDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReInitDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskResponse) GoString() string {
	return s.String()
}

func (s *ReInitDiskResponse) SetHeaders(v map[string]*string) *ReInitDiskResponse {
	s.Headers = v
	return s
}

func (s *ReInitDiskResponse) SetStatusCode(v int32) *ReInitDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ReInitDiskResponse) SetBody(v *ReInitDiskResponseBody) *ReInitDiskResponse {
	s.Body = v
	return s
}

type RebootAICInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ServerId   *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s RebootAICInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootAICInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootAICInstanceRequest) SetInstanceId(v string) *RebootAICInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RebootAICInstanceRequest) SetServerId(v string) *RebootAICInstanceRequest {
	s.ServerId = &v
	return s
}

type RebootAICInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootAICInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootAICInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootAICInstanceResponseBody) SetRequestId(v string) *RebootAICInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootAICInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RebootAICInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebootAICInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootAICInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootAICInstanceResponse) SetHeaders(v map[string]*string) *RebootAICInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootAICInstanceResponse) SetStatusCode(v int32) *RebootAICInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootAICInstanceResponse) SetBody(v *RebootAICInstanceResponseBody) *RebootAICInstanceResponse {
	s.Body = v
	return s
}

type RebootARMServerInstanceRequest struct {
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s RebootARMServerInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootARMServerInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootARMServerInstanceRequest) SetServerId(v string) *RebootARMServerInstanceRequest {
	s.ServerId = &v
	return s
}

type RebootARMServerInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootARMServerInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootARMServerInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootARMServerInstanceResponseBody) SetRequestId(v string) *RebootARMServerInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootARMServerInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RebootARMServerInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebootARMServerInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootARMServerInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootARMServerInstanceResponse) SetHeaders(v map[string]*string) *RebootARMServerInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootARMServerInstanceResponse) SetStatusCode(v int32) *RebootARMServerInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootARMServerInstanceResponse) SetBody(v *RebootARMServerInstanceResponseBody) *RebootARMServerInstanceResponse {
	s.Body = v
	return s
}

type RebootInstanceRequest struct {
	ForceStop  *string `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RebootInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootInstanceRequest) SetForceStop(v string) *RebootInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *RebootInstanceRequest) SetInstanceId(v string) *RebootInstanceRequest {
	s.InstanceId = &v
	return s
}

type RebootInstanceResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponseBody) SetCode(v int32) *RebootInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *RebootInstanceResponseBody) SetRequestId(v string) *RebootInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RebootInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebootInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponse) SetHeaders(v map[string]*string) *RebootInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootInstanceResponse) SetStatusCode(v int32) *RebootInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootInstanceResponse) SetBody(v *RebootInstanceResponseBody) *RebootInstanceResponse {
	s.Body = v
	return s
}

type ReinitInstanceRequest struct {
	ImageId    *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Password   *string `json:"Password,omitempty" xml:"Password,omitempty"`
}

func (s ReinitInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReinitInstanceRequest) SetImageId(v string) *ReinitInstanceRequest {
	s.ImageId = &v
	return s
}

func (s *ReinitInstanceRequest) SetInstanceId(v string) *ReinitInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ReinitInstanceRequest) SetPassword(v string) *ReinitInstanceRequest {
	s.Password = &v
	return s
}

type ReinitInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReinitInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReinitInstanceResponseBody) SetRequestId(v string) *ReinitInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReinitInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReinitInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReinitInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReinitInstanceResponse) SetHeaders(v map[string]*string) *ReinitInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReinitInstanceResponse) SetStatusCode(v int32) *ReinitInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReinitInstanceResponse) SetBody(v *ReinitInstanceResponseBody) *ReinitInstanceResponse {
	s.Body = v
	return s
}

type ReleaseARMServerInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleaseARMServerInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseARMServerInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseARMServerInstanceRequest) SetInstanceId(v string) *ReleaseARMServerInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleaseARMServerInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseARMServerInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseARMServerInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseARMServerInstanceResponseBody) SetRequestId(v string) *ReleaseARMServerInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseARMServerInstanceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReleaseARMServerInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseARMServerInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseARMServerInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseARMServerInstanceResponse) SetHeaders(v map[string]*string) *ReleaseARMServerInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseARMServerInstanceResponse) SetStatusCode(v int32) *ReleaseARMServerInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseARMServerInstanceResponse) SetBody(v *ReleaseARMServerInstanceResponseBody) *ReleaseARMServerInstanceResponse {
	s.Body = v
	return s
}

type ReleaseInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleaseInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceRequest) SetInstanceId(v string) *ReleaseInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleaseInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceResponseBody) SetRequestId(v string) *ReleaseInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReleaseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceResponse) SetHeaders(v map[string]*string) *ReleaseInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseInstanceResponse) SetStatusCode(v int32) *ReleaseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseInstanceResponse) SetBody(v *ReleaseInstanceResponseBody) *ReleaseInstanceResponse {
	s.Body = v
	return s
}

type ReleasePostPaidInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleasePostPaidInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleasePostPaidInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleasePostPaidInstanceRequest) SetInstanceId(v string) *ReleasePostPaidInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleasePostPaidInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleasePostPaidInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleasePostPaidInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleasePostPaidInstanceResponseBody) SetRequestId(v string) *ReleasePostPaidInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleasePostPaidInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReleasePostPaidInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleasePostPaidInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleasePostPaidInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleasePostPaidInstanceResponse) SetHeaders(v map[string]*string) *ReleasePostPaidInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleasePostPaidInstanceResponse) SetStatusCode(v int32) *ReleasePostPaidInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleasePostPaidInstanceResponse) SetBody(v *ReleasePostPaidInstanceResponseBody) *ReleasePostPaidInstanceResponse {
	s.Body = v
	return s
}

type ReleasePrePaidInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleasePrePaidInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleasePrePaidInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleasePrePaidInstanceRequest) SetInstanceId(v string) *ReleasePrePaidInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleasePrePaidInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleasePrePaidInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleasePrePaidInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleasePrePaidInstanceResponseBody) SetRequestId(v string) *ReleasePrePaidInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleasePrePaidInstanceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReleasePrePaidInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleasePrePaidInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleasePrePaidInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleasePrePaidInstanceResponse) SetHeaders(v map[string]*string) *ReleasePrePaidInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleasePrePaidInstanceResponse) SetStatusCode(v int32) *ReleasePrePaidInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleasePrePaidInstanceResponse) SetBody(v *ReleasePrePaidInstanceResponseBody) *ReleasePrePaidInstanceResponse {
	s.Body = v
	return s
}

type RemoveBackendServersRequest struct {
	BackendServers []*RemoveBackendServersRequestBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	LoadBalancerId *string                                      `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s RemoveBackendServersRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersRequest) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersRequest) SetBackendServers(v []*RemoveBackendServersRequestBackendServers) *RemoveBackendServersRequest {
	s.BackendServers = v
	return s
}

func (s *RemoveBackendServersRequest) SetLoadBalancerId(v string) *RemoveBackendServersRequest {
	s.LoadBalancerId = &v
	return s
}

type RemoveBackendServersRequestBackendServers struct {
	Ip       *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Port     *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Weight   *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s RemoveBackendServersRequestBackendServers) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersRequestBackendServers) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersRequestBackendServers) SetIp(v string) *RemoveBackendServersRequestBackendServers {
	s.Ip = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetPort(v int32) *RemoveBackendServersRequestBackendServers {
	s.Port = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetServerId(v string) *RemoveBackendServersRequestBackendServers {
	s.ServerId = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetType(v string) *RemoveBackendServersRequestBackendServers {
	s.Type = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetWeight(v int32) *RemoveBackendServersRequestBackendServers {
	s.Weight = &v
	return s
}

type RemoveBackendServersShrinkRequest struct {
	BackendServersShrink *string `json:"BackendServers,omitempty" xml:"BackendServers,omitempty"`
	LoadBalancerId       *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s RemoveBackendServersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersShrinkRequest) SetBackendServersShrink(v string) *RemoveBackendServersShrinkRequest {
	s.BackendServersShrink = &v
	return s
}

func (s *RemoveBackendServersShrinkRequest) SetLoadBalancerId(v string) *RemoveBackendServersShrinkRequest {
	s.LoadBalancerId = &v
	return s
}

type RemoveBackendServersResponseBody struct {
	BackendServers *RemoveBackendServersResponseBodyBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Struct"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveBackendServersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponseBody) SetBackendServers(v *RemoveBackendServersResponseBodyBackendServers) *RemoveBackendServersResponseBody {
	s.BackendServers = v
	return s
}

func (s *RemoveBackendServersResponseBody) SetRequestId(v string) *RemoveBackendServersResponseBody {
	s.RequestId = &v
	return s
}

type RemoveBackendServersResponseBodyBackendServers struct {
	BackendServer []*RemoveBackendServersResponseBodyBackendServersBackendServer `json:"BackendServer,omitempty" xml:"BackendServer,omitempty" type:"Repeated"`
}

func (s RemoveBackendServersResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponseBodyBackendServers) SetBackendServer(v []*RemoveBackendServersResponseBodyBackendServersBackendServer) *RemoveBackendServersResponseBodyBackendServers {
	s.BackendServer = v
	return s
}

type RemoveBackendServersResponseBodyBackendServersBackendServer struct {
	Ip       *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Port     *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Weight   *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s RemoveBackendServersResponseBodyBackendServersBackendServer) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponseBodyBackendServersBackendServer) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetIp(v string) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Ip = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetPort(v int32) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Port = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetServerId(v string) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.ServerId = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetType(v string) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Type = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetWeight(v int32) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Weight = &v
	return s
}

type RemoveBackendServersResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveBackendServersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveBackendServersResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponse) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponse) SetHeaders(v map[string]*string) *RemoveBackendServersResponse {
	s.Headers = v
	return s
}

func (s *RemoveBackendServersResponse) SetStatusCode(v int32) *RemoveBackendServersResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveBackendServersResponse) SetBody(v *RemoveBackendServersResponseBody) *RemoveBackendServersResponse {
	s.Body = v
	return s
}

type RemovePublicIpsFromEpnInstanceRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	InstanceInfos *string `json:"InstanceInfos,omitempty" xml:"InstanceInfos,omitempty"`
}

func (s RemovePublicIpsFromEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemovePublicIpsFromEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *RemovePublicIpsFromEpnInstanceRequest) SetEPNInstanceId(v string) *RemovePublicIpsFromEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *RemovePublicIpsFromEpnInstanceRequest) SetInstanceInfos(v string) *RemovePublicIpsFromEpnInstanceRequest {
	s.InstanceInfos = &v
	return s
}

type RemovePublicIpsFromEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemovePublicIpsFromEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemovePublicIpsFromEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RemovePublicIpsFromEpnInstanceResponseBody) SetRequestId(v string) *RemovePublicIpsFromEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RemovePublicIpsFromEpnInstanceResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemovePublicIpsFromEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemovePublicIpsFromEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemovePublicIpsFromEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *RemovePublicIpsFromEpnInstanceResponse) SetHeaders(v map[string]*string) *RemovePublicIpsFromEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *RemovePublicIpsFromEpnInstanceResponse) SetStatusCode(v int32) *RemovePublicIpsFromEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RemovePublicIpsFromEpnInstanceResponse) SetBody(v *RemovePublicIpsFromEpnInstanceResponseBody) *RemovePublicIpsFromEpnInstanceResponse {
	s.Body = v
	return s
}

type RemoveVSwitchesFromEpnInstanceRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	VSwitchesInfo *string `json:"VSwitchesInfo,omitempty" xml:"VSwitchesInfo,omitempty"`
}

func (s RemoveVSwitchesFromEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveVSwitchesFromEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *RemoveVSwitchesFromEpnInstanceRequest) SetEPNInstanceId(v string) *RemoveVSwitchesFromEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *RemoveVSwitchesFromEpnInstanceRequest) SetVSwitchesInfo(v string) *RemoveVSwitchesFromEpnInstanceRequest {
	s.VSwitchesInfo = &v
	return s
}

type RemoveVSwitchesFromEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveVSwitchesFromEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveVSwitchesFromEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveVSwitchesFromEpnInstanceResponseBody) SetRequestId(v string) *RemoveVSwitchesFromEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RemoveVSwitchesFromEpnInstanceResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RemoveVSwitchesFromEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveVSwitchesFromEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveVSwitchesFromEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *RemoveVSwitchesFromEpnInstanceResponse) SetHeaders(v map[string]*string) *RemoveVSwitchesFromEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *RemoveVSwitchesFromEpnInstanceResponse) SetStatusCode(v int32) *RemoveVSwitchesFromEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveVSwitchesFromEpnInstanceResponse) SetBody(v *RemoveVSwitchesFromEpnInstanceResponseBody) *RemoveVSwitchesFromEpnInstanceResponse {
	s.Body = v
	return s
}

type RenewARMServerInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Period     *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s RenewARMServerInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewARMServerInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewARMServerInstanceRequest) SetInstanceId(v string) *RenewARMServerInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewARMServerInstanceRequest) SetPeriod(v int32) *RenewARMServerInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewARMServerInstanceRequest) SetPeriodUnit(v string) *RenewARMServerInstanceRequest {
	s.PeriodUnit = &v
	return s
}

type RenewARMServerInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewARMServerInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewARMServerInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewARMServerInstanceResponseBody) SetRequestId(v string) *RenewARMServerInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RenewARMServerInstanceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RenewARMServerInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RenewARMServerInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewARMServerInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewARMServerInstanceResponse) SetHeaders(v map[string]*string) *RenewARMServerInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewARMServerInstanceResponse) SetStatusCode(v int32) *RenewARMServerInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewARMServerInstanceResponse) SetBody(v *RenewARMServerInstanceResponseBody) *RenewARMServerInstanceResponse {
	s.Body = v
	return s
}

type RenewInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Period     *int64  `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetInstanceId(v string) *RenewInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v int64) *RenewInstanceRequest {
	s.Period = &v
	return s
}

type RenewInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBody) SetRequestId(v string) *RenewInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RenewInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RenewInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetHeaders(v map[string]*string) *RenewInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewInstanceResponse) SetStatusCode(v int32) *RenewInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewInstanceResponse) SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse {
	s.Body = v
	return s
}

type RescaleApplicationRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	RescaleLevel     *string `json:"RescaleLevel,omitempty" xml:"RescaleLevel,omitempty"`
	RescaleType      *string `json:"RescaleType,omitempty" xml:"RescaleType,omitempty"`
	ResourceSelector *string `json:"ResourceSelector,omitempty" xml:"ResourceSelector,omitempty"`
	Timeout          *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	ToAppVersion     *string `json:"ToAppVersion,omitempty" xml:"ToAppVersion,omitempty"`
}

func (s RescaleApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationRequest) GoString() string {
	return s.String()
}

func (s *RescaleApplicationRequest) SetAppId(v string) *RescaleApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RescaleApplicationRequest) SetRescaleLevel(v string) *RescaleApplicationRequest {
	s.RescaleLevel = &v
	return s
}

func (s *RescaleApplicationRequest) SetRescaleType(v string) *RescaleApplicationRequest {
	s.RescaleType = &v
	return s
}

func (s *RescaleApplicationRequest) SetResourceSelector(v string) *RescaleApplicationRequest {
	s.ResourceSelector = &v
	return s
}

func (s *RescaleApplicationRequest) SetTimeout(v int32) *RescaleApplicationRequest {
	s.Timeout = &v
	return s
}

func (s *RescaleApplicationRequest) SetToAppVersion(v string) *RescaleApplicationRequest {
	s.ToAppVersion = &v
	return s
}

type RescaleApplicationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RescaleApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RescaleApplicationResponseBody) SetRequestId(v string) *RescaleApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RescaleApplicationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RescaleApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RescaleApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationResponse) GoString() string {
	return s.String()
}

func (s *RescaleApplicationResponse) SetHeaders(v map[string]*string) *RescaleApplicationResponse {
	s.Headers = v
	return s
}

func (s *RescaleApplicationResponse) SetStatusCode(v int32) *RescaleApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *RescaleApplicationResponse) SetBody(v *RescaleApplicationResponseBody) *RescaleApplicationResponse {
	s.Body = v
	return s
}

type RescaleDeviceServiceRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ImageId          *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	IpType           *int32  `json:"IpType,omitempty" xml:"IpType,omitempty"`
	RescaleLevel     *string `json:"RescaleLevel,omitempty" xml:"RescaleLevel,omitempty"`
	RescaleType      *string `json:"RescaleType,omitempty" xml:"RescaleType,omitempty"`
	ResourceInfo     *string `json:"ResourceInfo,omitempty" xml:"ResourceInfo,omitempty"`
	ResourceSelector *string `json:"ResourceSelector,omitempty" xml:"ResourceSelector,omitempty"`
	ResourceSpec     *string `json:"ResourceSpec,omitempty" xml:"ResourceSpec,omitempty"`
	ServiceId        *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	Timeout          *int64  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s RescaleDeviceServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceRequest) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceRequest) SetAppId(v string) *RescaleDeviceServiceRequest {
	s.AppId = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetImageId(v string) *RescaleDeviceServiceRequest {
	s.ImageId = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetIpType(v int32) *RescaleDeviceServiceRequest {
	s.IpType = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetRescaleLevel(v string) *RescaleDeviceServiceRequest {
	s.RescaleLevel = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetRescaleType(v string) *RescaleDeviceServiceRequest {
	s.RescaleType = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetResourceInfo(v string) *RescaleDeviceServiceRequest {
	s.ResourceInfo = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetResourceSelector(v string) *RescaleDeviceServiceRequest {
	s.ResourceSelector = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetResourceSpec(v string) *RescaleDeviceServiceRequest {
	s.ResourceSpec = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetServiceId(v string) *RescaleDeviceServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetTimeout(v int64) *RescaleDeviceServiceRequest {
	s.Timeout = &v
	return s
}

type RescaleDeviceServiceResponseBody struct {
	DeviceIds           []*string                                              `json:"DeviceIds,omitempty" xml:"DeviceIds,omitempty" type:"Repeated"`
	OrderId             *string                                                `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId           *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceDetailInfos []*RescaleDeviceServiceResponseBodyResourceDetailInfos `json:"ResourceDetailInfos,omitempty" xml:"ResourceDetailInfos,omitempty" type:"Repeated"`
}

func (s RescaleDeviceServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceResponseBody) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceResponseBody) SetDeviceIds(v []*string) *RescaleDeviceServiceResponseBody {
	s.DeviceIds = v
	return s
}

func (s *RescaleDeviceServiceResponseBody) SetOrderId(v string) *RescaleDeviceServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *RescaleDeviceServiceResponseBody) SetRequestId(v string) *RescaleDeviceServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RescaleDeviceServiceResponseBody) SetResourceDetailInfos(v []*RescaleDeviceServiceResponseBodyResourceDetailInfos) *RescaleDeviceServiceResponseBody {
	s.ResourceDetailInfos = v
	return s
}

type RescaleDeviceServiceResponseBodyResourceDetailInfos struct {
	ID       *string `json:"ID,omitempty" xml:"ID,omitempty"`
	IP       *string `json:"IP,omitempty" xml:"IP,omitempty"`
	ISP      *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	Mac      *string `json:"Mac,omitempty" xml:"Mac,omitempty"`
	RegionID *string `json:"RegionID,omitempty" xml:"RegionID,omitempty"`
	Server   *string `json:"Server,omitempty" xml:"Server,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RescaleDeviceServiceResponseBodyResourceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceResponseBodyResourceDetailInfos) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetID(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.ID = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetIP(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.IP = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetISP(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.ISP = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetMac(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Mac = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetRegionID(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.RegionID = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetServer(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Server = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetStatus(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Status = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetType(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Type = &v
	return s
}

type RescaleDeviceServiceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RescaleDeviceServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RescaleDeviceServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceResponse) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceResponse) SetHeaders(v map[string]*string) *RescaleDeviceServiceResponse {
	s.Headers = v
	return s
}

func (s *RescaleDeviceServiceResponse) SetStatusCode(v int32) *RescaleDeviceServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *RescaleDeviceServiceResponse) SetBody(v *RescaleDeviceServiceResponseBody) *RescaleDeviceServiceResponse {
	s.Body = v
	return s
}

type ResetAICInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	ServerId   *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s ResetAICInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAICInstanceRequest) GoString() string {
	return s.String()
}

func (s *ResetAICInstanceRequest) SetInstanceId(v string) *ResetAICInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ResetAICInstanceRequest) SetServerId(v string) *ResetAICInstanceRequest {
	s.ServerId = &v
	return s
}

type ResetAICInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAICInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAICInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAICInstanceResponseBody) SetRequestId(v string) *ResetAICInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ResetAICInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetAICInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetAICInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAICInstanceResponse) GoString() string {
	return s.String()
}

func (s *ResetAICInstanceResponse) SetHeaders(v map[string]*string) *ResetAICInstanceResponse {
	s.Headers = v
	return s
}

func (s *ResetAICInstanceResponse) SetStatusCode(v int32) *ResetAICInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAICInstanceResponse) SetBody(v *ResetAICInstanceResponseBody) *ResetAICInstanceResponse {
	s.Body = v
	return s
}

type ResetDeviceInstanceRequest struct {
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ImageId    *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ResetDeviceInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetDeviceInstanceRequest) GoString() string {
	return s.String()
}

func (s *ResetDeviceInstanceRequest) SetAppId(v string) *ResetDeviceInstanceRequest {
	s.AppId = &v
	return s
}

func (s *ResetDeviceInstanceRequest) SetImageId(v string) *ResetDeviceInstanceRequest {
	s.ImageId = &v
	return s
}

func (s *ResetDeviceInstanceRequest) SetInstanceId(v string) *ResetDeviceInstanceRequest {
	s.InstanceId = &v
	return s
}

type ResetDeviceInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetDeviceInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetDeviceInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ResetDeviceInstanceResponseBody) SetRequestId(v string) *ResetDeviceInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ResetDeviceInstanceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetDeviceInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetDeviceInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetDeviceInstanceResponse) GoString() string {
	return s.String()
}

func (s *ResetDeviceInstanceResponse) SetHeaders(v map[string]*string) *ResetDeviceInstanceResponse {
	s.Headers = v
	return s
}

func (s *ResetDeviceInstanceResponse) SetStatusCode(v int32) *ResetDeviceInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetDeviceInstanceResponse) SetBody(v *ResetDeviceInstanceResponseBody) *ResetDeviceInstanceResponse {
	s.Body = v
	return s
}

type ResizeDiskRequest struct {
	DiskId  *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	NewSize *string `json:"NewSize,omitempty" xml:"NewSize,omitempty"`
}

func (s ResizeDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskRequest) GoString() string {
	return s.String()
}

func (s *ResizeDiskRequest) SetDiskId(v string) *ResizeDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResizeDiskRequest) SetNewSize(v string) *ResizeDiskRequest {
	s.NewSize = &v
	return s
}

type ResizeDiskResponseBody struct {
	OrderId   *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResizeDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ResizeDiskResponseBody) SetOrderId(v string) *ResizeDiskResponseBody {
	s.OrderId = &v
	return s
}

func (s *ResizeDiskResponseBody) SetRequestId(v string) *ResizeDiskResponseBody {
	s.RequestId = &v
	return s
}

type ResizeDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResizeDiskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResizeDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskResponse) GoString() string {
	return s.String()
}

func (s *ResizeDiskResponse) SetHeaders(v map[string]*string) *ResizeDiskResponse {
	s.Headers = v
	return s
}

func (s *ResizeDiskResponse) SetStatusCode(v int32) *ResizeDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ResizeDiskResponse) SetBody(v *ResizeDiskResponseBody) *ResizeDiskResponse {
	s.Body = v
	return s
}

type RestartDeviceInstanceRequest struct {
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RestartDeviceInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartDeviceInstanceRequest) GoString() string {
	return s.String()
}

func (s *RestartDeviceInstanceRequest) SetAppId(v string) *RestartDeviceInstanceRequest {
	s.AppId = &v
	return s
}

func (s *RestartDeviceInstanceRequest) SetInstanceId(v string) *RestartDeviceInstanceRequest {
	s.InstanceId = &v
	return s
}

type RestartDeviceInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartDeviceInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartDeviceInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RestartDeviceInstanceResponseBody) SetRequestId(v string) *RestartDeviceInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RestartDeviceInstanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RestartDeviceInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartDeviceInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartDeviceInstanceResponse) GoString() string {
	return s.String()
}

func (s *RestartDeviceInstanceResponse) SetHeaders(v map[string]*string) *RestartDeviceInstanceResponse {
	s.Headers = v
	return s
}

func (s *RestartDeviceInstanceResponse) SetStatusCode(v int32) *RestartDeviceInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RestartDeviceInstanceResponse) SetBody(v *RestartDeviceInstanceResponseBody) *RestartDeviceInstanceResponse {
	s.Body = v
	return s
}

type RevokeSecurityGroupRequest struct {
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority        *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SourceCidrIp    *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s RevokeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupRequest) SetIpProtocol(v string) *RevokeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPolicy(v string) *RevokeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPortRange(v string) *RevokeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPriority(v int32) *RevokeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceCidrIp(v string) *RevokeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourcePortRange(v string) *RevokeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetVersion(v string) *RevokeSecurityGroupRequest {
	s.Version = &v
	return s
}

type RevokeSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupResponseBody) SetRequestId(v string) *RevokeSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RevokeSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupResponse) SetHeaders(v map[string]*string) *RevokeSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *RevokeSecurityGroupResponse) SetStatusCode(v int32) *RevokeSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeSecurityGroupResponse) SetBody(v *RevokeSecurityGroupResponseBody) *RevokeSecurityGroupResponse {
	s.Body = v
	return s
}

type RevokeSecurityGroupEgressRequest struct {
	DestCidrIp      *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority        *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Version         *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s RevokeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressRequest) SetDestCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpProtocol(v string) *RevokeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPolicy(v string) *RevokeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPriority(v int32) *RevokeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSourcePortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetVersion(v string) *RevokeSecurityGroupEgressRequest {
	s.Version = &v
	return s
}

type RevokeSecurityGroupEgressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeSecurityGroupEgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressResponseBody) SetRequestId(v string) *RevokeSecurityGroupEgressResponseBody {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupEgressResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RevokeSecurityGroupEgressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressResponse) SetHeaders(v map[string]*string) *RevokeSecurityGroupEgressResponse {
	s.Headers = v
	return s
}

func (s *RevokeSecurityGroupEgressResponse) SetStatusCode(v int32) *RevokeSecurityGroupEgressResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeSecurityGroupEgressResponse) SetBody(v *RevokeSecurityGroupEgressResponseBody) *RevokeSecurityGroupEgressResponse {
	s.Body = v
	return s
}

type RollbackApplicationRequest struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	FromAppVersion *string `json:"FromAppVersion,omitempty" xml:"FromAppVersion,omitempty"`
	Timeout        *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	ToAppVersion   *string `json:"ToAppVersion,omitempty" xml:"ToAppVersion,omitempty"`
}

func (s RollbackApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationRequest) GoString() string {
	return s.String()
}

func (s *RollbackApplicationRequest) SetAppId(v string) *RollbackApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RollbackApplicationRequest) SetFromAppVersion(v string) *RollbackApplicationRequest {
	s.FromAppVersion = &v
	return s
}

func (s *RollbackApplicationRequest) SetTimeout(v int32) *RollbackApplicationRequest {
	s.Timeout = &v
	return s
}

func (s *RollbackApplicationRequest) SetToAppVersion(v string) *RollbackApplicationRequest {
	s.ToAppVersion = &v
	return s
}

type RollbackApplicationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RollbackApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponseBody) SetRequestId(v string) *RollbackApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RollbackApplicationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RollbackApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponse) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponse) SetHeaders(v map[string]*string) *RollbackApplicationResponse {
	s.Headers = v
	return s
}

func (s *RollbackApplicationResponse) SetStatusCode(v int32) *RollbackApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *RollbackApplicationResponse) SetBody(v *RollbackApplicationResponseBody) *RollbackApplicationResponse {
	s.Body = v
	return s
}

type RunInstancesRequest struct {
	Amount                  *int64                         `json:"Amount,omitempty" xml:"Amount,omitempty"`
	AutoRenew               *bool                          `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	Carrier                 *string                        `json:"Carrier,omitempty" xml:"Carrier,omitempty"`
	DataDisk                []*RunInstancesRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	EnsRegionId             *string                        `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	HostName                *string                        `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ImageId                 *string                        `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceChargeType      *string                        `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceName            *string                        `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceType            *string                        `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType      *string                        `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthOut *int64                         `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	KeyPairName             *string                        `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	NetDistrictCode         *string                        `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	NetWorkId               *string                        `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
	Password                *string                        `json:"Password,omitempty" xml:"Password,omitempty"`
	Period                  *int64                         `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit              *string                        `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PrivateIpAddress        *string                        `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	PublicIpIdentification  *bool                          `json:"PublicIpIdentification,omitempty" xml:"PublicIpIdentification,omitempty"`
	ScheduleAreaLevel       *string                        `json:"ScheduleAreaLevel,omitempty" xml:"ScheduleAreaLevel,omitempty"`
	SchedulingPriceStrategy *string                        `json:"SchedulingPriceStrategy,omitempty" xml:"SchedulingPriceStrategy,omitempty"`
	SchedulingStrategy      *string                        `json:"SchedulingStrategy,omitempty" xml:"SchedulingStrategy,omitempty"`
	SecurityId              *string                        `json:"SecurityId,omitempty" xml:"SecurityId,omitempty"`
	SystemDisk              *RunInstancesRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	UniqueSuffix            *bool                          `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	UserData                *string                        `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VSwitchId               *string                        `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s RunInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequest) GoString() string {
	return s.String()
}

func (s *RunInstancesRequest) SetAmount(v int64) *RunInstancesRequest {
	s.Amount = &v
	return s
}

func (s *RunInstancesRequest) SetAutoRenew(v bool) *RunInstancesRequest {
	s.AutoRenew = &v
	return s
}

func (s *RunInstancesRequest) SetCarrier(v string) *RunInstancesRequest {
	s.Carrier = &v
	return s
}

func (s *RunInstancesRequest) SetDataDisk(v []*RunInstancesRequestDataDisk) *RunInstancesRequest {
	s.DataDisk = v
	return s
}

func (s *RunInstancesRequest) SetEnsRegionId(v string) *RunInstancesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *RunInstancesRequest) SetHostName(v string) *RunInstancesRequest {
	s.HostName = &v
	return s
}

func (s *RunInstancesRequest) SetImageId(v string) *RunInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceChargeType(v string) *RunInstancesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceName(v string) *RunInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceType(v string) *RunInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *RunInstancesRequest) SetInternetChargeType(v string) *RunInstancesRequest {
	s.InternetChargeType = &v
	return s
}

func (s *RunInstancesRequest) SetInternetMaxBandwidthOut(v int64) *RunInstancesRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *RunInstancesRequest) SetKeyPairName(v string) *RunInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *RunInstancesRequest) SetNetDistrictCode(v string) *RunInstancesRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *RunInstancesRequest) SetNetWorkId(v string) *RunInstancesRequest {
	s.NetWorkId = &v
	return s
}

func (s *RunInstancesRequest) SetPassword(v string) *RunInstancesRequest {
	s.Password = &v
	return s
}

func (s *RunInstancesRequest) SetPeriod(v int64) *RunInstancesRequest {
	s.Period = &v
	return s
}

func (s *RunInstancesRequest) SetPeriodUnit(v string) *RunInstancesRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RunInstancesRequest) SetPrivateIpAddress(v string) *RunInstancesRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RunInstancesRequest) SetPublicIpIdentification(v bool) *RunInstancesRequest {
	s.PublicIpIdentification = &v
	return s
}

func (s *RunInstancesRequest) SetScheduleAreaLevel(v string) *RunInstancesRequest {
	s.ScheduleAreaLevel = &v
	return s
}

func (s *RunInstancesRequest) SetSchedulingPriceStrategy(v string) *RunInstancesRequest {
	s.SchedulingPriceStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetSchedulingStrategy(v string) *RunInstancesRequest {
	s.SchedulingStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityId(v string) *RunInstancesRequest {
	s.SecurityId = &v
	return s
}

func (s *RunInstancesRequest) SetSystemDisk(v *RunInstancesRequestSystemDisk) *RunInstancesRequest {
	s.SystemDisk = v
	return s
}

func (s *RunInstancesRequest) SetUniqueSuffix(v bool) *RunInstancesRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *RunInstancesRequest) SetUserData(v string) *RunInstancesRequest {
	s.UserData = &v
	return s
}

func (s *RunInstancesRequest) SetVSwitchId(v string) *RunInstancesRequest {
	s.VSwitchId = &v
	return s
}

type RunInstancesRequestDataDisk struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Size     *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s RunInstancesRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestDataDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestDataDisk) SetCategory(v string) *RunInstancesRequestDataDisk {
	s.Category = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetSize(v int64) *RunInstancesRequestDataDisk {
	s.Size = &v
	return s
}

type RunInstancesRequestSystemDisk struct {
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s RunInstancesRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestSystemDisk) SetSize(v int64) *RunInstancesRequestSystemDisk {
	s.Size = &v
	return s
}

type RunInstancesShrinkRequest struct {
	Amount                  *int64  `json:"Amount,omitempty" xml:"Amount,omitempty"`
	AutoRenew               *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	Carrier                 *string `json:"Carrier,omitempty" xml:"Carrier,omitempty"`
	DataDiskShrink          *string `json:"DataDisk,omitempty" xml:"DataDisk,omitempty"`
	EnsRegionId             *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ImageId                 *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceChargeType      *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceName            *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	InstanceType            *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InternetChargeType      *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	InternetMaxBandwidthOut *int64  `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	KeyPairName             *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	NetDistrictCode         *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	NetWorkId               *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
	Password                *string `json:"Password,omitempty" xml:"Password,omitempty"`
	Period                  *int64  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit              *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PrivateIpAddress        *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	PublicIpIdentification  *bool   `json:"PublicIpIdentification,omitempty" xml:"PublicIpIdentification,omitempty"`
	ScheduleAreaLevel       *string `json:"ScheduleAreaLevel,omitempty" xml:"ScheduleAreaLevel,omitempty"`
	SchedulingPriceStrategy *string `json:"SchedulingPriceStrategy,omitempty" xml:"SchedulingPriceStrategy,omitempty"`
	SchedulingStrategy      *string `json:"SchedulingStrategy,omitempty" xml:"SchedulingStrategy,omitempty"`
	SecurityId              *string `json:"SecurityId,omitempty" xml:"SecurityId,omitempty"`
	SystemDiskShrink        *string `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty"`
	UniqueSuffix            *bool   `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	UserData                *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VSwitchId               *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s RunInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunInstancesShrinkRequest) SetAmount(v int64) *RunInstancesShrinkRequest {
	s.Amount = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetAutoRenew(v bool) *RunInstancesShrinkRequest {
	s.AutoRenew = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetCarrier(v string) *RunInstancesShrinkRequest {
	s.Carrier = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetDataDiskShrink(v string) *RunInstancesShrinkRequest {
	s.DataDiskShrink = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetEnsRegionId(v string) *RunInstancesShrinkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetHostName(v string) *RunInstancesShrinkRequest {
	s.HostName = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetImageId(v string) *RunInstancesShrinkRequest {
	s.ImageId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInstanceChargeType(v string) *RunInstancesShrinkRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInstanceName(v string) *RunInstancesShrinkRequest {
	s.InstanceName = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInstanceType(v string) *RunInstancesShrinkRequest {
	s.InstanceType = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInternetChargeType(v string) *RunInstancesShrinkRequest {
	s.InternetChargeType = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInternetMaxBandwidthOut(v int64) *RunInstancesShrinkRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetKeyPairName(v string) *RunInstancesShrinkRequest {
	s.KeyPairName = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetNetDistrictCode(v string) *RunInstancesShrinkRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetNetWorkId(v string) *RunInstancesShrinkRequest {
	s.NetWorkId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPassword(v string) *RunInstancesShrinkRequest {
	s.Password = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPeriod(v int64) *RunInstancesShrinkRequest {
	s.Period = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPeriodUnit(v string) *RunInstancesShrinkRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPrivateIpAddress(v string) *RunInstancesShrinkRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPublicIpIdentification(v bool) *RunInstancesShrinkRequest {
	s.PublicIpIdentification = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetScheduleAreaLevel(v string) *RunInstancesShrinkRequest {
	s.ScheduleAreaLevel = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSchedulingPriceStrategy(v string) *RunInstancesShrinkRequest {
	s.SchedulingPriceStrategy = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSchedulingStrategy(v string) *RunInstancesShrinkRequest {
	s.SchedulingStrategy = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSecurityId(v string) *RunInstancesShrinkRequest {
	s.SecurityId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSystemDiskShrink(v string) *RunInstancesShrinkRequest {
	s.SystemDiskShrink = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetUniqueSuffix(v bool) *RunInstancesShrinkRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetUserData(v string) *RunInstancesShrinkRequest {
	s.UserData = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetVSwitchId(v string) *RunInstancesShrinkRequest {
	s.VSwitchId = &v
	return s
}

type RunInstancesResponseBody struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	OrderId     *string   `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId   *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RunInstancesResponseBody) SetInstanceIds(v []*string) *RunInstancesResponseBody {
	s.InstanceIds = v
	return s
}

func (s *RunInstancesResponseBody) SetOrderId(v string) *RunInstancesResponseBody {
	s.OrderId = &v
	return s
}

func (s *RunInstancesResponseBody) SetRequestId(v string) *RunInstancesResponseBody {
	s.RequestId = &v
	return s
}

type RunInstancesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RunInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponse) GoString() string {
	return s.String()
}

func (s *RunInstancesResponse) SetHeaders(v map[string]*string) *RunInstancesResponse {
	s.Headers = v
	return s
}

func (s *RunInstancesResponse) SetStatusCode(v int32) *RunInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RunInstancesResponse) SetBody(v *RunInstancesResponseBody) *RunInstancesResponse {
	s.Body = v
	return s
}

type RunServiceScheduleRequest struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ClientIp         *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	Directorys       *string `json:"Directorys,omitempty" xml:"Directorys,omitempty"`
	PodConfigName    *string `json:"PodConfigName,omitempty" xml:"PodConfigName,omitempty"`
	PreLockedTimeout *int32  `json:"PreLockedTimeout,omitempty" xml:"PreLockedTimeout,omitempty"`
	ScheduleStrategy *string `json:"ScheduleStrategy,omitempty" xml:"ScheduleStrategy,omitempty"`
	ServiceAction    *string `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty"`
	ServiceCommands  *string `json:"ServiceCommands,omitempty" xml:"ServiceCommands,omitempty"`
	Uuid             *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s RunServiceScheduleRequest) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleRequest) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleRequest) SetAppId(v string) *RunServiceScheduleRequest {
	s.AppId = &v
	return s
}

func (s *RunServiceScheduleRequest) SetClientIp(v string) *RunServiceScheduleRequest {
	s.ClientIp = &v
	return s
}

func (s *RunServiceScheduleRequest) SetDirectorys(v string) *RunServiceScheduleRequest {
	s.Directorys = &v
	return s
}

func (s *RunServiceScheduleRequest) SetPodConfigName(v string) *RunServiceScheduleRequest {
	s.PodConfigName = &v
	return s
}

func (s *RunServiceScheduleRequest) SetPreLockedTimeout(v int32) *RunServiceScheduleRequest {
	s.PreLockedTimeout = &v
	return s
}

func (s *RunServiceScheduleRequest) SetScheduleStrategy(v string) *RunServiceScheduleRequest {
	s.ScheduleStrategy = &v
	return s
}

func (s *RunServiceScheduleRequest) SetServiceAction(v string) *RunServiceScheduleRequest {
	s.ServiceAction = &v
	return s
}

func (s *RunServiceScheduleRequest) SetServiceCommands(v string) *RunServiceScheduleRequest {
	s.ServiceCommands = &v
	return s
}

func (s *RunServiceScheduleRequest) SetUuid(v string) *RunServiceScheduleRequest {
	s.Uuid = &v
	return s
}

type RunServiceScheduleResponseBody struct {
	CommandResults  *RunServiceScheduleResponseBodyCommandResults `json:"CommandResults,omitempty" xml:"CommandResults,omitempty" type:"Struct"`
	Index           *int32                                        `json:"Index,omitempty" xml:"Index,omitempty"`
	InstanceId      *string                                       `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceIp      *string                                       `json:"InstanceIp,omitempty" xml:"InstanceIp,omitempty"`
	InstancePort    *int32                                        `json:"InstancePort,omitempty" xml:"InstancePort,omitempty"`
	RequestId       *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RequestRepeated *string                                       `json:"RequestRepeated,omitempty" xml:"RequestRepeated,omitempty"`
	TcpPorts        *bool                                         `json:"TcpPorts,omitempty" xml:"TcpPorts,omitempty"`
}

func (s RunServiceScheduleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponseBody) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponseBody) SetCommandResults(v *RunServiceScheduleResponseBodyCommandResults) *RunServiceScheduleResponseBody {
	s.CommandResults = v
	return s
}

func (s *RunServiceScheduleResponseBody) SetIndex(v int32) *RunServiceScheduleResponseBody {
	s.Index = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetInstanceId(v string) *RunServiceScheduleResponseBody {
	s.InstanceId = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetInstanceIp(v string) *RunServiceScheduleResponseBody {
	s.InstanceIp = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetInstancePort(v int32) *RunServiceScheduleResponseBody {
	s.InstancePort = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetRequestId(v string) *RunServiceScheduleResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetRequestRepeated(v string) *RunServiceScheduleResponseBody {
	s.RequestRepeated = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetTcpPorts(v bool) *RunServiceScheduleResponseBody {
	s.TcpPorts = &v
	return s
}

type RunServiceScheduleResponseBodyCommandResults struct {
	CommandResult []*RunServiceScheduleResponseBodyCommandResultsCommandResult `json:"CommandResult,omitempty" xml:"CommandResult,omitempty" type:"Repeated"`
}

func (s RunServiceScheduleResponseBodyCommandResults) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponseBodyCommandResults) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponseBodyCommandResults) SetCommandResult(v []*RunServiceScheduleResponseBodyCommandResultsCommandResult) *RunServiceScheduleResponseBodyCommandResults {
	s.CommandResult = v
	return s
}

type RunServiceScheduleResponseBodyCommandResultsCommandResult struct {
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ContainerName *string `json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	ResultMsg     *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
}

func (s RunServiceScheduleResponseBodyCommandResultsCommandResult) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponseBodyCommandResultsCommandResult) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponseBodyCommandResultsCommandResult) SetCommand(v string) *RunServiceScheduleResponseBodyCommandResultsCommandResult {
	s.Command = &v
	return s
}

func (s *RunServiceScheduleResponseBodyCommandResultsCommandResult) SetContainerName(v string) *RunServiceScheduleResponseBodyCommandResultsCommandResult {
	s.ContainerName = &v
	return s
}

func (s *RunServiceScheduleResponseBodyCommandResultsCommandResult) SetResultMsg(v string) *RunServiceScheduleResponseBodyCommandResultsCommandResult {
	s.ResultMsg = &v
	return s
}

type RunServiceScheduleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RunServiceScheduleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunServiceScheduleResponse) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponse) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponse) SetHeaders(v map[string]*string) *RunServiceScheduleResponse {
	s.Headers = v
	return s
}

func (s *RunServiceScheduleResponse) SetStatusCode(v int32) *RunServiceScheduleResponse {
	s.StatusCode = &v
	return s
}

func (s *RunServiceScheduleResponse) SetBody(v *RunServiceScheduleResponseBody) *RunServiceScheduleResponse {
	s.Body = v
	return s
}

type SetBackendServersRequest struct {
	BackendServers []*SetBackendServersRequestBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	LoadBalancerId *string                                   `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s SetBackendServersRequest) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersRequest) GoString() string {
	return s.String()
}

func (s *SetBackendServersRequest) SetBackendServers(v []*SetBackendServersRequestBackendServers) *SetBackendServersRequest {
	s.BackendServers = v
	return s
}

func (s *SetBackendServersRequest) SetLoadBalancerId(v string) *SetBackendServersRequest {
	s.LoadBalancerId = &v
	return s
}

type SetBackendServersRequestBackendServers struct {
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Weight   *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s SetBackendServersRequestBackendServers) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersRequestBackendServers) GoString() string {
	return s.String()
}

func (s *SetBackendServersRequestBackendServers) SetServerId(v string) *SetBackendServersRequestBackendServers {
	s.ServerId = &v
	return s
}

func (s *SetBackendServersRequestBackendServers) SetType(v string) *SetBackendServersRequestBackendServers {
	s.Type = &v
	return s
}

func (s *SetBackendServersRequestBackendServers) SetWeight(v int32) *SetBackendServersRequestBackendServers {
	s.Weight = &v
	return s
}

type SetBackendServersShrinkRequest struct {
	BackendServersShrink *string `json:"BackendServers,omitempty" xml:"BackendServers,omitempty"`
	LoadBalancerId       *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s SetBackendServersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetBackendServersShrinkRequest) SetBackendServersShrink(v string) *SetBackendServersShrinkRequest {
	s.BackendServersShrink = &v
	return s
}

func (s *SetBackendServersShrinkRequest) SetLoadBalancerId(v string) *SetBackendServersShrinkRequest {
	s.LoadBalancerId = &v
	return s
}

type SetBackendServersResponseBody struct {
	BackendServers *SetBackendServersResponseBodyBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Struct"`
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetBackendServersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponseBody) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponseBody) SetBackendServers(v *SetBackendServersResponseBodyBackendServers) *SetBackendServersResponseBody {
	s.BackendServers = v
	return s
}

func (s *SetBackendServersResponseBody) SetRequestId(v string) *SetBackendServersResponseBody {
	s.RequestId = &v
	return s
}

type SetBackendServersResponseBodyBackendServers struct {
	BackendServer []*SetBackendServersResponseBodyBackendServersBackendServer `json:"BackendServer,omitempty" xml:"BackendServer,omitempty" type:"Repeated"`
}

func (s SetBackendServersResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponseBodyBackendServers) SetBackendServer(v []*SetBackendServersResponseBodyBackendServersBackendServer) *SetBackendServersResponseBodyBackendServers {
	s.BackendServer = v
	return s
}

type SetBackendServersResponseBodyBackendServersBackendServer struct {
	Ip       *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Port     *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Weight   *int32  `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s SetBackendServersResponseBodyBackendServersBackendServer) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponseBodyBackendServersBackendServer) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetIp(v string) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Ip = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetPort(v int32) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Port = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetServerId(v string) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.ServerId = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetType(v string) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Type = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetWeight(v int32) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Weight = &v
	return s
}

type SetBackendServersResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetBackendServersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetBackendServersResponse) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponse) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponse) SetHeaders(v map[string]*string) *SetBackendServersResponse {
	s.Headers = v
	return s
}

func (s *SetBackendServersResponse) SetStatusCode(v int32) *SetBackendServersResponse {
	s.StatusCode = &v
	return s
}

func (s *SetBackendServersResponse) SetBody(v *SetBackendServersResponseBody) *SetBackendServersResponse {
	s.Body = v
	return s
}

type SetLoadBalancerHTTPListenerAttributeRequest struct {
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HealthCheck            *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckDomain      *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode    *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval    *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod      *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout     *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckURI         *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold       *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	IdleTimeout            *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	ListenerPort           *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId         *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	RequestTimeout         *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler              *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	UnhealthyThreshold     *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s SetLoadBalancerHTTPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheck(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheck = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckDomain(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckHttpCode(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckMethod(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckTimeout(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckURI(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetIdleTimeout(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.IdleTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetRequestTimeout(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.RequestTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

type SetLoadBalancerHTTPListenerAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerHTTPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerHTTPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerHTTPListenerAttributeResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLoadBalancerHTTPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLoadBalancerHTTPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerHTTPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerHTTPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeResponse) SetBody(v *SetLoadBalancerHTTPListenerAttributeResponseBody) *SetLoadBalancerHTTPListenerAttributeResponse {
	s.Body = v
	return s
}

type SetLoadBalancerHTTPSListenerAttributeRequest struct {
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HealthCheck            *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckDomain      *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode    *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval    *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod      *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout     *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckURI         *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold       *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	IdleTimeout            *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	ListenerPort           *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId         *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	RequestTimeout         *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler              *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServerCertificateId    *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	UnhealthyThreshold     *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s SetLoadBalancerHTTPSListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPSListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheck(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheck = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckDomain(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckHttpCode(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckMethod(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckTimeout(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckURI(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetIdleTimeout(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.IdleTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetRequestTimeout(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.RequestTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetServerCertificateId(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.ServerCertificateId = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

type SetLoadBalancerHTTPSListenerAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerHTTPSListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPSListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerHTTPSListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerHTTPSListenerAttributeResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLoadBalancerHTTPSListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLoadBalancerHTTPSListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPSListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerHTTPSListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerHTTPSListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponse) SetBody(v *SetLoadBalancerHTTPSListenerAttributeResponseBody) *SetLoadBalancerHTTPSListenerAttributeResponse {
	s.Body = v
	return s
}

type SetLoadBalancerStatusRequest struct {
	LoadBalancerId     *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	LoadBalancerStatus *string `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
}

func (s SetLoadBalancerStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerStatusRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerStatusRequest) SetLoadBalancerId(v string) *SetLoadBalancerStatusRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerStatusRequest) SetLoadBalancerStatus(v string) *SetLoadBalancerStatusRequest {
	s.LoadBalancerStatus = &v
	return s
}

type SetLoadBalancerStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerStatusResponseBody) SetRequestId(v string) *SetLoadBalancerStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLoadBalancerStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLoadBalancerStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerStatusResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerStatusResponse) SetHeaders(v map[string]*string) *SetLoadBalancerStatusResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerStatusResponse) SetStatusCode(v int32) *SetLoadBalancerStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerStatusResponse) SetBody(v *SetLoadBalancerStatusResponseBody) *SetLoadBalancerStatusResponse {
	s.Body = v
	return s
}

type SetLoadBalancerTCPListenerAttributeRequest struct {
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EipTransmit               *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	EstablishedTimeout        *int32  `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckDomain         *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode       *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckType           *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	HealthCheckURI            *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	ListenerPort              *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId            *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	PersistenceTimeout        *int32  `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	Scheduler                 *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s SetLoadBalancerTCPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerTCPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetEipTransmit(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.EipTransmit = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetEstablishedTimeout(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckConnectTimeout(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckDomain(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckHttpCode(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckType(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckType = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckURI(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetPersistenceTimeout(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.PersistenceTimeout = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

type SetLoadBalancerTCPListenerAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerTCPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerTCPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerTCPListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerTCPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerTCPListenerAttributeResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLoadBalancerTCPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLoadBalancerTCPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerTCPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerTCPListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerTCPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerTCPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeResponse) SetBody(v *SetLoadBalancerTCPListenerAttributeResponseBody) *SetLoadBalancerTCPListenerAttributeResponse {
	s.Body = v
	return s
}

type SetLoadBalancerUDPListenerAttributeRequest struct {
	Description               *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EipTransmit               *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckExp            *string `json:"HealthCheckExp,omitempty" xml:"HealthCheckExp,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckReq            *string `json:"HealthCheckReq,omitempty" xml:"HealthCheckReq,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	ListenerPort              *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	LoadBalancerId            *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	Scheduler                 *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s SetLoadBalancerUDPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerUDPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetEipTransmit(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.EipTransmit = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckConnectTimeout(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckExp(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckExp = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckReq(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckReq = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

type SetLoadBalancerUDPListenerAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerUDPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerUDPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerUDPListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerUDPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerUDPListenerAttributeResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetLoadBalancerUDPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetLoadBalancerUDPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerUDPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerUDPListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerUDPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerUDPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeResponse) SetBody(v *SetLoadBalancerUDPListenerAttributeResponseBody) *SetLoadBalancerUDPListenerAttributeResponse {
	s.Body = v
	return s
}

type StartEpnInstanceRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s StartEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartEpnInstanceRequest) SetEPNInstanceId(v string) *StartEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

type StartEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartEpnInstanceResponseBody) SetRequestId(v string) *StartEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartEpnInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartEpnInstanceResponse) SetHeaders(v map[string]*string) *StartEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartEpnInstanceResponse) SetStatusCode(v int32) *StartEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartEpnInstanceResponse) SetBody(v *StartEpnInstanceResponseBody) *StartEpnInstanceResponse {
	s.Body = v
	return s
}

type StartInstanceRequest struct {
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StartInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartInstanceRequest) SetInstanceId(v string) *StartInstanceRequest {
	s.InstanceId = &v
	return s
}

type StartInstanceResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstanceResponseBody) SetCode(v int32) *StartInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *StartInstanceResponseBody) SetRequestId(v string) *StartInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstanceResponse) SetHeaders(v map[string]*string) *StartInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartInstanceResponse) SetStatusCode(v int32) *StartInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartInstanceResponse) SetBody(v *StartInstanceResponseBody) *StartInstanceResponse {
	s.Body = v
	return s
}

type StartLoadBalancerListenerRequest struct {
	ListenerPort     *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	LoadBalancerId   *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s StartLoadBalancerListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLoadBalancerListenerRequest) GoString() string {
	return s.String()
}

func (s *StartLoadBalancerListenerRequest) SetListenerPort(v int32) *StartLoadBalancerListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *StartLoadBalancerListenerRequest) SetListenerProtocol(v string) *StartLoadBalancerListenerRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *StartLoadBalancerListenerRequest) SetLoadBalancerId(v string) *StartLoadBalancerListenerRequest {
	s.LoadBalancerId = &v
	return s
}

type StartLoadBalancerListenerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartLoadBalancerListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartLoadBalancerListenerResponseBody) GoString() string {
	return s.String()
}

func (s *StartLoadBalancerListenerResponseBody) SetRequestId(v string) *StartLoadBalancerListenerResponseBody {
	s.RequestId = &v
	return s
}

type StartLoadBalancerListenerResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartLoadBalancerListenerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartLoadBalancerListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLoadBalancerListenerResponse) GoString() string {
	return s.String()
}

func (s *StartLoadBalancerListenerResponse) SetHeaders(v map[string]*string) *StartLoadBalancerListenerResponse {
	s.Headers = v
	return s
}

func (s *StartLoadBalancerListenerResponse) SetStatusCode(v int32) *StartLoadBalancerListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *StartLoadBalancerListenerResponse) SetBody(v *StartLoadBalancerListenerResponseBody) *StartLoadBalancerListenerResponse {
	s.Body = v
	return s
}

type StopEpnInstanceRequest struct {
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s StopEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopEpnInstanceRequest) SetEPNInstanceId(v string) *StopEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

type StopEpnInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopEpnInstanceResponseBody) SetRequestId(v string) *StopEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopEpnInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopEpnInstanceResponse) SetHeaders(v map[string]*string) *StopEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopEpnInstanceResponse) SetStatusCode(v int32) *StopEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopEpnInstanceResponse) SetBody(v *StopEpnInstanceResponseBody) *StopEpnInstanceResponse {
	s.Body = v
	return s
}

type StopInstanceRequest struct {
	ForceStop  *string `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Version    *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s StopInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopInstanceRequest) SetForceStop(v string) *StopInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *StopInstanceRequest) SetInstanceId(v string) *StopInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *StopInstanceRequest) SetVersion(v string) *StopInstanceRequest {
	s.Version = &v
	return s
}

type StopInstanceResponseBody struct {
	Code      *int32  `json:"Code,omitempty" xml:"Code,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstanceResponseBody) SetCode(v int32) *StopInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *StopInstanceResponseBody) SetRequestId(v string) *StopInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopInstanceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopInstanceResponse) SetHeaders(v map[string]*string) *StopInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopInstanceResponse) SetStatusCode(v int32) *StopInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopInstanceResponse) SetBody(v *StopInstanceResponseBody) *StopInstanceResponse {
	s.Body = v
	return s
}

type StopLoadBalancerListenerRequest struct {
	ListenerPort     *int32  `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	LoadBalancerId   *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s StopLoadBalancerListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLoadBalancerListenerRequest) GoString() string {
	return s.String()
}

func (s *StopLoadBalancerListenerRequest) SetListenerPort(v int32) *StopLoadBalancerListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *StopLoadBalancerListenerRequest) SetListenerProtocol(v string) *StopLoadBalancerListenerRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *StopLoadBalancerListenerRequest) SetLoadBalancerId(v string) *StopLoadBalancerListenerRequest {
	s.LoadBalancerId = &v
	return s
}

type StopLoadBalancerListenerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopLoadBalancerListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopLoadBalancerListenerResponseBody) GoString() string {
	return s.String()
}

func (s *StopLoadBalancerListenerResponseBody) SetRequestId(v string) *StopLoadBalancerListenerResponseBody {
	s.RequestId = &v
	return s
}

type StopLoadBalancerListenerResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopLoadBalancerListenerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopLoadBalancerListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLoadBalancerListenerResponse) GoString() string {
	return s.String()
}

func (s *StopLoadBalancerListenerResponse) SetHeaders(v map[string]*string) *StopLoadBalancerListenerResponse {
	s.Headers = v
	return s
}

func (s *StopLoadBalancerListenerResponse) SetStatusCode(v int32) *StopLoadBalancerListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *StopLoadBalancerListenerResponse) SetBody(v *StopLoadBalancerListenerResponseBody) *StopLoadBalancerListenerResponse {
	s.Body = v
	return s
}

type UnAssociateEnsEipAddressRequest struct {
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
}

func (s UnAssociateEnsEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s UnAssociateEnsEipAddressRequest) GoString() string {
	return s.String()
}

func (s *UnAssociateEnsEipAddressRequest) SetAllocationId(v string) *UnAssociateEnsEipAddressRequest {
	s.AllocationId = &v
	return s
}

type UnAssociateEnsEipAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnAssociateEnsEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnAssociateEnsEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *UnAssociateEnsEipAddressResponseBody) SetRequestId(v string) *UnAssociateEnsEipAddressResponseBody {
	s.RequestId = &v
	return s
}

type UnAssociateEnsEipAddressResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnAssociateEnsEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnAssociateEnsEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s UnAssociateEnsEipAddressResponse) GoString() string {
	return s.String()
}

func (s *UnAssociateEnsEipAddressResponse) SetHeaders(v map[string]*string) *UnAssociateEnsEipAddressResponse {
	s.Headers = v
	return s
}

func (s *UnAssociateEnsEipAddressResponse) SetStatusCode(v int32) *UnAssociateEnsEipAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *UnAssociateEnsEipAddressResponse) SetBody(v *UnAssociateEnsEipAddressResponseBody) *UnAssociateEnsEipAddressResponse {
	s.Body = v
	return s
}

type UnassignPrivateIpAddressesRequest struct {
	NetworkInterfaceId *string   `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	PrivateIpAddress   []*string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s UnassignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *UnassignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetPrivateIpAddress(v []*string) *UnassignPrivateIpAddressesRequest {
	s.PrivateIpAddress = v
	return s
}

type UnassignPrivateIpAddressesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassignPrivateIpAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesResponseBody) SetRequestId(v string) *UnassignPrivateIpAddressesResponseBody {
	s.RequestId = &v
	return s
}

type UnassignPrivateIpAddressesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnassignPrivateIpAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnassignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesResponse) SetHeaders(v map[string]*string) *UnassignPrivateIpAddressesResponse {
	s.Headers = v
	return s
}

func (s *UnassignPrivateIpAddressesResponse) SetStatusCode(v int32) *UnassignPrivateIpAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *UnassignPrivateIpAddressesResponse) SetBody(v *UnassignPrivateIpAddressesResponseBody) *UnassignPrivateIpAddressesResponse {
	s.Body = v
	return s
}

type UnassociateNetworkAclRequest struct {
	NetworkAclId *string                                 `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	Resource     []*UnassociateNetworkAclRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s UnassociateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclRequest) SetNetworkAclId(v string) *UnassociateNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

func (s *UnassociateNetworkAclRequest) SetResource(v []*UnassociateNetworkAclRequestResource) *UnassociateNetworkAclRequest {
	s.Resource = v
	return s
}

type UnassociateNetworkAclRequestResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s UnassociateNetworkAclRequestResource) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclRequestResource) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclRequestResource) SetResourceId(v string) *UnassociateNetworkAclRequestResource {
	s.ResourceId = &v
	return s
}

func (s *UnassociateNetworkAclRequestResource) SetResourceType(v string) *UnassociateNetworkAclRequestResource {
	s.ResourceType = &v
	return s
}

type UnassociateNetworkAclResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassociateNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclResponseBody) SetRequestId(v string) *UnassociateNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type UnassociateNetworkAclResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UnassociateNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnassociateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclResponse) SetHeaders(v map[string]*string) *UnassociateNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *UnassociateNetworkAclResponse) SetStatusCode(v int32) *UnassociateNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *UnassociateNetworkAclResponse) SetBody(v *UnassociateNetworkAclResponseBody) *UnassociateNetworkAclResponse {
	s.Body = v
	return s
}

type UpgradeAICInstanceImageRequest struct {
	ImageId   *string   `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ServerIds []*string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty" type:"Repeated"`
	Timeout   *int32    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpgradeAICInstanceImageRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageRequest) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageRequest) SetImageId(v string) *UpgradeAICInstanceImageRequest {
	s.ImageId = &v
	return s
}

func (s *UpgradeAICInstanceImageRequest) SetServerIds(v []*string) *UpgradeAICInstanceImageRequest {
	s.ServerIds = v
	return s
}

func (s *UpgradeAICInstanceImageRequest) SetTimeout(v int32) *UpgradeAICInstanceImageRequest {
	s.Timeout = &v
	return s
}

type UpgradeAICInstanceImageShrinkRequest struct {
	ImageId         *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	ServerIdsShrink *string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty"`
	Timeout         *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpgradeAICInstanceImageShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageShrinkRequest) SetImageId(v string) *UpgradeAICInstanceImageShrinkRequest {
	s.ImageId = &v
	return s
}

func (s *UpgradeAICInstanceImageShrinkRequest) SetServerIdsShrink(v string) *UpgradeAICInstanceImageShrinkRequest {
	s.ServerIdsShrink = &v
	return s
}

func (s *UpgradeAICInstanceImageShrinkRequest) SetTimeout(v int32) *UpgradeAICInstanceImageShrinkRequest {
	s.Timeout = &v
	return s
}

type UpgradeAICInstanceImageResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeAICInstanceImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageResponseBody) SetRequestId(v string) *UpgradeAICInstanceImageResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeAICInstanceImageResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpgradeAICInstanceImageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeAICInstanceImageResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageResponse) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageResponse) SetHeaders(v map[string]*string) *UpgradeAICInstanceImageResponse {
	s.Headers = v
	return s
}

func (s *UpgradeAICInstanceImageResponse) SetStatusCode(v int32) *UpgradeAICInstanceImageResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeAICInstanceImageResponse) SetBody(v *UpgradeAICInstanceImageResponseBody) *UpgradeAICInstanceImageResponse {
	s.Body = v
	return s
}

type UpgradeApplicationRequest struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Template *string `json:"Template,omitempty" xml:"Template,omitempty"`
	Timeout  *int32  `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpgradeApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeApplicationRequest) GoString() string {
	return s.String()
}

func (s *UpgradeApplicationRequest) SetAppId(v string) *UpgradeApplicationRequest {
	s.AppId = &v
	return s
}

func (s *UpgradeApplicationRequest) SetTemplate(v string) *UpgradeApplicationRequest {
	s.Template = &v
	return s
}

func (s *UpgradeApplicationRequest) SetTimeout(v int32) *UpgradeApplicationRequest {
	s.Timeout = &v
	return s
}

type UpgradeApplicationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeApplicationResponseBody) SetRequestId(v string) *UpgradeApplicationResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeApplicationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpgradeApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeApplicationResponse) GoString() string {
	return s.String()
}

func (s *UpgradeApplicationResponse) SetHeaders(v map[string]*string) *UpgradeApplicationResponse {
	s.Headers = v
	return s
}

func (s *UpgradeApplicationResponse) SetStatusCode(v int32) *UpgradeApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeApplicationResponse) SetBody(v *UpgradeApplicationResponseBody) *UpgradeApplicationResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ens"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AccosicateNetworkAclWithOptions(request *AccosicateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *AccosicateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	if !tea.BoolValue(util.IsUnset(request.Resource)) {
		query["Resource"] = request.Resource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AccosicateNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AccosicateNetworkAclResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AccosicateNetworkAcl(request *AccosicateNetworkAclRequest) (_result *AccosicateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AccosicateNetworkAclResponse{}
	_body, _err := client.AccosicateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddBackendServersWithOptions(tmpReq *AddBackendServersRequest, runtime *util.RuntimeOptions) (_result *AddBackendServersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddBackendServersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.BackendServers)) {
		request.BackendServersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BackendServers, tea.String("BackendServers"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServersShrink)) {
		query["BackendServers"] = request.BackendServersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddBackendServers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddBackendServersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddBackendServers(request *AddBackendServersRequest) (_result *AddBackendServersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBackendServersResponse{}
	_body, _err := client.AddBackendServersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddDeviceInternetPortWithOptions(request *AddDeviceInternetPortRequest, runtime *util.RuntimeOptions) (_result *AddDeviceInternetPortResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDeviceInternetPort"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDeviceInternetPortResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddDeviceInternetPort(request *AddDeviceInternetPortRequest) (_result *AddDeviceInternetPortResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDeviceInternetPortResponse{}
	_body, _err := client.AddDeviceInternetPortWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddNetworkInterfaceToInstanceWithOptions(request *AddNetworkInterfaceToInstanceRequest, runtime *util.RuntimeOptions) (_result *AddNetworkInterfaceToInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoStart)) {
		query["AutoStart"] = request.AutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Networks)) {
		query["Networks"] = request.Networks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddNetworkInterfaceToInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddNetworkInterfaceToInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddNetworkInterfaceToInstance(request *AddNetworkInterfaceToInstanceRequest) (_result *AddNetworkInterfaceToInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddNetworkInterfaceToInstanceResponse{}
	_body, _err := client.AddNetworkInterfaceToInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssignPrivateIpAddressesWithOptions(request *AssignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *AssignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssignPrivateIpAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssignPrivateIpAddressesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssignPrivateIpAddresses(request *AssignPrivateIpAddressesRequest) (_result *AssignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignPrivateIpAddressesResponse{}
	_body, _err := client.AssignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AssociateEnsEipAddressWithOptions(request *AssociateEnsEipAddressRequest, runtime *util.RuntimeOptions) (_result *AssociateEnsEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateEnsEipAddress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssociateEnsEipAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AssociateEnsEipAddress(request *AssociateEnsEipAddressRequest) (_result *AssociateEnsEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateEnsEipAddressResponse{}
	_body, _err := client.AssociateEnsEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachDiskWithOptions(request *AttachDiskRequest, runtime *util.RuntimeOptions) (_result *AttachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteWithInstance)) {
		query["DeleteWithInstance"] = request.DeleteWithInstance
	}

	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachDiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachDisk(request *AttachDiskRequest) (_result *AttachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDiskResponse{}
	_body, _err := client.AttachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AttachEnsInstancesWithOptions(request *AttachEnsInstancesRequest, runtime *util.RuntimeOptions) (_result *AttachEnsInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Scripts)) {
		query["Scripts"] = request.Scripts
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachEnsInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachEnsInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AttachEnsInstances(request *AttachEnsInstancesRequest) (_result *AttachEnsInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachEnsInstancesResponse{}
	_body, _err := client.AttachEnsInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupWithOptions(request *AuthorizeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidrIp)) {
		query["SourceCidrIp"] = request.SourceCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AuthorizeSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroup(request *AuthorizeSecurityGroupRequest) (_result *AuthorizeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.AuthorizeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupEgressWithOptions(request *AuthorizeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestCidrIp)) {
		query["DestCidrIp"] = request.DestCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AuthorizeSecurityGroupEgress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AuthorizeSecurityGroupEgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupEgress(request *AuthorizeSecurityGroupEgressRequest) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupEgressResponse{}
	_body, _err := client.AuthorizeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateARMServerInstancesWithOptions(request *CreateARMServerInstancesRequest, runtime *util.RuntimeOptions) (_result *CreateARMServerInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Frequency)) {
		query["Frequency"] = request.Frequency
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.Resolution)) {
		query["Resolution"] = request.Resolution
	}

	if !tea.BoolValue(util.IsUnset(request.ServerType)) {
		query["ServerType"] = request.ServerType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateARMServerInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateARMServerInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateARMServerInstances(request *CreateARMServerInstancesRequest) (_result *CreateARMServerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateARMServerInstancesResponse{}
	_body, _err := client.CreateARMServerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateApplicationWithOptions(request *CreateApplicationRequest, runtime *util.RuntimeOptions) (_result *CreateApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateApplication(request *CreateApplicationRequest) (_result *CreateApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApplicationResponse{}
	_body, _err := client.CreateApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClassicNetworkWithOptions(request *CreateClassicNetworkRequest, runtime *util.RuntimeOptions) (_result *CreateClassicNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateClassicNetwork"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateClassicNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClassicNetwork(request *CreateClassicNetworkRequest) (_result *CreateClassicNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClassicNetworkResponse{}
	_body, _err := client.CreateClassicNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiskWithOptions(request *CreateDiskRequest, runtime *util.RuntimeOptions) (_result *CreateDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDisk(request *CreateDiskRequest) (_result *CreateDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiskResponse{}
	_body, _err := client.CreateDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEipInstanceWithOptions(request *CreateEipInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateEipInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEipInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEipInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEipInstance(request *CreateEipInstanceRequest) (_result *CreateEipInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEipInstanceResponse{}
	_body, _err := client.CreateEipInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEnsRouteEntryWithOptions(request *CreateEnsRouteEntryRequest, runtime *util.RuntimeOptions) (_result *CreateEnsRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationCidrBlock)) {
		query["DestinationCidrBlock"] = request.DestinationCidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopId)) {
		query["NextHopId"] = request.NextHopId
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopType)) {
		query["NextHopType"] = request.NextHopType
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryName)) {
		query["RouteEntryName"] = request.RouteEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.RouteTableId)) {
		query["RouteTableId"] = request.RouteTableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnsRouteEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEnsRouteEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEnsRouteEntry(request *CreateEnsRouteEntryRequest) (_result *CreateEnsRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnsRouteEntryResponse{}
	_body, _err := client.CreateEnsRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEnsServiceWithOptions(request *CreateEnsServiceRequest, runtime *util.RuntimeOptions) (_result *CreateEnsServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsServiceId)) {
		query["EnsServiceId"] = request.EnsServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnsService"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEnsServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEnsService(request *CreateEnsServiceRequest) (_result *CreateEnsServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnsServiceResponse{}
	_body, _err := client.CreateEnsServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEpnInstanceWithOptions(request *CreateEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceName)) {
		query["EPNInstanceName"] = request.EPNInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.EPNInstanceType)) {
		query["EPNInstanceType"] = request.EPNInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEpnInstance(request *CreateEpnInstanceRequest) (_result *CreateEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEpnInstanceResponse{}
	_body, _err := client.CreateEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFileSystemWithOptions(tmpReq *CreateFileSystemRequest, runtime *util.RuntimeOptions) (_result *CreateFileSystemResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateFileSystemShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.OrderDetails)) {
		request.OrderDetailsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OrderDetails, tea.String("OrderDetails"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFileSystem"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFileSystemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFileSystem(request *CreateFileSystemRequest) (_result *CreateFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFileSystemResponse{}
	_body, _err := client.CreateFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateForwardEntryWithOptions(request *CreateForwardEntryRequest, runtime *util.RuntimeOptions) (_result *CreateForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExternalIp)) {
		query["ExternalIp"] = request.ExternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalPort)) {
		query["ExternalPort"] = request.ExternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryName)) {
		query["ForwardEntryName"] = request.ForwardEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckPort)) {
		query["HealthCheckPort"] = request.HealthCheckPort
	}

	if !tea.BoolValue(util.IsUnset(request.InternalIp)) {
		query["InternalIp"] = request.InternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.InternalPort)) {
		query["InternalPort"] = request.InternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateForwardEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateForwardEntry(request *CreateForwardEntryRequest) (_result *CreateForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.CreateForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateImageWithOptions(request *CreateImageRequest, runtime *util.RuntimeOptions) (_result *CreateImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteAfterImageUpload)) {
		query["DeleteAfterImageUpload"] = request.DeleteAfterImageUpload
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateImage(request *CreateImageRequest) (_result *CreateImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateImageResponse{}
	_body, _err := client.CreateImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenewPeriod)) {
		query["AutoRenewPeriod"] = request.AutoRenewPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.IpType)) {
		query["IpType"] = request.IpType
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PasswordInherit)) {
		query["PasswordInherit"] = request.PasswordInherit
	}

	if !tea.BoolValue(util.IsUnset(request.PaymentType)) {
		query["PaymentType"] = request.PaymentType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.PublicIpIdentification)) {
		query["PublicIpIdentification"] = request.PublicIpIdentification
	}

	if !tea.BoolValue(util.IsUnset(request.Quantity)) {
		query["Quantity"] = request.Quantity
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueSuffix)) {
		query["UniqueSuffix"] = request.UniqueSuffix
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SystemDisk))) {
		query["SystemDisk"] = request.SystemDisk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateKeyPairWithOptions(request *CreateKeyPairRequest, runtime *util.RuntimeOptions) (_result *CreateKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateKeyPair"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateKeyPairResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateKeyPair(request *CreateKeyPairRequest) (_result *CreateKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKeyPairResponse{}
	_body, _err := client.CreateKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLoadBalancerWithOptions(request *CreateLoadBalancerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerName)) {
		query["LoadBalancerName"] = request.LoadBalancerName
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerSpec)) {
		query["LoadBalancerSpec"] = request.LoadBalancerSpec
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancer"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLoadBalancerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLoadBalancer(request *CreateLoadBalancerRequest) (_result *CreateLoadBalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerResponse{}
	_body, _err := client.CreateLoadBalancerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLoadBalancerHTTPListenerWithOptions(request *CreateLoadBalancerHTTPListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerHTTPListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardPort)) {
		query["ForwardPort"] = request.ForwardPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerForward)) {
		query["ListenerForward"] = request.ListenerForward
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.XForwardedFor)) {
		query["XForwardedFor"] = request.XForwardedFor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerHTTPListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLoadBalancerHTTPListenerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLoadBalancerHTTPListener(request *CreateLoadBalancerHTTPListenerRequest) (_result *CreateLoadBalancerHTTPListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerHTTPListenerResponse{}
	_body, _err := client.CreateLoadBalancerHTTPListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLoadBalancerHTTPSListenerWithOptions(request *CreateLoadBalancerHTTPSListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerHTTPSListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cookie)) {
		query["Cookie"] = request.Cookie
	}

	if !tea.BoolValue(util.IsUnset(request.CookieTimeout)) {
		query["CookieTimeout"] = request.CookieTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardPort)) {
		query["ForwardPort"] = request.ForwardPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerForward)) {
		query["ListenerForward"] = request.ListenerForward
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.ServerCertificateId)) {
		query["ServerCertificateId"] = request.ServerCertificateId
	}

	if !tea.BoolValue(util.IsUnset(request.StickySessionType)) {
		query["StickySessionType"] = request.StickySessionType
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerHTTPSListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLoadBalancerHTTPSListenerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLoadBalancerHTTPSListener(request *CreateLoadBalancerHTTPSListenerRequest) (_result *CreateLoadBalancerHTTPSListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerHTTPSListenerResponse{}
	_body, _err := client.CreateLoadBalancerHTTPSListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLoadBalancerTCPListenerWithOptions(request *CreateLoadBalancerTCPListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerTCPListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServerPort)) {
		query["BackendServerPort"] = request.BackendServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.EstablishedTimeout)) {
		query["EstablishedTimeout"] = request.EstablishedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckType)) {
		query["HealthCheckType"] = request.HealthCheckType
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.PersistenceTimeout)) {
		query["PersistenceTimeout"] = request.PersistenceTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerTCPListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLoadBalancerTCPListenerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLoadBalancerTCPListener(request *CreateLoadBalancerTCPListenerRequest) (_result *CreateLoadBalancerTCPListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerTCPListenerResponse{}
	_body, _err := client.CreateLoadBalancerTCPListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLoadBalancerUDPListenerWithOptions(request *CreateLoadBalancerUDPListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerUDPListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServerPort)) {
		query["BackendServerPort"] = request.BackendServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckExp)) {
		query["HealthCheckExp"] = request.HealthCheckExp
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckReq)) {
		query["HealthCheckReq"] = request.HealthCheckReq
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerUDPListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLoadBalancerUDPListenerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLoadBalancerUDPListener(request *CreateLoadBalancerUDPListenerRequest) (_result *CreateLoadBalancerUDPListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerUDPListenerResponse{}
	_body, _err := client.CreateLoadBalancerUDPListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMountTargetWithOptions(request *CreateMountTargetRequest, runtime *util.RuntimeOptions) (_result *CreateMountTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MountTargetName)) {
		query["MountTargetName"] = request.MountTargetName
	}

	if !tea.BoolValue(util.IsUnset(request.NetWorkId)) {
		query["NetWorkId"] = request.NetWorkId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMountTarget"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMountTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMountTarget(request *CreateMountTargetRequest) (_result *CreateMountTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMountTargetResponse{}
	_body, _err := client.CreateMountTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNatGatewayWithOptions(request *CreateNatGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNatGateway"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNatGateway(request *CreateNatGatewayRequest) (_result *CreateNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.CreateNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkWithOptions(request *CreateNetworkRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetwork"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetwork(request *CreateNetworkRequest) (_result *CreateNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkResponse{}
	_body, _err := client.CreateNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkAclWithOptions(request *CreateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkAclName)) {
		query["NetworkAclName"] = request.NetworkAclName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNetworkAclResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkAcl(request *CreateNetworkAclRequest) (_result *CreateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkAclResponse{}
	_body, _err := client.CreateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNetworkAclEntryWithOptions(request *CreateNetworkAclEntryRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkAclEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkAclEntryName)) {
		query["NetworkAclEntryName"] = request.NetworkAclEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkAclEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNetworkAclEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNetworkAclEntry(request *CreateNetworkAclEntryRequest) (_result *CreateNetworkAclEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkAclEntryResponse{}
	_body, _err := client.CreateNetworkAclEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSecurityGroupWithOptions(request *CreateSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *CreateSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSecurityGroup(request *CreateSecurityGroupRequest) (_result *CreateSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSecurityGroupResponse{}
	_body, _err := client.CreateSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSnatEntryWithOptions(request *CreateSnatEntryRequest, runtime *util.RuntimeOptions) (_result *CreateSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatEntryName)) {
		query["SnatEntryName"] = request.SnatEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCIDR)) {
		query["SourceCIDR"] = request.SourceCIDR
	}

	if !tea.BoolValue(util.IsUnset(request.SourceNetworkId)) {
		query["SourceNetworkId"] = request.SourceNetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceVSwitchId)) {
		query["SourceVSwitchId"] = request.SourceVSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSnatEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSnatEntry(request *CreateSnatEntryRequest) (_result *CreateSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSnatEntryResponse{}
	_body, _err := client.CreateSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateVSwitchWithOptions(request *CreateVSwitchRequest, runtime *util.RuntimeOptions) (_result *CreateVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchName)) {
		query["VSwitchName"] = request.VSwitchName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVSwitch"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateVSwitch(request *CreateVSwitchRequest) (_result *CreateVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.CreateVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApplicationWithOptions(request *DeleteApplicationRequest, runtime *util.RuntimeOptions) (_result *DeleteApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApplication(request *DeleteApplicationRequest) (_result *DeleteApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DeleteApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeviceInternetPortWithOptions(request *DeleteDeviceInternetPortRequest, runtime *util.RuntimeOptions) (_result *DeleteDeviceInternetPortResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDeviceInternetPort"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDeviceInternetPortResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeviceInternetPort(request *DeleteDeviceInternetPortRequest) (_result *DeleteDeviceInternetPortResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeviceInternetPortResponse{}
	_body, _err := client.DeleteDeviceInternetPortWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEnsRouteEntryWithOptions(request *DeleteEnsRouteEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteEnsRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RouteEntryId)) {
		query["RouteEntryId"] = request.RouteEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnsRouteEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEnsRouteEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEnsRouteEntry(request *DeleteEnsRouteEntryRequest) (_result *DeleteEnsRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnsRouteEntryResponse{}
	_body, _err := client.DeleteEnsRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEpnInstanceWithOptions(request *DeleteEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEpnInstance(request *DeleteEpnInstanceRequest) (_result *DeleteEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEpnInstanceResponse{}
	_body, _err := client.DeleteEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFileSystemWithOptions(request *DeleteFileSystemRequest, runtime *util.RuntimeOptions) (_result *DeleteFileSystemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFileSystem"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFileSystemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFileSystem(request *DeleteFileSystemRequest) (_result *DeleteFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFileSystemResponse{}
	_body, _err := client.DeleteFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteForwardEntryWithOptions(request *DeleteForwardEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForwardEntryId)) {
		query["ForwardEntryId"] = request.ForwardEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteForwardEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteForwardEntry(request *DeleteForwardEntryRequest) (_result *DeleteForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DeleteForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteImageWithOptions(request *DeleteImageRequest, runtime *util.RuntimeOptions) (_result *DeleteImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteImage(request *DeleteImageRequest) (_result *DeleteImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteImageResponse{}
	_body, _err := client.DeleteImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteKeyPairsWithOptions(request *DeleteKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DeleteKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteKeyPairs"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteKeyPairsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteKeyPairs(request *DeleteKeyPairsRequest) (_result *DeleteKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteKeyPairsResponse{}
	_body, _err := client.DeleteKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLoadBalancerListenerWithOptions(request *DeleteLoadBalancerListenerRequest, runtime *util.RuntimeOptions) (_result *DeleteLoadBalancerListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLoadBalancerListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLoadBalancerListenerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLoadBalancerListener(request *DeleteLoadBalancerListenerRequest) (_result *DeleteLoadBalancerListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLoadBalancerListenerResponse{}
	_body, _err := client.DeleteLoadBalancerListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMountTargetWithOptions(request *DeleteMountTargetRequest, runtime *util.RuntimeOptions) (_result *DeleteMountTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MountTargetName)) {
		query["MountTargetName"] = request.MountTargetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMountTarget"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMountTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMountTarget(request *DeleteMountTargetRequest) (_result *DeleteMountTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMountTargetResponse{}
	_body, _err := client.DeleteMountTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNatGatewayWithOptions(request *DeleteNatGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNatGateway"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNatGateway(request *DeleteNatGatewayRequest) (_result *DeleteNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DeleteNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkWithOptions(request *DeleteNetworkRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetwork"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNetworkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetwork(request *DeleteNetworkRequest) (_result *DeleteNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkResponse{}
	_body, _err := client.DeleteNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkAclWithOptions(request *DeleteNetworkAclRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNetworkAclResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkAcl(request *DeleteNetworkAclRequest) (_result *DeleteNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkAclResponse{}
	_body, _err := client.DeleteNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNetworkAclEntryWithOptions(request *DeleteNetworkAclEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkAclEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclEntryId)) {
		query["NetworkAclEntryId"] = request.NetworkAclEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkAclEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNetworkAclEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNetworkAclEntry(request *DeleteNetworkAclEntryRequest) (_result *DeleteNetworkAclEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkAclEntryResponse{}
	_body, _err := client.DeleteNetworkAclEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSecurityGroupWithOptions(request *DeleteSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSecurityGroup(request *DeleteSecurityGroupRequest) (_result *DeleteSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSecurityGroupResponse{}
	_body, _err := client.DeleteSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSnatEntryWithOptions(request *DeleteSnatEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSnatEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSnatEntry(request *DeleteSnatEntryRequest) (_result *DeleteSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnatEntryResponse{}
	_body, _err := client.DeleteSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteVSwitchWithOptions(request *DeleteVSwitchRequest, runtime *util.RuntimeOptions) (_result *DeleteVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVSwitch"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteVSwitch(request *DeleteVSwitchRequest) (_result *DeleteVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DeleteVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeARMServerInstancesWithOptions(tmpReq *DescribeARMServerInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeARMServerInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeARMServerInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.EnsRegionIds)) {
		request.EnsRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EnsRegionIds, tea.String("EnsRegionIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ServerIds)) {
		request.ServerIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ServerIds, tea.String("ServerIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeARMServerInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeARMServerInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeARMServerInstances(request *DescribeARMServerInstancesRequest) (_result *DescribeARMServerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeARMServerInstancesResponse{}
	_body, _err := client.DescribeARMServerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApplicationWithOptions(request *DescribeApplicationRequest, runtime *util.RuntimeOptions) (_result *DescribeApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppVersions)) {
		query["AppVersions"] = request.AppVersions
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.OutDetailStatParams)) {
		query["OutDetailStatParams"] = request.OutDetailStatParams
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApplication(request *DescribeApplicationRequest) (_result *DescribeApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApplicationResponse{}
	_body, _err := client.DescribeApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApplicationResourceSummaryWithOptions(request *DescribeApplicationResourceSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeApplicationResourceSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplicationResourceSummary"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeApplicationResourceSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApplicationResourceSummary(request *DescribeApplicationResourceSummaryRequest) (_result *DescribeApplicationResourceSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApplicationResourceSummaryResponse{}
	_body, _err := client.DescribeApplicationResourceSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableResourceWithOptions(request *DescribeAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableResource(request *DescribeAvailableResourceRequest) (_result *DescribeAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DescribeAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableResourceInfoWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableResourceInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAvailableResourceInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableResourceInfo() (_result *DescribeAvailableResourceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceInfoResponse{}
	_body, _err := client.DescribeAvailableResourceInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandWithdChargeTypeWithOptions(request *DescribeBandWithdChargeTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeBandWithdChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBandWithdChargeType"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBandWithdChargeTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandWithdChargeType(request *DescribeBandWithdChargeTypeRequest) (_result *DescribeBandWithdChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandWithdChargeTypeResponse{}
	_body, _err := client.DescribeBandWithdChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBandwitdhByInternetChargeTypeWithOptions(request *DescribeBandwitdhByInternetChargeTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwitdhByInternetChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBandwitdhByInternetChargeType"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBandwitdhByInternetChargeTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBandwitdhByInternetChargeType(request *DescribeBandwitdhByInternetChargeTypeRequest) (_result *DescribeBandwitdhByInternetChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwitdhByInternetChargeTypeResponse{}
	_body, _err := client.DescribeBandwitdhByInternetChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCloudDiskAvailableResourceInfoWithOptions(runtime *util.RuntimeOptions) (_result *DescribeCloudDiskAvailableResourceInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudDiskAvailableResourceInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudDiskAvailableResourceInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCloudDiskAvailableResourceInfo() (_result *DescribeCloudDiskAvailableResourceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudDiskAvailableResourceInfoResponse{}
	_body, _err := client.DescribeCloudDiskAvailableResourceInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCloudDiskTypesWithOptions(request *DescribeCloudDiskTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudDiskTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudDiskTypes"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudDiskTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCloudDiskTypes(request *DescribeCloudDiskTypesRequest) (_result *DescribeCloudDiskTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudDiskTypesResponse{}
	_body, _err := client.DescribeCloudDiskTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCreatePrePaidInstanceResultWithOptions(request *DescribeCreatePrePaidInstanceResultRequest, runtime *util.RuntimeOptions) (_result *DescribeCreatePrePaidInstanceResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCreatePrePaidInstanceResult"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCreatePrePaidInstanceResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCreatePrePaidInstanceResult(request *DescribeCreatePrePaidInstanceResultRequest) (_result *DescribeCreatePrePaidInstanceResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCreatePrePaidInstanceResultResponse{}
	_body, _err := client.DescribeCreatePrePaidInstanceResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataDistResultWithOptions(request *DescribeDataDistResultRequest, runtime *util.RuntimeOptions) (_result *DescribeDataDistResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DataNames)) {
		query["DataNames"] = request.DataNames
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersions)) {
		query["DataVersions"] = request.DataVersions
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDate)) {
		query["MaxDate"] = request.MaxDate
	}

	if !tea.BoolValue(util.IsUnset(request.MinDate)) {
		query["MinDate"] = request.MinDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataDistResult"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataDistResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataDistResult(request *DescribeDataDistResultRequest) (_result *DescribeDataDistResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataDistResultResponse{}
	_body, _err := client.DescribeDataDistResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataDownloadURLWithOptions(request *DescribeDataDownloadURLRequest, runtime *util.RuntimeOptions) (_result *DescribeDataDownloadURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataDownloadURL"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataDownloadURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataDownloadURL(request *DescribeDataDownloadURLRequest) (_result *DescribeDataDownloadURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataDownloadURLResponse{}
	_body, _err := client.DescribeDataDownloadURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataPushResultWithOptions(request *DescribeDataPushResultRequest, runtime *util.RuntimeOptions) (_result *DescribeDataPushResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DataNames)) {
		query["DataNames"] = request.DataNames
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersions)) {
		query["DataVersions"] = request.DataVersions
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDate)) {
		query["MaxDate"] = request.MaxDate
	}

	if !tea.BoolValue(util.IsUnset(request.MinDate)) {
		query["MinDate"] = request.MinDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIds)) {
		query["RegionIds"] = request.RegionIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataPushResult"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataPushResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataPushResult(request *DescribeDataPushResultRequest) (_result *DescribeDataPushResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataPushResultResponse{}
	_body, _err := client.DescribeDataPushResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDeviceServiceWithOptions(request *DescribeDeviceServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeDeviceServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeviceService"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDeviceServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDeviceService(request *DescribeDeviceServiceRequest) (_result *DescribeDeviceServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeviceServiceResponse{}
	_body, _err := client.DescribeDeviceServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDisksWithOptions(request *DescribeDisksRequest, runtime *util.RuntimeOptions) (_result *DescribeDisksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.DiskChargeType)) {
		query["DiskChargeType"] = request.DiskChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.DiskIds)) {
		query["DiskIds"] = request.DiskIds
	}

	if !tea.BoolValue(util.IsUnset(request.DiskName)) {
		query["DiskName"] = request.DiskName
	}

	if !tea.BoolValue(util.IsUnset(request.DiskType)) {
		query["DiskType"] = request.DiskType
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByParams)) {
		query["OrderByParams"] = request.OrderByParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDisks"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDisksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDisks(request *DescribeDisksRequest) (_result *DescribeDisksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDisksResponse{}
	_body, _err := client.DescribeDisksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEipAddressesWithOptions(request *DescribeEipAddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeEipAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Eips)) {
		query["Eips"] = request.Eips
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEipAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEipAddresses(request *DescribeEipAddressesRequest) (_result *DescribeEipAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEipAddressesResponse{}
	_body, _err := client.DescribeEipAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeElbAvailableResourceInfoWithOptions(runtime *util.RuntimeOptions) (_result *DescribeElbAvailableResourceInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeElbAvailableResourceInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeElbAvailableResourceInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeElbAvailableResourceInfo() (_result *DescribeElbAvailableResourceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeElbAvailableResourceInfoResponse{}
	_body, _err := client.DescribeElbAvailableResourceInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsEipAddressesWithOptions(request *DescribeEnsEipAddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsEipAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedInstanceId)) {
		query["AssociatedInstanceId"] = request.AssociatedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedInstanceType)) {
		query["AssociatedInstanceType"] = request.AssociatedInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.EipAddress)) {
		query["EipAddress"] = request.EipAddress
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsEipAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsEipAddressesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsEipAddresses(request *DescribeEnsEipAddressesRequest) (_result *DescribeEnsEipAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsEipAddressesResponse{}
	_body, _err := client.DescribeEnsEipAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsNetDistrictWithOptions(request *DescribeEnsNetDistrictRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsNetDistrictResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetDistrictCode)) {
		query["NetDistrictCode"] = request.NetDistrictCode
	}

	if !tea.BoolValue(util.IsUnset(request.NetLevelCode)) {
		query["NetLevelCode"] = request.NetLevelCode
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsNetDistrict"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsNetDistrictResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsNetDistrict(request *DescribeEnsNetDistrictRequest) (_result *DescribeEnsNetDistrictResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsNetDistrictResponse{}
	_body, _err := client.DescribeEnsNetDistrictWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsNetLevelWithOptions(request *DescribeEnsNetLevelRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsNetLevelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsNetLevel"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsNetLevelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsNetLevel(request *DescribeEnsNetLevelRequest) (_result *DescribeEnsNetLevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsNetLevelResponse{}
	_body, _err := client.DescribeEnsNetLevelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsNetSaleDistrictWithOptions(request *DescribeEnsNetSaleDistrictRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsNetSaleDistrictResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetDistrictCode)) {
		query["NetDistrictCode"] = request.NetDistrictCode
	}

	if !tea.BoolValue(util.IsUnset(request.NetLevelCode)) {
		query["NetLevelCode"] = request.NetLevelCode
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsNetSaleDistrict"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsNetSaleDistrictResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsNetSaleDistrict(request *DescribeEnsNetSaleDistrictRequest) (_result *DescribeEnsNetSaleDistrictResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsNetSaleDistrictResponse{}
	_body, _err := client.DescribeEnsNetSaleDistrictWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsRegionIdIpv6InfoWithOptions(request *DescribeEnsRegionIdIpv6InfoRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRegionIdIpv6InfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRegionIdIpv6Info"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsRegionIdIpv6InfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsRegionIdIpv6Info(request *DescribeEnsRegionIdIpv6InfoRequest) (_result *DescribeEnsRegionIdIpv6InfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRegionIdIpv6InfoResponse{}
	_body, _err := client.DescribeEnsRegionIdIpv6InfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsRegionIdResourceWithOptions(request *DescribeEnsRegionIdResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRegionIdResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByParams)) {
		query["OrderByParams"] = request.OrderByParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRegionIdResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsRegionIdResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsRegionIdResource(request *DescribeEnsRegionIdResourceRequest) (_result *DescribeEnsRegionIdResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRegionIdResourceResponse{}
	_body, _err := client.DescribeEnsRegionIdResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsRegionsWithOptions(request *DescribeEnsRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRegions"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsRegions(request *DescribeEnsRegionsRequest) (_result *DescribeEnsRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRegionsResponse{}
	_body, _err := client.DescribeEnsRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsResourceUsageWithOptions(request *DescribeEnsResourceUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsResourceUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsResourceUsage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsResourceUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsResourceUsage(request *DescribeEnsResourceUsageRequest) (_result *DescribeEnsResourceUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsResourceUsageResponse{}
	_body, _err := client.DescribeEnsResourceUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEnsRouteEntryListWithOptions(request *DescribeEnsRouteEntryListRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRouteEntryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationCidrBlock)) {
		query["DestinationCidrBlock"] = request.DestinationCidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopId)) {
		query["NextHopId"] = request.NextHopId
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopType)) {
		query["NextHopType"] = request.NextHopType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryId)) {
		query["RouteEntryId"] = request.RouteEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryName)) {
		query["RouteEntryName"] = request.RouteEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryType)) {
		query["RouteEntryType"] = request.RouteEntryType
	}

	if !tea.BoolValue(util.IsUnset(request.RouteTableId)) {
		query["RouteTableId"] = request.RouteTableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRouteEntryList"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEnsRouteEntryListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEnsRouteEntryList(request *DescribeEnsRouteEntryListRequest) (_result *DescribeEnsRouteEntryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRouteEntryListResponse{}
	_body, _err := client.DescribeEnsRouteEntryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEpnBandWidthDataWithOptions(request *DescribeEpnBandWidthDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnBandWidthDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnBandWidthData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEpnBandWidthDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEpnBandWidthData(request *DescribeEpnBandWidthDataRequest) (_result *DescribeEpnBandWidthDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnBandWidthDataResponse{}
	_body, _err := client.DescribeEpnBandWidthDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEpnBandwitdhByInternetChargeTypeWithOptions(request *DescribeEpnBandwitdhByInternetChargeTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnBandwitdhByInternetChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnBandwitdhByInternetChargeType"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEpnBandwitdhByInternetChargeTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEpnBandwitdhByInternetChargeType(request *DescribeEpnBandwitdhByInternetChargeTypeRequest) (_result *DescribeEpnBandwitdhByInternetChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnBandwitdhByInternetChargeTypeResponse{}
	_body, _err := client.DescribeEpnBandwitdhByInternetChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEpnInstanceAttributeWithOptions(request *DescribeEpnInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnInstanceAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEpnInstanceAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEpnInstanceAttribute(request *DescribeEpnInstanceAttributeRequest) (_result *DescribeEpnInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnInstanceAttributeResponse{}
	_body, _err := client.DescribeEpnInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEpnInstancesWithOptions(request *DescribeEpnInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EPNInstanceName)) {
		query["EPNInstanceName"] = request.EPNInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEpnInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEpnInstances(request *DescribeEpnInstancesRequest) (_result *DescribeEpnInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnInstancesResponse{}
	_body, _err := client.DescribeEpnInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEpnMeasurementDataWithOptions(request *DescribeEpnMeasurementDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnMeasurementDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnMeasurementData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEpnMeasurementDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEpnMeasurementData(request *DescribeEpnMeasurementDataRequest) (_result *DescribeEpnMeasurementDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnMeasurementDataResponse{}
	_body, _err := client.DescribeEpnMeasurementDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExportImageInfoWithOptions(request *DescribeExportImageInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeExportImageInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExportImageInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExportImageInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExportImageInfo(request *DescribeExportImageInfoRequest) (_result *DescribeExportImageInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExportImageInfoResponse{}
	_body, _err := client.DescribeExportImageInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExportImageStatusWithOptions(request *DescribeExportImageStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeExportImageStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExportImageStatus"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExportImageStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExportImageStatus(request *DescribeExportImageStatusRequest) (_result *DescribeExportImageStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExportImageStatusResponse{}
	_body, _err := client.DescribeExportImageStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeForwardTableEntriesWithOptions(request *DescribeForwardTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeForwardTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExternalIp)) {
		query["ExternalIp"] = request.ExternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryId)) {
		query["ForwardEntryId"] = request.ForwardEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryName)) {
		query["ForwardEntryName"] = request.ForwardEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.InternalIp)) {
		query["InternalIp"] = request.InternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeForwardTableEntries"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeForwardTableEntries(request *DescribeForwardTableEntriesRequest) (_result *DescribeForwardTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DescribeForwardTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageInfosWithOptions(request *DescribeImageInfosRequest, runtime *util.RuntimeOptions) (_result *DescribeImageInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		query["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageInfos"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageInfos(request *DescribeImageInfosRequest) (_result *DescribeImageInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageInfosResponse{}
	_body, _err := client.DescribeImageInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImageSharePermissionWithOptions(request *DescribeImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunId)) {
		query["AliyunId"] = request.AliyunId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageSharePermission"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageSharePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImageSharePermission(request *DescribeImageSharePermissionRequest) (_result *DescribeImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSharePermissionResponse{}
	_body, _err := client.DescribeImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeImagesWithOptions(request *DescribeImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImages"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeImages(request *DescribeImagesRequest) (_result *DescribeImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImagesResponse{}
	_body, _err := client.DescribeImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttributeWithOptions(request *DescribeInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAutoRenewAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewAttribute(request *DescribeInstanceAutoRenewAttributeRequest) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DescribeInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceMonitorDataWithOptions(request *DescribeInstanceMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceMonitorData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceMonitorDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceMonitorData(request *DescribeInstanceMonitorDataRequest) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceMonitorDataResponse{}
	_body, _err := client.DescribeInstanceMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceSpecWithOptions(request *DescribeInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSpec"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceSpec(request *DescribeInstanceSpecRequest) (_result *DescribeInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceSpecResponse{}
	_body, _err := client.DescribeInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceTypesWithOptions(request *DescribeInstanceTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTypes"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceTypes(request *DescribeInstanceTypesRequest) (_result *DescribeInstanceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTypesResponse{}
	_body, _err := client.DescribeInstanceTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceVncUrlWithOptions(request *DescribeInstanceVncUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceVncUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceVncUrl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceVncUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceVncUrl(request *DescribeInstanceVncUrlRequest) (_result *DescribeInstanceVncUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceVncUrlResponse{}
	_body, _err := client.DescribeInstanceVncUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstancesWithOptions(request *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.EnsServiceId)) {
		query["EnsServiceId"] = request.EnsServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceResourceType)) {
		query["InstanceResourceType"] = request.InstanceResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByParams)) {
		query["OrderByParams"] = request.OrderByParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		query["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeKeyPairsWithOptions(request *DescribeKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DescribeKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeKeyPairs"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeKeyPairsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeKeyPairs(request *DescribeKeyPairsRequest) (_result *DescribeKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeKeyPairsResponse{}
	_body, _err := client.DescribeKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoadBalancerAttributeWithOptions(request *DescribeLoadBalancerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoadBalancerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoadBalancerAttribute(request *DescribeLoadBalancerAttributeRequest) (_result *DescribeLoadBalancerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoadBalancerHTTPListenerAttributeWithOptions(request *DescribeLoadBalancerHTTPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerHTTPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerHTTPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoadBalancerHTTPListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoadBalancerHTTPListenerAttribute(request *DescribeLoadBalancerHTTPListenerAttributeRequest) (_result *DescribeLoadBalancerHTTPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerHTTPListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerHTTPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoadBalancerHTTPSListenerAttributeWithOptions(request *DescribeLoadBalancerHTTPSListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerHTTPSListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoadBalancerHTTPSListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoadBalancerHTTPSListenerAttribute(request *DescribeLoadBalancerHTTPSListenerAttributeRequest) (_result *DescribeLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerHTTPSListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerHTTPSListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoadBalancerSpecWithOptions(request *DescribeLoadBalancerSpecRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerSpec"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoadBalancerSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoadBalancerSpec(request *DescribeLoadBalancerSpecRequest) (_result *DescribeLoadBalancerSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerSpecResponse{}
	_body, _err := client.DescribeLoadBalancerSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoadBalancerTCPListenerAttributeWithOptions(request *DescribeLoadBalancerTCPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerTCPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerTCPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoadBalancerTCPListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoadBalancerTCPListenerAttribute(request *DescribeLoadBalancerTCPListenerAttributeRequest) (_result *DescribeLoadBalancerTCPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerTCPListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerTCPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoadBalancerUDPListenerAttributeWithOptions(request *DescribeLoadBalancerUDPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerUDPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerUDPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoadBalancerUDPListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoadBalancerUDPListenerAttribute(request *DescribeLoadBalancerUDPListenerAttributeRequest) (_result *DescribeLoadBalancerUDPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerUDPListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerUDPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLoadBalancersWithOptions(request *DescribeLoadBalancersRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLoadBalancersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLoadBalancers(request *DescribeLoadBalancersRequest) (_result *DescribeLoadBalancersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancersResponse{}
	_body, _err := client.DescribeLoadBalancersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeasurementDataWithOptions(request *DescribeMeasurementDataRequest, runtime *util.RuntimeOptions) (_result *DescribeMeasurementDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeasurementData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeasurementDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeasurementData(request *DescribeMeasurementDataRequest) (_result *DescribeMeasurementDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeasurementDataResponse{}
	_body, _err := client.DescribeMeasurementDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMountTargetsWithOptions(request *DescribeMountTargetsRequest, runtime *util.RuntimeOptions) (_result *DescribeMountTargetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MountTargetName)) {
		query["MountTargetName"] = request.MountTargetName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMountTargets"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMountTargetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMountTargets(request *DescribeMountTargetsRequest) (_result *DescribeMountTargetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMountTargetsResponse{}
	_body, _err := client.DescribeMountTargetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNatGatewaysWithOptions(request *DescribeNatGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeNatGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNatGateways"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNatGateways(request *DescribeNatGatewaysRequest) (_result *DescribeNatGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DescribeNatGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkAclsWithOptions(request *DescribeNetworkAclsRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkAclsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkAcls"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworkAclsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkAcls(request *DescribeNetworkAclsRequest) (_result *DescribeNetworkAclsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkAclsResponse{}
	_body, _err := client.DescribeNetworkAclsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkAttributeWithOptions(request *DescribeNetworkAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworkAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkAttribute(request *DescribeNetworkAttributeRequest) (_result *DescribeNetworkAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkAttributeResponse{}
	_body, _err := client.DescribeNetworkAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworkInterfacesWithOptions(request *DescribeNetworkInterfacesRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryIpAddress)) {
		query["PrimaryIpAddress"] = request.PrimaryIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkInterfaces"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworkInterfacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworkInterfaces(request *DescribeNetworkInterfacesRequest) (_result *DescribeNetworkInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfacesResponse{}
	_body, _err := client.DescribeNetworkInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNetworksWithOptions(request *DescribeNetworksRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworks"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNetworks(request *DescribeNetworksRequest) (_result *DescribeNetworksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworksResponse{}
	_body, _err := client.DescribeNetworksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePrePaidInstanceStockWithOptions(request *DescribePrePaidInstanceStockRequest, runtime *util.RuntimeOptions) (_result *DescribePrePaidInstanceStockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataDiskSize)) {
		query["DataDiskSize"] = request.DataDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskSize)) {
		query["SystemDiskSize"] = request.SystemDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrePaidInstanceStock"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePrePaidInstanceStockResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrePaidInstanceStock(request *DescribePrePaidInstanceStockRequest) (_result *DescribePrePaidInstanceStockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePrePaidInstanceStockResponse{}
	_body, _err := client.DescribePrePaidInstanceStockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePriceWithOptions(tmpReq *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribePriceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataDisks)) {
		request.DataDisksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataDisks, tea.String("DataDisks"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataDisksShrink)) {
		query["DataDisks"] = request.DataDisksShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.Quantity)) {
		query["Quantity"] = request.Quantity
	}

	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(request.SystemDisk))) {
		query["SystemDisk"] = request.SystemDisk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrice"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionIspsWithOptions(request *DescribeRegionIspsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionIspsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegionIsps"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionIspsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegionIsps(request *DescribeRegionIspsRequest) (_result *DescribeRegionIspsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionIspsResponse{}
	_body, _err := client.DescribeRegionIspsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReservedResourceWithOptions(request *DescribeReservedResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeReservedResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservedResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeReservedResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReservedResource(request *DescribeReservedResourceRequest) (_result *DescribeReservedResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedResourceResponse{}
	_body, _err := client.DescribeReservedResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttributeWithOptions(request *DescribeSecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityGroupAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttribute(request *DescribeSecurityGroupAttributeRequest) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DescribeSecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupsWithOptions(request *DescribeSecurityGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityGroups"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSecurityGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroups(request *DescribeSecurityGroupsRequest) (_result *DescribeSecurityGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupsResponse{}
	_body, _err := client.DescribeSecurityGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSelfImagesWithOptions(request *DescribeSelfImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeSelfImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSelfImages"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSelfImagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSelfImages(request *DescribeSelfImagesRequest) (_result *DescribeSelfImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSelfImagesResponse{}
	_body, _err := client.DescribeSelfImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeServcieScheduleWithOptions(request *DescribeServcieScheduleRequest, runtime *util.RuntimeOptions) (_result *DescribeServcieScheduleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PodConfigName)) {
		query["PodConfigName"] = request.PodConfigName
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServcieSchedule"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeServcieScheduleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeServcieSchedule(request *DescribeServcieScheduleRequest) (_result *DescribeServcieScheduleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServcieScheduleResponse{}
	_body, _err := client.DescribeServcieScheduleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSnatTableEntriesWithOptions(request *DescribeSnatTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeSnatTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSnatTableEntries"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSnatTableEntriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSnatTableEntries(request *DescribeSnatTableEntriesRequest) (_result *DescribeSnatTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnatTableEntriesResponse{}
	_body, _err := client.DescribeSnatTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeUserBandWidthDataWithOptions(request *DescribeUserBandWidthDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUserBandWidthDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserBandWidthData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserBandWidthDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeUserBandWidthData(request *DescribeUserBandWidthDataRequest) (_result *DescribeUserBandWidthDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserBandWidthDataResponse{}
	_body, _err := client.DescribeUserBandWidthDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeVSwitchesWithOptions(request *DescribeVSwitchesRequest, runtime *util.RuntimeOptions) (_result *DescribeVSwitchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByParams)) {
		query["OrderByParams"] = request.OrderByParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchName)) {
		query["VSwitchName"] = request.VSwitchName
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVSwitches"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeVSwitches(request *DescribeVSwitchesRequest) (_result *DescribeVSwitchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DescribeVSwitchesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachDiskWithOptions(request *DetachDiskRequest, runtime *util.RuntimeOptions) (_result *DetachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetachDiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachDisk(request *DetachDiskRequest) (_result *DetachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDiskResponse{}
	_body, _err := client.DetachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DistApplicationDataWithOptions(request *DistApplicationDataRequest, runtime *util.RuntimeOptions) (_result *DistApplicationDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.DistStrategy)) {
		query["DistStrategy"] = request.DistStrategy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DistApplicationData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DistApplicationDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DistApplicationData(request *DistApplicationDataRequest) (_result *DistApplicationDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DistApplicationDataResponse{}
	_body, _err := client.DistApplicationDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportBillDetailDataWithOptions(request *ExportBillDetailDataRequest, runtime *util.RuntimeOptions) (_result *ExportBillDetailDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportBillDetailData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportBillDetailDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportBillDetailData(request *ExportBillDetailDataRequest) (_result *ExportBillDetailDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportBillDetailDataResponse{}
	_body, _err := client.ExportBillDetailDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportImageWithOptions(request *ExportImageRequest, runtime *util.RuntimeOptions) (_result *ExportImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.OSSBucket)) {
		query["OSSBucket"] = request.OSSBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OSSPrefix)) {
		query["OSSPrefix"] = request.OSSPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.OSSRegionId)) {
		query["OSSRegionId"] = request.OSSRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleName)) {
		query["RoleName"] = request.RoleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportImage(request *ExportImageRequest) (_result *ExportImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportImageResponse{}
	_body, _err := client.ExportImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExportMeasurementDataWithOptions(request *ExportMeasurementDataRequest, runtime *util.RuntimeOptions) (_result *ExportMeasurementDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportMeasurementData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportMeasurementDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExportMeasurementData(request *ExportMeasurementDataRequest) (_result *ExportMeasurementDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportMeasurementDataResponse{}
	_body, _err := client.ExportMeasurementDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDeviceInternetPortWithOptions(request *GetDeviceInternetPortRequest, runtime *util.RuntimeOptions) (_result *GetDeviceInternetPortResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDeviceInternetPort"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDeviceInternetPortResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDeviceInternetPort(request *GetDeviceInternetPortRequest) (_result *GetDeviceInternetPortResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDeviceInternetPortResponse{}
	_body, _err := client.GetDeviceInternetPortWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetOssStorageAndAccByBucketsWithOptions(request *GetOssStorageAndAccByBucketsRequest, runtime *util.RuntimeOptions) (_result *GetOssStorageAndAccByBucketsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOssStorageAndAccByBuckets"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOssStorageAndAccByBucketsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetOssStorageAndAccByBuckets(request *GetOssStorageAndAccByBucketsRequest) (_result *GetOssStorageAndAccByBucketsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOssStorageAndAccByBucketsResponse{}
	_body, _err := client.GetOssStorageAndAccByBucketsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportKeyPairWithOptions(request *ImportKeyPairRequest, runtime *util.RuntimeOptions) (_result *ImportKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKeyBody)) {
		query["PublicKeyBody"] = request.PublicKeyBody
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportKeyPair"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ImportKeyPairResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportKeyPair(request *ImportKeyPairRequest) (_result *ImportKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportKeyPairResponse{}
	_body, _err := client.ImportKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinPublicIpsToEpnInstanceWithOptions(request *JoinPublicIpsToEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *JoinPublicIpsToEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceInfos)) {
		query["InstanceInfos"] = request.InstanceInfos
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinPublicIpsToEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinPublicIpsToEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinPublicIpsToEpnInstance(request *JoinPublicIpsToEpnInstanceRequest) (_result *JoinPublicIpsToEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinPublicIpsToEpnInstanceResponse{}
	_body, _err := client.JoinPublicIpsToEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinSecurityGroupWithOptions(request *JoinSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *JoinSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinSecurityGroup(request *JoinSecurityGroupRequest) (_result *JoinSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinSecurityGroupResponse{}
	_body, _err := client.JoinSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinVSwitchesToEpnInstanceWithOptions(request *JoinVSwitchesToEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *JoinVSwitchesToEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchesInfo)) {
		query["VSwitchesInfo"] = request.VSwitchesInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinVSwitchesToEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinVSwitchesToEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinVSwitchesToEpnInstance(request *JoinVSwitchesToEpnInstanceRequest) (_result *JoinVSwitchesToEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinVSwitchesToEpnInstanceResponse{}
	_body, _err := client.JoinVSwitchesToEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LeaveSecurityGroupWithOptions(request *LeaveSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *LeaveSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LeaveSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LeaveSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LeaveSecurityGroup(request *LeaveSecurityGroupRequest) (_result *LeaveSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LeaveSecurityGroupResponse{}
	_body, _err := client.LeaveSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListApplicationsWithOptions(request *ListApplicationsRequest, runtime *util.RuntimeOptions) (_result *ListApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppVersions)) {
		query["AppVersions"] = request.AppVersions
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterNames)) {
		query["ClusterNames"] = request.ClusterNames
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDate)) {
		query["MaxDate"] = request.MaxDate
	}

	if !tea.BoolValue(util.IsUnset(request.MinDate)) {
		query["MinDate"] = request.MinDate
	}

	if !tea.BoolValue(util.IsUnset(request.OutAppInfoParams)) {
		query["OutAppInfoParams"] = request.OutAppInfoParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplications"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListApplications(request *ListApplicationsRequest) (_result *ListApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListApplicationsResponse{}
	_body, _err := client.ListApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEnsEipAddressAttributeWithOptions(request *ModifyEnsEipAddressAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyEnsEipAddressAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEnsEipAddressAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEnsEipAddressAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEnsEipAddressAttribute(request *ModifyEnsEipAddressAttributeRequest) (_result *ModifyEnsEipAddressAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEnsEipAddressAttributeResponse{}
	_body, _err := client.ModifyEnsEipAddressAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyEpnInstanceWithOptions(request *ModifyEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EPNInstanceName)) {
		query["EPNInstanceName"] = request.EPNInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyEpnInstance(request *ModifyEpnInstanceRequest) (_result *ModifyEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEpnInstanceResponse{}
	_body, _err := client.ModifyEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFileSystemWithOptions(request *ModifyFileSystemRequest, runtime *util.RuntimeOptions) (_result *ModifyFileSystemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyFileSystem"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyFileSystemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFileSystem(request *ModifyFileSystemRequest) (_result *ModifyFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFileSystemResponse{}
	_body, _err := client.ModifyFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyForwardEntryWithOptions(request *ModifyForwardEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForwardEntryId)) {
		query["ForwardEntryId"] = request.ForwardEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryName)) {
		query["ForwardEntryName"] = request.ForwardEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckPort)) {
		query["HealthCheckPort"] = request.HealthCheckPort
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyForwardEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyForwardEntry(request *ModifyForwardEntryRequest) (_result *ModifyForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.ModifyForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageAttributeWithOptions(request *ModifyImageAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyImageAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyImageAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageAttribute(request *ModifyImageAttributeRequest) (_result *ModifyImageAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.ModifyImageAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyImageSharePermissionWithOptions(request *ModifyImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddAccounts)) {
		query["AddAccounts"] = request.AddAccounts
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveAccounts)) {
		query["RemoveAccounts"] = request.RemoveAccounts
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyImageSharePermission"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyImageSharePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyImageSharePermission(request *ModifyImageSharePermissionRequest) (_result *ModifyImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageSharePermissionResponse{}
	_body, _err := client.ModifyImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAttributeWithOptions(request *ModifyInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAttribute(request *ModifyInstanceAttributeRequest) (_result *ModifyInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.ModifyInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewAttributeWithOptions(request *ModifyInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RenewalStatus)) {
		query["RenewalStatus"] = request.RenewalStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAutoRenewAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyInstanceAutoRenewAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewAttribute(request *ModifyInstanceAutoRenewAttributeRequest) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRenewAttributeResponse{}
	_body, _err := client.ModifyInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLoadBalancerAttributeWithOptions(request *ModifyLoadBalancerAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyLoadBalancerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerName)) {
		query["LoadBalancerName"] = request.LoadBalancerName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLoadBalancerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyLoadBalancerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLoadBalancerAttribute(request *ModifyLoadBalancerAttributeRequest) (_result *ModifyLoadBalancerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLoadBalancerAttributeResponse{}
	_body, _err := client.ModifyLoadBalancerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyNetworkAttributeWithOptions(request *ModifyNetworkAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNetworkAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyNetworkAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyNetworkAttribute(request *ModifyNetworkAttributeRequest) (_result *ModifyNetworkAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkAttributeResponse{}
	_body, _err := client.ModifyNetworkAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyPrepayInstanceSpecWithOptions(request *ModifyPrepayInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPrepayInstanceSpec"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPrepayInstanceSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyPrepayInstanceSpec(request *ModifyPrepayInstanceSpecRequest) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPrepayInstanceSpecResponse{}
	_body, _err := client.ModifyPrepayInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupAttributeWithOptions(request *ModifySecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySecurityGroupAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySecurityGroupAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupAttribute(request *ModifySecurityGroupAttributeRequest) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupAttributeResponse{}
	_body, _err := client.ModifySecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyVSwitchAttributeWithOptions(request *ModifyVSwitchAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVSwitchAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchName)) {
		query["VSwitchName"] = request.VSwitchName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVSwitchAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyVSwitchAttribute(request *ModifyVSwitchAttributeRequest) (_result *ModifyVSwitchAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.ModifyVSwitchAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PreCreateEnsServiceWithOptions(request *PreCreateEnsServiceRequest, runtime *util.RuntimeOptions) (_result *PreCreateEnsServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BandwidthType)) {
		query["BandwidthType"] = request.BandwidthType
	}

	if !tea.BoolValue(util.IsUnset(request.BuyResourcesDetail)) {
		query["BuyResourcesDetail"] = request.BuyResourcesDetail
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskSize)) {
		query["DataDiskSize"] = request.DataDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.EnsServiceName)) {
		query["EnsServiceName"] = request.EnsServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceBandwithdLimit)) {
		query["InstanceBandwithdLimit"] = request.InstanceBandwithdLimit
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.NetLevel)) {
		query["NetLevel"] = request.NetLevel
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulingPriceStrategy)) {
		query["SchedulingPriceStrategy"] = request.SchedulingPriceStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulingStrategy)) {
		query["SchedulingStrategy"] = request.SchedulingStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskSize)) {
		query["SystemDiskSize"] = request.SystemDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PreCreateEnsService"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PreCreateEnsServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PreCreateEnsService(request *PreCreateEnsServiceRequest) (_result *PreCreateEnsServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PreCreateEnsServiceResponse{}
	_body, _err := client.PreCreateEnsServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PushApplicationDataWithOptions(request *PushApplicationDataRequest, runtime *util.RuntimeOptions) (_result *PushApplicationDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.PushStrategy)) {
		query["PushStrategy"] = request.PushStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PushApplicationData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PushApplicationDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PushApplicationData(request *PushApplicationDataRequest) (_result *PushApplicationDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushApplicationDataResponse{}
	_body, _err := client.PushApplicationDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReInitDiskWithOptions(request *ReInitDiskRequest, runtime *util.RuntimeOptions) (_result *ReInitDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReInitDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReInitDiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReInitDisk(request *ReInitDiskRequest) (_result *ReInitDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReInitDiskResponse{}
	_body, _err := client.ReInitDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootAICInstanceWithOptions(request *RebootAICInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootAICInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootAICInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebootAICInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootAICInstance(request *RebootAICInstanceRequest) (_result *RebootAICInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootAICInstanceResponse{}
	_body, _err := client.RebootAICInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootARMServerInstanceWithOptions(request *RebootARMServerInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootARMServerInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootARMServerInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebootARMServerInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootARMServerInstance(request *RebootARMServerInstanceRequest) (_result *RebootARMServerInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootARMServerInstanceResponse{}
	_body, _err := client.RebootARMServerInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebootInstanceWithOptions(request *RebootInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForceStop)) {
		query["ForceStop"] = request.ForceStop
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebootInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebootInstance(request *RebootInstanceRequest) (_result *RebootInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootInstanceResponse{}
	_body, _err := client.RebootInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReinitInstanceWithOptions(request *ReinitInstanceRequest, runtime *util.RuntimeOptions) (_result *ReinitInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		body["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ReinitInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReinitInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReinitInstance(request *ReinitInstanceRequest) (_result *ReinitInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReinitInstanceResponse{}
	_body, _err := client.ReinitInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseARMServerInstanceWithOptions(request *ReleaseARMServerInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseARMServerInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseARMServerInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseARMServerInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseARMServerInstance(request *ReleaseARMServerInstanceRequest) (_result *ReleaseARMServerInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseARMServerInstanceResponse{}
	_body, _err := client.ReleaseARMServerInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseInstanceWithOptions(request *ReleaseInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseInstance(request *ReleaseInstanceRequest) (_result *ReleaseInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstanceResponse{}
	_body, _err := client.ReleaseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleasePostPaidInstanceWithOptions(request *ReleasePostPaidInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleasePostPaidInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleasePostPaidInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleasePostPaidInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleasePostPaidInstance(request *ReleasePostPaidInstanceRequest) (_result *ReleasePostPaidInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleasePostPaidInstanceResponse{}
	_body, _err := client.ReleasePostPaidInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleasePrePaidInstanceWithOptions(request *ReleasePrePaidInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleasePrePaidInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleasePrePaidInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleasePrePaidInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleasePrePaidInstance(request *ReleasePrePaidInstanceRequest) (_result *ReleasePrePaidInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleasePrePaidInstanceResponse{}
	_body, _err := client.ReleasePrePaidInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveBackendServersWithOptions(tmpReq *RemoveBackendServersRequest, runtime *util.RuntimeOptions) (_result *RemoveBackendServersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveBackendServersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.BackendServers)) {
		request.BackendServersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BackendServers, tea.String("BackendServers"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServersShrink)) {
		query["BackendServers"] = request.BackendServersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveBackendServers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveBackendServersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveBackendServers(request *RemoveBackendServersRequest) (_result *RemoveBackendServersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveBackendServersResponse{}
	_body, _err := client.RemoveBackendServersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemovePublicIpsFromEpnInstanceWithOptions(request *RemovePublicIpsFromEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *RemovePublicIpsFromEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceInfos)) {
		query["InstanceInfos"] = request.InstanceInfos
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemovePublicIpsFromEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemovePublicIpsFromEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemovePublicIpsFromEpnInstance(request *RemovePublicIpsFromEpnInstanceRequest) (_result *RemovePublicIpsFromEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemovePublicIpsFromEpnInstanceResponse{}
	_body, _err := client.RemovePublicIpsFromEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveVSwitchesFromEpnInstanceWithOptions(request *RemoveVSwitchesFromEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *RemoveVSwitchesFromEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchesInfo)) {
		query["VSwitchesInfo"] = request.VSwitchesInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveVSwitchesFromEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveVSwitchesFromEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveVSwitchesFromEpnInstance(request *RemoveVSwitchesFromEpnInstanceRequest) (_result *RemoveVSwitchesFromEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveVSwitchesFromEpnInstanceResponse{}
	_body, _err := client.RemoveVSwitchesFromEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewARMServerInstanceWithOptions(request *RenewARMServerInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewARMServerInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewARMServerInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewARMServerInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewARMServerInstance(request *RenewARMServerInstanceRequest) (_result *RenewARMServerInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewARMServerInstanceResponse{}
	_body, _err := client.RenewARMServerInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RescaleApplicationWithOptions(request *RescaleApplicationRequest, runtime *util.RuntimeOptions) (_result *RescaleApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleLevel)) {
		query["RescaleLevel"] = request.RescaleLevel
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleType)) {
		query["RescaleType"] = request.RescaleType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSelector)) {
		query["ResourceSelector"] = request.ResourceSelector
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.ToAppVersion)) {
		query["ToAppVersion"] = request.ToAppVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RescaleApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RescaleApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RescaleApplication(request *RescaleApplicationRequest) (_result *RescaleApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RescaleApplicationResponse{}
	_body, _err := client.RescaleApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RescaleDeviceServiceWithOptions(request *RescaleDeviceServiceRequest, runtime *util.RuntimeOptions) (_result *RescaleDeviceServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.IpType)) {
		query["IpType"] = request.IpType
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleLevel)) {
		query["RescaleLevel"] = request.RescaleLevel
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleType)) {
		query["RescaleType"] = request.RescaleType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSpec)) {
		query["ResourceSpec"] = request.ResourceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceInfo)) {
		body["ResourceInfo"] = request.ResourceInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSelector)) {
		body["ResourceSelector"] = request.ResourceSelector
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RescaleDeviceService"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RescaleDeviceServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RescaleDeviceService(request *RescaleDeviceServiceRequest) (_result *RescaleDeviceServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RescaleDeviceServiceResponse{}
	_body, _err := client.RescaleDeviceServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetAICInstanceWithOptions(request *ResetAICInstanceRequest, runtime *util.RuntimeOptions) (_result *ResetAICInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAICInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAICInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetAICInstance(request *ResetAICInstanceRequest) (_result *ResetAICInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAICInstanceResponse{}
	_body, _err := client.ResetAICInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetDeviceInstanceWithOptions(request *ResetDeviceInstanceRequest, runtime *util.RuntimeOptions) (_result *ResetDeviceInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetDeviceInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetDeviceInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetDeviceInstance(request *ResetDeviceInstanceRequest) (_result *ResetDeviceInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetDeviceInstanceResponse{}
	_body, _err := client.ResetDeviceInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResizeDiskWithOptions(request *ResizeDiskRequest, runtime *util.RuntimeOptions) (_result *ResizeDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.NewSize)) {
		query["NewSize"] = request.NewSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResizeDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResizeDiskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResizeDisk(request *ResizeDiskRequest) (_result *ResizeDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResizeDiskResponse{}
	_body, _err := client.ResizeDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartDeviceInstanceWithOptions(request *RestartDeviceInstanceRequest, runtime *util.RuntimeOptions) (_result *RestartDeviceInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RestartDeviceInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RestartDeviceInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartDeviceInstance(request *RestartDeviceInstanceRequest) (_result *RestartDeviceInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartDeviceInstanceResponse{}
	_body, _err := client.RestartDeviceInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSecurityGroupWithOptions(request *RevokeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidrIp)) {
		query["SourceCidrIp"] = request.SourceCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeSecurityGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSecurityGroup(request *RevokeSecurityGroupRequest) (_result *RevokeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupResponse{}
	_body, _err := client.RevokeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeSecurityGroupEgressWithOptions(request *RevokeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestCidrIp)) {
		query["DestCidrIp"] = request.DestCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeSecurityGroupEgress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeSecurityGroupEgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeSecurityGroupEgress(request *RevokeSecurityGroupEgressRequest) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupEgressResponse{}
	_body, _err := client.RevokeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackApplicationWithOptions(request *RollbackApplicationRequest, runtime *util.RuntimeOptions) (_result *RollbackApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.FromAppVersion)) {
		query["FromAppVersion"] = request.FromAppVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.ToAppVersion)) {
		query["ToAppVersion"] = request.ToAppVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RollbackApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackApplication(request *RollbackApplicationRequest) (_result *RollbackApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RollbackApplicationResponse{}
	_body, _err := client.RollbackApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunInstancesWithOptions(tmpReq *RunInstancesRequest, runtime *util.RuntimeOptions) (_result *RunInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataDisk)) {
		request.DataDiskShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataDisk, tea.String("DataDisk"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.SystemDisk))) {
		request.SystemDiskShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.SystemDisk), tea.String("SystemDisk"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.Carrier)) {
		query["Carrier"] = request.Carrier
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskShrink)) {
		query["DataDisk"] = request.DataDiskShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.NetDistrictCode)) {
		query["NetDistrictCode"] = request.NetDistrictCode
	}

	if !tea.BoolValue(util.IsUnset(request.NetWorkId)) {
		query["NetWorkId"] = request.NetWorkId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.PublicIpIdentification)) {
		query["PublicIpIdentification"] = request.PublicIpIdentification
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleAreaLevel)) {
		query["ScheduleAreaLevel"] = request.ScheduleAreaLevel
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulingPriceStrategy)) {
		query["SchedulingPriceStrategy"] = request.SchedulingPriceStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulingStrategy)) {
		query["SchedulingStrategy"] = request.SchedulingStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityId)) {
		query["SecurityId"] = request.SecurityId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskShrink)) {
		query["SystemDisk"] = request.SystemDiskShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueSuffix)) {
		query["UniqueSuffix"] = request.UniqueSuffix
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunInstances(request *RunInstancesRequest) (_result *RunInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunInstancesResponse{}
	_body, _err := client.RunInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunServiceScheduleWithOptions(request *RunServiceScheduleRequest, runtime *util.RuntimeOptions) (_result *RunServiceScheduleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	if !tea.BoolValue(util.IsUnset(request.Directorys)) {
		query["Directorys"] = request.Directorys
	}

	if !tea.BoolValue(util.IsUnset(request.PodConfigName)) {
		query["PodConfigName"] = request.PodConfigName
	}

	if !tea.BoolValue(util.IsUnset(request.PreLockedTimeout)) {
		query["PreLockedTimeout"] = request.PreLockedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleStrategy)) {
		query["ScheduleStrategy"] = request.ScheduleStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceAction)) {
		query["ServiceAction"] = request.ServiceAction
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCommands)) {
		query["ServiceCommands"] = request.ServiceCommands
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunServiceSchedule"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunServiceScheduleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunServiceSchedule(request *RunServiceScheduleRequest) (_result *RunServiceScheduleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunServiceScheduleResponse{}
	_body, _err := client.RunServiceScheduleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetBackendServersWithOptions(tmpReq *SetBackendServersRequest, runtime *util.RuntimeOptions) (_result *SetBackendServersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetBackendServersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.BackendServers)) {
		request.BackendServersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BackendServers, tea.String("BackendServers"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServersShrink)) {
		query["BackendServers"] = request.BackendServersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetBackendServers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetBackendServersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetBackendServers(request *SetBackendServersRequest) (_result *SetBackendServersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetBackendServersResponse{}
	_body, _err := client.SetBackendServersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLoadBalancerHTTPListenerAttributeWithOptions(request *SetLoadBalancerHTTPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerHTTPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerHTTPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLoadBalancerHTTPListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLoadBalancerHTTPListenerAttribute(request *SetLoadBalancerHTTPListenerAttributeRequest) (_result *SetLoadBalancerHTTPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerHTTPListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerHTTPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLoadBalancerHTTPSListenerAttributeWithOptions(request *SetLoadBalancerHTTPSListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.ServerCertificateId)) {
		query["ServerCertificateId"] = request.ServerCertificateId
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerHTTPSListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLoadBalancerHTTPSListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLoadBalancerHTTPSListenerAttribute(request *SetLoadBalancerHTTPSListenerAttributeRequest) (_result *SetLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerHTTPSListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerHTTPSListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLoadBalancerStatusWithOptions(request *SetLoadBalancerStatusRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerStatus)) {
		query["LoadBalancerStatus"] = request.LoadBalancerStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerStatus"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLoadBalancerStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLoadBalancerStatus(request *SetLoadBalancerStatusRequest) (_result *SetLoadBalancerStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerStatusResponse{}
	_body, _err := client.SetLoadBalancerStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLoadBalancerTCPListenerAttributeWithOptions(request *SetLoadBalancerTCPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerTCPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.EstablishedTimeout)) {
		query["EstablishedTimeout"] = request.EstablishedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckType)) {
		query["HealthCheckType"] = request.HealthCheckType
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.PersistenceTimeout)) {
		query["PersistenceTimeout"] = request.PersistenceTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerTCPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLoadBalancerTCPListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLoadBalancerTCPListenerAttribute(request *SetLoadBalancerTCPListenerAttributeRequest) (_result *SetLoadBalancerTCPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerTCPListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerTCPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetLoadBalancerUDPListenerAttributeWithOptions(request *SetLoadBalancerUDPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerUDPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckExp)) {
		query["HealthCheckExp"] = request.HealthCheckExp
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckReq)) {
		query["HealthCheckReq"] = request.HealthCheckReq
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerUDPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetLoadBalancerUDPListenerAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetLoadBalancerUDPListenerAttribute(request *SetLoadBalancerUDPListenerAttributeRequest) (_result *SetLoadBalancerUDPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerUDPListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerUDPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartEpnInstanceWithOptions(request *StartEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *StartEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartEpnInstance(request *StartEpnInstanceRequest) (_result *StartEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartEpnInstanceResponse{}
	_body, _err := client.StartEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartInstanceWithOptions(request *StartInstanceRequest, runtime *util.RuntimeOptions) (_result *StartInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartInstance(request *StartInstanceRequest) (_result *StartInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstanceResponse{}
	_body, _err := client.StartInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartLoadBalancerListenerWithOptions(request *StartLoadBalancerListenerRequest, runtime *util.RuntimeOptions) (_result *StartLoadBalancerListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartLoadBalancerListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartLoadBalancerListenerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartLoadBalancerListener(request *StartLoadBalancerListenerRequest) (_result *StartLoadBalancerListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartLoadBalancerListenerResponse{}
	_body, _err := client.StartLoadBalancerListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopEpnInstanceWithOptions(request *StopEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *StopEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopEpnInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopEpnInstance(request *StopEpnInstanceRequest) (_result *StopEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopEpnInstanceResponse{}
	_body, _err := client.StopEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopInstanceWithOptions(request *StopInstanceRequest, runtime *util.RuntimeOptions) (_result *StopInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForceStop)) {
		query["ForceStop"] = request.ForceStop
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Version)) {
		query["Version"] = request.Version
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopInstance(request *StopInstanceRequest) (_result *StopInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstanceResponse{}
	_body, _err := client.StopInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopLoadBalancerListenerWithOptions(request *StopLoadBalancerListenerRequest, runtime *util.RuntimeOptions) (_result *StopLoadBalancerListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopLoadBalancerListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopLoadBalancerListenerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopLoadBalancerListener(request *StopLoadBalancerListenerRequest) (_result *StopLoadBalancerListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopLoadBalancerListenerResponse{}
	_body, _err := client.StopLoadBalancerListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnAssociateEnsEipAddressWithOptions(request *UnAssociateEnsEipAddressRequest, runtime *util.RuntimeOptions) (_result *UnAssociateEnsEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnAssociateEnsEipAddress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnAssociateEnsEipAddressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnAssociateEnsEipAddress(request *UnAssociateEnsEipAddressRequest) (_result *UnAssociateEnsEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnAssociateEnsEipAddressResponse{}
	_body, _err := client.UnAssociateEnsEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassignPrivateIpAddressesWithOptions(request *UnassignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnassignPrivateIpAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnassignPrivateIpAddressesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassignPrivateIpAddresses(request *UnassignPrivateIpAddressesRequest) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassignPrivateIpAddressesResponse{}
	_body, _err := client.UnassignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnassociateNetworkAclWithOptions(request *UnassociateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *UnassociateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	if !tea.BoolValue(util.IsUnset(request.Resource)) {
		query["Resource"] = request.Resource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnassociateNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnassociateNetworkAclResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnassociateNetworkAcl(request *UnassociateNetworkAclRequest) (_result *UnassociateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateNetworkAclResponse{}
	_body, _err := client.UnassociateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeAICInstanceImageWithOptions(tmpReq *UpgradeAICInstanceImageRequest, runtime *util.RuntimeOptions) (_result *UpgradeAICInstanceImageResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpgradeAICInstanceImageShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ServerIds)) {
		request.ServerIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ServerIds, tea.String("ServerIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeAICInstanceImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeAICInstanceImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeAICInstanceImage(request *UpgradeAICInstanceImageRequest) (_result *UpgradeAICInstanceImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeAICInstanceImageResponse{}
	_body, _err := client.UpgradeAICInstanceImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeApplicationWithOptions(request *UpgradeApplicationRequest, runtime *util.RuntimeOptions) (_result *UpgradeApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeApplication(request *UpgradeApplicationRequest) (_result *UpgradeApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeApplicationResponse{}
	_body, _err := client.UpgradeApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
