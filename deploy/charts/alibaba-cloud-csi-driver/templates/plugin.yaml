{{- range $key, $nodePool := .Values.nodePools -}}
{{- if and $.Values.plugin.enabled (ne $nodePool nil) }}
---
{{- $values := deepCopy $.Values }}
{{- $nodePool := mergeOverwrite $values $nodePool }}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ $nodePool.pluginname }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/name: csi-plugin
spec:
  selector:
    matchLabels:
{{- if eq $nodePool.pluginname "csi-plugin" }}
      app: csi-plugin
{{- else }}
      app.kubernetes.io/name: csi-plugin
      nodepool: {{ $key }}
{{- end }}
  template:
    metadata:
      labels:
{{- if eq $nodePool.pluginname "csi-plugin" }}
        app: csi-plugin
{{- end }}
        app.kubernetes.io/name: csi-plugin
        nodepool: {{ $key }}
    spec:
      {{- if $.Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range $.Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      tolerations:
        - operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
{{- toYaml $nodePool.nodeSelectorTerms | nindent 12 }}
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: alicloud-csi-node
      priorityClassName: system-node-critical
      hostNetwork: true
      hostIPC: true
      hostPID: true
      dnsPolicy: ClusterFirst
{{- if and (ne $nodePool.deploy.nodeInit false) (or $nodePool.csi.nas.enabled $nodePool.csi.oss.enabled (eq $nodePool.deploy.nodeInit true)) }}
      initContainers:
        - name: init
          image: {{ include "imageSpec" (list $nodePool "pluginInit") }}
          args:
            - "--driver={{ include "enabledPlugins" $nodePool.csi }}"
          env:
            {{- include "kubeletDirEnv" $nodePool.deploy.kubeletRootDir | nindent 12 }}
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: etc
              mountPath: /host/etc
            - name: csi-plugin-cm
              mountPath: /etc/csi-plugin/config
            - name: host-log
              mountPath: /var/log/
            - name: ossconnectordir
              mountPath: /host/usr/
{{- end }}
      containers:
{{- range $key, $val := $nodePool.csi }}
{{- if $val.enabled }}
        - name: {{$key}}-driver-registrar
          image: {{ include "imageSpec" (list $nodePool "pluginRegistrar") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          args:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
            - --logging-format={{ $nodePool.logging.format }}
            - {{ printf "--kubelet-registration-path=%s/csi-plugins/%splugin.csi.alibabacloud.com/csi.sock" (clean $nodePool.deploy.kubeletRootDir) $key | quote }}
          volumeMounts:
            - name: {{$key}}-plugin-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
{{- end -}}
{{- end }}
        - name: csi-plugin
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: {{ include "imageSpec" (list $nodePool "plugin") }}
          args:
            - "--endpoint=unix://csi/driverplugin.csi.alibabacloud.com-replace/csi.sock"
            - "--v=2"
            - --logging-format={{ $nodePool.logging.format }}
            - "--driver={{ include "enabledPlugins" $nodePool.csi }}"
            - --run-controller-service=false
            - --run-node-service=true
{{- if $nodePool.deploy.featureGates }}
            - "--feature-gates={{ $nodePool.deploy.featureGates }}"
{{- end -}}
{{- if not $nodePool.deploy.ecs }}
            - --nodeid=$(KUBE_NODE_NAME)
{{- end }}
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            {{- include "networkEnv" $nodePool.deploy | nindent 12 }}
{{- if $nodePool.deploy.regionID }}
            - name: REGION_ID
              value: {{ $nodePool.deploy.regionID | quote }}
{{- end }}
{{- if $nodePool.deploy.ecsEndpoint }}
            - name: ECS_ENDPOINT
              value: {{ $nodePool.deploy.ecsEndpoint | quote }}
{{- end -}}
{{- if $nodePool.deploy.stsEndpoint }}
            - name: STS_ENDPOINT
              value: {{ $nodePool.deploy.stsEndpoint | quote }}
{{- end }}
{{- if $nodePool.deploy.privateCloud }}
            - name: ALICLOUD_CLIENT_SCHEME
              value: HTTP
            - name: PRIVATE_CLOUD_TAG
              value: "true"
{{- end -}}
{{- include "akEnv" $nodePool.deploy.accessKey | nindent 12 }}
{{- include "kubeletDirEnv" $nodePool.deploy.kubeletRootDir | nindent 12 }}
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: healthz
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          ports:
            - name: healthz
              containerPort: 11260
          volumeMounts:
            - name: kubelet-dir
              # keep the trailing slash to be compatible with old ACK installations
              mountPath: {{ print (clean $nodePool.deploy.kubeletRootDir) "/" | quote }}
              mountPropagation: "Bidirectional"
{{- range $key := tuple "disk" "nas" "oss" "bmcpfs" }}
  {{- with index $nodePool.csi $key -}}
    {{- if .enabled }}
            - name: {{ $key }}-plugin-dir
              mountPath: /csi/{{ $key }}plugin.csi.alibabacloud.com
    {{- end -}}
  {{- end -}}
{{- end }}
            - name: etc
              mountPath: /host/etc
            - name: host-log
              mountPath: /var/log/
            - name: container-dir
              mountPath: /var/lib/container
              mountPropagation: "Bidirectional"
            - name: host-dev
              mountPath: /dev
              mountPropagation: "HostToContainer"
            - mountPath: /run/kata-containers/shared/direct-volumes
              name: kata-direct-volumes
{{- if $nodePool.deploy.ack }}
            - mountPath: /var/addon
              name: addon-token
              readOnly: true
{{- end -}}
{{- if $nodePool.csi.oss.enabled }}
            - mountPath: /host/var/run/ossfs
              name: ossfs-metrics-dir
            - mountPath: /run/fuse.ossfs
              name: ossfs-attach-dir
              mountPropagation: "Bidirectional"
{{- end -}}
{{- if $nodePool.csi.nas.enabled }}
            - mountPath: /host/var/run/efc
              name: efc-metrics-dir
{{- end }}
            - mountPath: /host/run/csi-tool
              name: run-csi
            - mountPath: /run/cnfs
              name: run-cnfs
            - mountPath: /host/sys/fs/cgroup
              name: cgroup
              mountPropagation: "HostToContainer"
            - mountPath: /etc/csi-plugin/config
              name: csi-plugin-cm
{{- if $nodePool.csi.local.enabled }}
        - name: local-csi-plugin
          securityContext:
            privileged: true
            allowPrivilegeEscalation: true
          image: {{ include "imageSpec" (list $nodePool "localPlugin") }}
          args:
            - --endpoint=unix://csi/csi.sock
            - --http-endpoint=:11261
            - --run-node-service=true
            - --run-controller-service=false
            - --v=2
            - --node-id=$(KUBE_NODE_NAME)
          env:
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
{{- if $nodePool.deploy.ecsEndpoint }}
            - name: ECS_ENDPOINT
              value: {{ $nodePool.deploy.ecsEndpoint | quote }}
{{- end -}}
{{- if $nodePool.deploy.stsEndpoint }}
            - name: STS_ENDPOINT
              value: {{ $nodePool.deploy.stsEndpoint | quote }}
{{- end }}
{{- if $nodePool.deploy.nasEndpoint }}
            - name: NAS_ENDPOINT
              value: {{ $nodePool.deploy.nasEndpoint | quote }}
{{- end }}
{{- if $nodePool.deploy.privateCloud }}
            - name: ALICLOUD_CLIENT_SCHEME
              value: HTTP
{{- end -}}
{{- include "akEnv" $nodePool.deploy.accessKey | nindent 12 }}
{{- include "kubeletDirEnv" $nodePool.deploy.kubeletRootDir | nindent 12 }}
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          ports:
            - name: http
              containerPort: 11261
          volumeMounts:
            - name: local-plugin-dir
              mountPath: /csi
            - name: kubelet-dir
              # keep the trailing slash to be compatible with old ACK installations
              mountPath: {{ print (clean $nodePool.deploy.kubeletRootDir) "/" | quote }}
              mountPropagation: "Bidirectional"
            - name: host-dev
              mountPath: /dev
              mountPropagation: "HostToContainer"
{{- if $nodePool.deploy.ack }}
            - mountPath: /var/addon
              name: addon-token
              readOnly: true
{{- end }}
            - mountPath: /host/run/csi-tool
              name: run-csi
            - mountPath: /tls/local/grpc
              name: tls-token-dir
              readOnly: true
            - name: host-mnt
              mountPath: /mnt
              mountPropagation: HostToContainer
{{- end }}
      volumes:
{{- if $nodePool.csi.oss.enabled }}
        - name: ossfs-metrics-dir
          hostPath:
            path: /var/run/ossfs
            type: DirectoryOrCreate
        - name: ossfs-attach-dir
          hostPath:
            path: /run/fuse.ossfs
            type: DirectoryOrCreate
{{- end -}}
{{- if $nodePool.csi.nas.enabled }}
        - name: efc-metrics-dir
          hostPath:
            path: /var/run/efc
            type: DirectoryOrCreate
{{- end }}
        - name: run-csi
          hostPath:
            path: /run/csi-tool
            type: DirectoryOrCreate
        - name: run-cnfs
          hostPath:
            path: /run/cnfs
            type: DirectoryOrCreate
{{- if $nodePool.csi.local.enabled }}
        - name: tls-token-dir
          secret:
            defaultMode: 420
            secretName: csi-local-plugin-cert
        - name: host-mnt
          hostPath:
            path: /mnt
            type: DirectoryOrCreate
{{- end }}
        - name: registration-dir
          hostPath:
            path: {{ printf "%s/plugins_registry" (clean $nodePool.deploy.kubeletRootDir) | quote }}
            type: DirectoryOrCreate
        - name: container-dir
          hostPath:
            path: /var/lib/container
            type: DirectoryOrCreate
        - name: kubelet-dir
          hostPath:
            path: {{ (clean $nodePool.deploy.kubeletRootDir) | quote }}
            type: Directory
{{- range $key, $val := $nodePool.csi }}
{{- if $val.enabled }}
        - name: {{ $key }}-plugin-dir
          hostPath:
            path: {{ printf "%s/csi-plugins/%splugin.csi.alibabacloud.com" (clean $nodePool.deploy.kubeletRootDir) $key | quote }}
            type: DirectoryOrCreate
{{- end -}}
{{- end }}
        - name: cgroup
          hostPath:
            path: /sys/fs/cgroup
            type: Directory
        - name: host-dev
          hostPath:
            path: /dev
        - name: host-log
          hostPath:
            path: /var/log/
        - name: etc
          hostPath:
            path: /etc
        - name: ossconnectordir
          hostPath:
            path: /usr/
        - name: csi-plugin-cm
          configMap:
            name: csi-plugin
            optional: true
        - hostPath:
            path: /run/kata-containers/shared/direct-volumes
            type: DirectoryOrCreate
          name: kata-direct-volumes
{{- if $nodePool.deploy.ack }}
        - name: addon-token
          secret:
            defaultMode: 420
            optional: true
            items:
            - key: addon.token.config
              path: token-config
{{- if eq $nodePool.deploy.ramToken "v2" }}
            secretName: addon.aliyuncsmanagedcsipluginrole.token
{{- else}}
            secretName: addon.csi.token
{{- end }}
{{- end }}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 20%
    type: RollingUpdate
{{- end -}}
{{- end -}}
