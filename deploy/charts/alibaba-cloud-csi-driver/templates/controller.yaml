{{- if .Values.controller.enabled -}}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: csi-provisioner
  namespace: {{ .Release.Namespace }}
  annotations:
    csi.alibabacloud.com/default-ossfs-tag: {{ .Values.images.ossfs.tag }}
    csi.alibabacloud.com/default-ossfs2-tag: {{ .Values.images.ossfs2.tag }}
spec:
  selector:
    matchLabels:
      app: csi-provisioner
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  replicas: {{ .Values.controller.replicas }}
  template:
    metadata:
      labels:
        app: csi-provisioner
    spec:
      {{- if $.Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range $.Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      affinity:
        nodeAffinity:
        {{- if .Values.controller.nodeAffinity }}
          {{- toYaml .Values.controller.nodeAffinity | nindent 10 }}
        {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
          - weight: 1
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
          - weight: 2
            preference:
              matchExpressions:
              - key: type
                operator: NotIn
                values:
                - virtual-kubelet
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: alibabacloud.com/is-edge-worker
                operator: NotIn
                values:
                - "true"
        {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - csi-provisioner
              topologyKey: kubernetes.io/hostname
      tolerations:
      - effect: NoSchedule
        operator: Exists
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        operator: Exists
        key: node-role.kubernetes.io/control-plane
      serviceAccountName: alicloud-csi-provisioner
      priorityClassName: system-cluster-critical
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532  # TODO: remove this when we set the user in all the images
      containers:
{{- if and .Values.csi.disk.enabled .Values.csi.disk.controller.enabled }}
        - name: external-disk-provisioner
          image: {{ include "imageSpec" (list .Values "externalProvisioner") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          ports:
            - containerPort: 8080
              name: disk-p-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: disk-p-http
          args:
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8080
            - --volume-name-prefix=disk
            - --strict-topology=true
            - --timeout=150s
            - --leader-election=true
            - --retry-interval-start=500ms
            - --extra-create-metadata=true
            - --default-fstype=ext4
            - --v=5
            - --logging-format={{ .Values.logging.format }}
            - --kube-api-qps=100
            - --kube-api-burst=200
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: disk-provisioner-dir
              mountPath: /csi
        - name: external-disk-attacher
          image: {{ include "imageSpec" (list .Values "externalAttacher") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          ports:
            - containerPort: 8081
              name: disk-a-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: disk-a-http
          args:
            - --v=5
            - --logging-format={{ .Values.logging.format }}
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8081
            - --leader-election=true
            - --kube-api-qps=100
            - --kube-api-burst=200
            - --worker-threads=32
            - --timeout=30s
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: disk-provisioner-dir
              mountPath: /csi
        - name: external-disk-resizer
          image: {{ include "imageSpec" (list .Values "externalResizer") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1Gi
          ports:
            - containerPort: 8082
              name: disk-r-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: disk-r-http
          args:
            - --v=5
            - --logging-format={{ .Values.logging.format }}
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8082
            - --leader-election
            - --handle-volume-inuse-error=false
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: disk-provisioner-dir
              mountPath: /csi
        - name: external-csi-snapshotter
          image: {{ include "imageSpec" (list .Values "externalSnapshotter") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          args:
            - --v=5
            - --csi-address=/csi/csi.sock
            - --leader-election=true
            - --extra-create-metadata=true
            - --enable-volume-group-snapshots=true
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: disk-provisioner-dir
              mountPath: /csi
{{ if .Values.volumeSnapshot.controller.enabled }}
        - name: external-snapshot-controller
          image: {{ include "imageSpec" (list .Values "externalSnapshotController") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          args:
            - --v=5
            - --leader-election=true
            - --enable-volume-group-snapshots=true
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
{{- end -}}
{{- end -}}
{{- if and .Values.csi.nas.enabled .Values.csi.nas.controller.enabled }}
        - name: external-nas-provisioner
          image: {{ include "imageSpec" (list .Values "externalProvisioner") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          ports:
            - containerPort: 8090
              name: nas-p-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: nas-p-http
          args:
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8090
            - --volume-name-prefix=nas
            - --timeout=150s
            - --leader-election=true
            - --retry-interval-start=500ms
            - --default-fstype=nfs
            - --kube-api-qps=100
            - --kube-api-burst=200
            - --v=5
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: nas-provisioner-dir
              mountPath: /csi
        - name: external-nas-resizer
          image: {{ include "imageSpec" (list .Values "externalResizer") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1Gi
          ports:
            - containerPort: 8092
              name: nas-r-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: nas-r-http
          args:
            - --v=5
            - --logging-format={{ .Values.logging.format }}
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8092
            - --leader-election
            - --handle-volume-inuse-error=false
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: nas-provisioner-dir
              mountPath: /csi
{{- end -}}
{{- if and .Values.csi.oss.enabled .Values.csi.oss.controller.enabled }}
        - name: external-oss-provisioner
          args:
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8100
            - --volume-name-prefix=oss
            - --timeout=150s
            - --leader-election=true
            - --retry-interval-start=500ms
            - --default-fstype=ossfs
            - --kube-api-qps=100
            - --kube-api-burst=200
            - --v=5
          image: {{ include "imageSpec" (list .Values "externalProvisioner") }}
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 10m
              memory: 16Mi
          ports:
            - containerPort: 8100
              name: oss-p-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: oss-p-http
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
          - mountPath: /csi
            name: oss-provisioner-dir
        - name: external-oss-attacher
          image: {{ include "imageSpec" (list .Values "externalAttacher") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          ports:
            - containerPort: 8101
              name: oss-a-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: oss-a-http
          args:
            - --v=5
            - --logging-format={{ .Values.logging.format }}
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8101
            - --leader-election=true
            - --kube-api-qps=100
            - --kube-api-burst=200
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: oss-provisioner-dir
              mountPath: /csi
{{- end -}}
{{- if and .Values.csi.bmcpfs.enabled .Values.csi.bmcpfs.controller.enabled }}
        - name: external-bmcpfs-attacher
          image: {{ include "imageSpec" (list .Values "externalAttacher") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          args:
            - --v=5
            - --logging-format={{ .Values.logging.format }}
            - --csi-address=/csi/csi.sock
            - --leader-election=true
            - --kube-api-qps=50
            - --kube-api-burst=100
            - --worker-threads=32
            - --timeout=30s
          volumeMounts:
            - name: bmcpfs-provisioner-dir
              mountPath: /csi
{{- end -}}
{{- if and .Values.csi.local.enabled .Values.csi.local.controller.enabled }}
        - name: external-local-provisioner
          image: {{ include "imageSpec" (list .Values "externalProvisioner") }}
          args:
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8110
            - --volume-name-prefix=local
            - --strict-topology=true
            - --timeout=150s
            - --extra-create-metadata=true
            - --leader-election=true
            - --retry-interval-start=500ms
            - --default-fstype=ext4
            - --kube-api-qps=100
            - --kube-api-burst=200
            - --v=5
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          ports:
            - containerPort: 8110
              name: local-p-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: local-p-http
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: local-provisioner-dir
              mountPath: /csi
        - name: external-local-resizer
          image: {{ include "imageSpec" (list .Values "externalResizer") }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 500m
              memory: 1Gi
          ports:
            - containerPort: 8112
              name: local-r-http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz/leader-election
              port: local-r-http
          args:
            - --v=5
            - --logging-format={{ .Values.logging.format }}
            - --csi-address=/csi/csi.sock
            - --http-endpoint=:8112
            - --leader-election
            - --handle-volume-inuse-error=false
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: local-provisioner-dir
              mountPath: /csi
{{- end }}
        - name: csi-provisioner
          image: {{ include "imageSpec" (list .Values "controller") }}
          args:
            - --endpoint=unix://csi/driverplugin.csi.alibabacloud.com-replace/csi.sock
            - --v=2
            - --logging-format={{ .Values.logging.format }}
            - "--driver={{ include "enabledControllers" .Values.csi }}"
            - --run-controller-service=true
            - --run-node-service=false
            - --kube-api-qps=100
            - --kube-api-burst=200
{{- if .Values.deploy.featureGates }}
            - "--feature-gates={{ .Values.deploy.featureGates }}"
{{- end -}}
{{- if not .Values.deploy.ecs }}
            - --nodeid=$(KUBE_NODE_NAME)
{{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
            {{- include "networkEnv" .Values.deploy | nindent 12 }}
            - name: "DEFAULT_REGISTRY"
              value: {{ include "registry" .Values | quote }}
{{- if .Values.deploy.ack }}
            - name: "CLUSTER_ID"
              value: {{ .Values.deploy.clusterID | quote }}
{{- end }}
{{- if .Values.deploy.regionID }}
            - name: REGION_ID
              value: {{ .Values.deploy.regionID | quote }}
{{- end }}
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
{{- if .Values.deploy.ecsEndpoint }}
            - name: ECS_ENDPOINT
              value: {{ .Values.deploy.ecsEndpoint | quote }}
{{- end }}
{{- if .Values.deploy.stsEndpoint }}
            - name: STS_ENDPOINT
              value: {{ .Values.deploy.stsEndpoint | quote }}
{{- end }}
{{- if .Values.deploy.nasEndpoint }}
            - name: NAS_ENDPOINT
              value: {{ .Values.deploy.nasEndpoint | quote }}
{{- end }}
{{- if .Values.deploy.privateCloud }}
            - name: ALICLOUD_CLIENT_SCHEME
              value: HTTP
            - name: PRIVATE_CLOUD_TAG
              value: "true"
            - name: ALIBABA_CLOUD_HTTP_HEADERS
              value: |
                X-Acsproxy-Ascm-Context: {{ .Values.deploy.acsProxyASCMContext }}
{{- end }}
{{- if .Values.deploy.withStorageController }}
            - name: ENABLE_NAS_SUBPATH_FINALIZER
              value: "true"
{{- end }}
{{- include "akEnv" .Values.deploy.accessKey | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: healthz
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: healthz
            periodSeconds: 10
          ports:
            - name: healthz
              containerPort: 11270
          volumeMounts:
{{- range $key := tuple "disk" "nas" "oss" "bmcpfs" }}
  {{- with index $.Values.csi $key -}}
    {{- if and .enabled .controller.enabled }}
            - name: {{ $key }}-provisioner-dir
              mountPath: /csi/{{ $key }}plugin.csi.alibabacloud.com
    {{- end -}}
  {{- end -}}
{{- end }}
{{- if .Values.deploy.ack }}
            - mountPath: /var/addon
              name: addon-token
              readOnly: true
{{- end }}
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
{{- if .Values.csi.local.enabled }}
        - name: local-csi-provisioner
          image: {{ include "imageSpec" (list .Values "localController") }}
          args:
            - --endpoint=unix://csi/csi.sock
            - --http-endpoint=:11271
            - --run-node-service=false
            - --run-controller-service=true
            - --kube-api-qps=100
            - --kube-api-burst=200
            - --v=2
            - --node-id=$(KUBE_NODE_NAME)
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          env:
{{- if .Values.deploy.ack }}
            - name: "CLUSTER_ID"
              value: {{ .Values.deploy.clusterID | quote }}
{{- end }}
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
{{- if .Values.deploy.ecsEndpoint }}
            - name: ECS_ENDPOINT
              value: {{ .Values.deploy.ecsEndpoint | quote }}
{{- end }}
{{- if .Values.deploy.stsEndpoint }}
            - name: STS_ENDPOINT
              value: {{ .Values.deploy.stsEndpoint | quote }}
{{- end }}
{{- if .Values.deploy.privateCloud }}
            - name: ALICLOUD_CLIENT_SCHEME
              value: HTTP
{{- end }}
{{- include "akEnv" .Values.deploy.accessKey | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 10
          ports:
            - name: http
              containerPort: 11271
          volumeMounts:
            - name: local-provisioner-dir
              mountPath: /csi
{{- if .Values.deploy.ack }}
            - mountPath: /var/addon
              name: addon-token
              readOnly: true
{{- end }}
          resources:
            limits:
              cpu: 500m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 128Mi
{{- end }}
      volumes:
{{- range $key, $val := .Values.csi }}
{{- if and $val.enabled $val.controller.enabled }}
        - name: {{ $key }}-provisioner-dir
          emptyDir: {}
{{- end -}}
{{- end }}
{{- if .Values.deploy.ack }}
        - name: addon-token
          secret:
            defaultMode: 420
            optional: true
            items:
            - key: addon.token.config
              path: token-config
{{- if eq .Values.deploy.ramToken "v2" }}
            secretName: addon.aliyuncsmanagedcsiprovisionerrole.token
{{- else }}
# still use old configuration for special usage
            secretName: addon.csi.token
{{- end }}
{{- end -}}
{{- end -}}
